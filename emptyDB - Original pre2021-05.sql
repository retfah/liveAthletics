-- MySQL Script generated by MySQL Workbench
-- 05/06/20 18:08:06
-- Model: New Model    Version: 1.0
-- MySQL Workbench Forward Engineering

SET @OLD_UNIQUE_CHECKS=@@UNIQUE_CHECKS, UNIQUE_CHECKS=0;
SET @OLD_FOREIGN_KEY_CHECKS=@@FOREIGN_KEY_CHECKS, FOREIGN_KEY_CHECKS=0;
SET @OLD_SQL_MODE=@@SQL_MODE, SQL_MODE='TRADITIONAL,ALLOW_INVALID_DATES';

-- -----------------------------------------------------
-- Schema athletica_old
-- -----------------------------------------------------
-- -----------------------------------------------------
-- Schema athletica2
-- -----------------------------------------------------
-- New athletica database
-- -----------------------------------------------------
-- Schema athletica2_admin
-- -----------------------------------------------------
-- Add here the following tables:
-- -  all the base-data tables like licensed athletes, clubs, team and their performances --> this data will be copied to the specific meeting-DB as soon as an athlete/club/team is registered
-- -  probably add here a table for user accounts, when they shall be local and not transferred to slaves; so far the local admin account is simply set in a config file.
-- -----------------------------------------------------
-- Schema athletica3
-- -----------------------------------------------------

-- -----------------------------------------------------
-- Table `competitions`
-- -----------------------------------------------------
CREATE TABLE IF NOT EXISTS `competitions` (
  `xCompetition` INT UNSIGNED NOT NULL AUTO_INCREMENT,
  `competitionType` TINYINT UNSIGNED NOT NULL DEFAULT '0' COMMENT 'die Art des \"Wettkampfes\"=der Wettkampftyp, zB: normal, SVM-LigaA, Kids-Cup, ... (Referenz wird als Nummer abgelegt)\nSMALLINT: damit es sicherlich immer reicht für alle Typen (65535 Werte möglich)',
  `competitionName` VARCHAR(100) NOT NULL DEFAULT '' COMMENT 'Name zur leichteren Identifikation, kann ev auf Anzeigen, Online oder auf den Wettkampfblättern gebruacht werden',
  `competitionIsTeam` TINYINT(1) NOT NULL DEFAULT 0,
  PRIMARY KEY (`xCompetition`))
ENGINE = InnoDB
DEFAULT CHARACTER SET = utf8
COMMENT = 'defines diffrerent competitions (standard, SVM A, SVM B, team-SM, Kids-cup, etc.) which defines standard parameters for track-distribution-strategies, print-Setups, \n\nev hier noch Startgelder für Teams eingeben';


-- -----------------------------------------------------
-- Table `disciplines`
-- -----------------------------------------------------
CREATE TABLE IF NOT EXISTS `disciplines` (
  `xDiscipline` INT UNSIGNED NOT NULL AUTO_INCREMENT,
  `disciplineSortorder` INT UNSIGNED NOT NULL DEFAULT '1' COMMENT 'Sortierwert?',
  `disciplineIndoor` BIT NOT NULL DEFAULT False,
  `disciplineType` TINYINT UNSIGNED NOT NULL COMMENT 'an ID for the discipline module to use, e.g. run-in-lanes-wind, run-in-lanes-noWind, run-no-lanes, tech-long, tech-high. Using modules for the disciplines allows for flexibility with new disciplines, but it might add some difficulties, as the modules will hav eto implement their own tables, which means when activating/deactivating the module, the DB has to be changed!',
  `disciplineTimeAppeal` TIME NOT NULL DEFAULT '00:00:00',
  `disciplineTimeCall` TIME NOT NULL DEFAULT '00:00:00',
  `disciplineDistance` FLOAT UNSIGNED NOT NULL DEFAULT '0',
  `disciplineWind` BIT NOT NULL DEFAULT False,
  `disciplineActive` BIT NOT NULL DEFAULT True,
  `disciplineRelay` BIT NOT NULL DEFAULT False,
  `disciplineNameStd` VARCHAR(50) NOT NULL DEFAULT '' COMMENT 'falls in einer Sprache nicht verfügbar',
  `disciplineShortnameStd` VARCHAR(20) NOT NULL DEFAULT '' COMMENT 'falls in einer sprache nicht verfügbar',
  PRIMARY KEY (`xDiscipline`),
  UNIQUE INDEX `Kurzname` (`disciplineNameStd` ASC),
  INDEX `Anzeige` (`disciplineSortorder` ASC),
  INDEX `Staffel` (`disciplineRelay` ASC))
ENGINE = InnoDB
AUTO_INCREMENT = 206
DEFAULT CHARACTER SET = utf8
COMMENT = 'wind and distance actually should be in subtables, wind alone for technical stuff, wind and distance for track disciplines;\ndoes it need active?\n\nnot implemented:\nxOmegaType, Seriengrösse';


-- -----------------------------------------------------
-- Table `categories`
-- -----------------------------------------------------
CREATE TABLE IF NOT EXISTS `categories` (
  `xCategory` INT UNSIGNED NOT NULL AUTO_INCREMENT,
  `categoryShortname` VARCHAR(4) NOT NULL DEFAULT '',
  `categoryName` VARCHAR(30) NOT NULL DEFAULT '',
  `categorySortorder` INT UNSIGNED NOT NULL DEFAULT '1',
  `age` TINYINT UNSIGNED NOT NULL DEFAULT '99',
  `categoryCode` VARCHAR(4) NOT NULL DEFAULT '',
  `sex` ENUM('m', 'f') NOT NULL DEFAULT 'm',
  `active` BIT NOT NULL DEFAULT True,
  PRIMARY KEY (`xCategory`),
  UNIQUE INDEX `Kurzname` (`categoryShortname` ASC),
  INDEX `Anzeige` (`categorySortorder` ASC))
ENGINE = InnoDB
AUTO_INCREMENT = 43
DEFAULT CHARACTER SET = utf8
COMMENT = 'no UKC-Column';


-- -----------------------------------------------------
-- Table `eventGroup`
-- -----------------------------------------------------
CREATE TABLE IF NOT EXISTS `eventGroup` (
  `xEventGroup` INT UNSIGNED NOT NULL AUTO_INCREMENT,
  `xDiscipline` INT UNSIGNED NOT NULL,
  `eventGroupName` VARCHAR(50) NOT NULL DEFAULT '',
  `isCombined` BIT NOT NULL DEFAULT 0 COMMENT 'this means it is a combined event (heptathlon, ...) --> prevents having multiple rounds as there every discipline has only one round',
  PRIMARY KEY (`xEventGroup`),
  INDEX `fk_contest_disciplineType1_idx` (`xDiscipline` ASC),
  CONSTRAINT `fk_contest_disciplineType1`
    FOREIGN KEY (`xDiscipline`)
    REFERENCES `disciplines` (`xDiscipline`)
    ON DELETE NO ACTION
    ON UPDATE NO ACTION)
ENGINE = InnoDB
DEFAULT CHARACTER SET = utf8
COMMENT = 'entually add here some configuration stuff for groups that might be useful when group-memberships should be transferred: e.g. shall all rounds share the same groups, i.e. the person is always in group 2\nmaybe a part of this info must also be stored in rounds!';


-- -----------------------------------------------------
-- Table `events`
-- -----------------------------------------------------
CREATE TABLE IF NOT EXISTS `events` (
  `xEvent` INT UNSIGNED NOT NULL AUTO_INCREMENT,
  `xDiscipline` INT UNSIGNED NOT NULL,
  `xCategory` INT UNSIGNED NOT NULL,
  `xEventGroup` INT UNSIGNED NULL,
  `entryFee` FLOAT UNSIGNED NOT NULL DEFAULT '0',
  `bailFee` FLOAT UNSIGNED NOT NULL DEFAULT '0',
  `eventOnlineId` INT UNSIGNED NOT NULL DEFAULT '0',
  `info` VARCHAR(50) NULL DEFAULT NULL,
  PRIMARY KEY (`xEvent`),
  INDEX `fk_discipline_disciplineType1_idx` (`xDiscipline` ASC),
  INDEX `fk_discipline_category1_idx` (`xCategory` ASC),
  INDEX `fk_events_eventGroup1_idx` (`xEventGroup` ASC),
  CONSTRAINT `fk_discipline_disciplineType1`
    FOREIGN KEY (`xDiscipline`)
    REFERENCES `disciplines` (`xDiscipline`)
    ON DELETE NO ACTION
    ON UPDATE NO ACTION,
  CONSTRAINT `fk_discipline_category1`
    FOREIGN KEY (`xCategory`)
    REFERENCES `categories` (`xCategory`)
    ON DELETE NO ACTION
    ON UPDATE NO ACTION,
  CONSTRAINT `fk_events_eventGroup1`
    FOREIGN KEY (`xEventGroup`)
    REFERENCES `eventGroup` (`xEventGroup`)
    ON DELETE NO ACTION
    ON UPDATE NO ACTION)
ENGINE = InnoDB
DEFAULT CHARACTER SET = utf8
COMMENT = 'the events (=single disciplines), an athlete / relay can have an inscription (table start) to\n\nnot implemented compared to wettkampf, but seems ok like this:\ntyp (formerly used to distinguish combined), Punktetabelle, Punkteformel, Windmessung, Zeitmessung, ZeitmessungAuto, Mehrkampfcode, Mehrkampfende, Mehrkampfreihenfolge, xKategorie_SVM, TypAenderung (seems was unused)';


-- -----------------------------------------------------
-- Table `conversions`
-- -----------------------------------------------------
CREATE TABLE IF NOT EXISTS `conversions` (
  `xConversion` INT UNSIGNED NOT NULL AUTO_INCREMENT,
  `conversionName` VARCHAR(50) NOT NULL COMMENT 'possible problem: translation; as long as this is simply a general name like \'IAAF\' or \'swiss-athletics\', it is no problem',
  `conversionType` TINYINT UNSIGNED NOT NULL DEFAULT '0' COMMENT 'defines the internal routine that should be called',
  PRIMARY KEY (`xConversion`),
  UNIQUE INDEX `name_UNIQUE` (`conversionName` ASC))
ENGINE = InnoDB
DEFAULT CHARACTER SET = utf8
COMMENT = 'stores the different conversion types --> \'+-unchangable table\', so probably better not in databse, but \'conf-coded\' somewhere';


-- -----------------------------------------------------
-- Table `combinedEvents`
-- -----------------------------------------------------
CREATE TABLE IF NOT EXISTS `combinedEvents` (
  `xCombinedEvent` INT UNSIGNED NOT NULL AUTO_INCREMENT,
  `xCategory` INT UNSIGNED NOT NULL,
  `xCompetition` INT UNSIGNED NOT NULL,
  `combinedEventName` VARCHAR(50) NOT NULL DEFAULT '\"\"',
  `combinedEventType` TINYINT UNSIGNED NOT NULL COMMENT 'here the type of the combinedEvent is stored (like 7-Kampf, 10-Kampf, custom) --> the disciplines that should be connected to this type are defined in a conf-file (but not mandatory for all combinedEventTypes, to allow custom combined Events)\ncustom = ...KAMPF',
  `xConversion` INT UNSIGNED NOT NULL,
  PRIMARY KEY (`xCombinedEvent`),
  CONSTRAINT `fk_event_conversion1`
    FOREIGN KEY ()
    REFERENCES `conversions` ()
    ON DELETE NO ACTION
    ON UPDATE NO ACTION)
ENGINE = InnoDB
DEFAULT CHARACTER SET = utf8
COMMENT = 'this table is new in Athletica2\nMehrkampf\nwieso braucht es hier die Kategorie? ist redundant\ndie Competition ist redundant';


-- -----------------------------------------------------
-- Table `inscriptions`
-- -----------------------------------------------------
CREATE TABLE IF NOT EXISTS `inscriptions` (
  `xInscription` INT UNSIGNED NOT NULL AUTO_INCREMENT,
  `xCategory` INT UNSIGNED NOT NULL,
  `number` INT UNSIGNED NOT NULL DEFAULT '0',
  PRIMARY KEY (`xInscription`),
  INDEX `fk_inscription_category1_idx` (`xCategory` ASC),
  CONSTRAINT `fk_inscription_category1`
    FOREIGN KEY (`xCategory`)
    REFERENCES `categories` (`xCategory`)
    ON DELETE NO ACTION
    ON UPDATE NO ACTION)
ENGINE = InnoDB
DEFAULT CHARACTER SET = utf8
COMMENT = 'ev. delete xCategory\n\nmissing:\nErstserie, Bezahlt, Gruppe(!), BestleistungMK, Vereinsinfo, xTeam, BaseEffortMK, AnmeldeNr_ZLV (!), KidID, Angemeldet, VorjahrleistungMK';


-- -----------------------------------------------------
-- Table `clubs`
-- -----------------------------------------------------
CREATE TABLE IF NOT EXISTS `clubs` (
  `xClub` INT UNSIGNED NOT NULL AUTO_INCREMENT,
  `clubName` VARCHAR(100) NOT NULL DEFAULT '',
  `clubSortvalue` VARCHAR(100) NOT NULL DEFAULT '0',
  `usercode` VARCHAR(30) NOT NULL DEFAULT '' COMMENT 'the username in the alabus database --> why do we need this?',
  `deleted` BIT NOT NULL DEFAULT False COMMENT 'because clubs can not be delted as long as it is referenced --> do not ',
  PRIMARY KEY (`xClub`),
  UNIQUE INDEX `Name` (`clubName` ASC),
  INDEX `Sortierwert` (`clubSortvalue` ASC),
  INDEX `xCode` (`usercode` ASC))
ENGINE = InnoDB
AUTO_INCREMENT = 634
DEFAULT CHARACTER SET = utf8;


-- -----------------------------------------------------
-- Table `teams`
-- -----------------------------------------------------
CREATE TABLE IF NOT EXISTS `teams` (
  `xTeam` INT UNSIGNED ZEROFILL NOT NULL,
  `xCompetition` INT UNSIGNED NOT NULL COMMENT 'really necessary?',
  `teamName` VARCHAR(100) NOT NULL DEFAULT '',
  `xClub` INT UNSIGNED NOT NULL,
  `Perf` INT UNSIGNED NOT NULL DEFAULT 0,
  PRIMARY KEY (`xTeam`),
  INDEX `fk_teams_clubs1_idx` (`xClub` ASC),
  INDEX `fk_teams_competitions1_idx` (`xCompetition` ASC),
  CONSTRAINT `fk_teams_clubs1`
    FOREIGN KEY (`xClub`)
    REFERENCES `clubs` (`xClub`)
    ON DELETE NO ACTION
    ON UPDATE NO ACTION,
  CONSTRAINT `fk_teams_competitions1`
    FOREIGN KEY (`xCompetition`)
    REFERENCES `competitions` (`xCompetition`)
    ON DELETE NO ACTION
    ON UPDATE NO ACTION)
ENGINE = InnoDB
COMMENT = 'in the original, also the category had a column --> is that necessary? IMO: same competition, same category (in team competitions)\none could think about separating the team from the competition, but as teams are always different at each competition/meeting/from year to year/..., it meight be reasonable to store it in one ';


-- -----------------------------------------------------
-- Table `teamInscriptions`
-- -----------------------------------------------------
CREATE TABLE IF NOT EXISTS `teamInscriptions` (
  `xInscription` INT UNSIGNED NOT NULL,
  `xTeam` INT UNSIGNED NOT NULL,
  PRIMARY KEY (`xInscription`, `xTeam`),
  INDEX `fk_teamInscriptions_teams1_idx` (`xTeam` ASC),
  CONSTRAINT `fk_teamInscriptions_inscriptions1`
    FOREIGN KEY (`xInscription`)
    REFERENCES `inscriptions` (`xInscription`)
    ON DELETE NO ACTION
    ON UPDATE NO ACTION,
  CONSTRAINT `fk_teamInscriptions_teams1`
    FOREIGN KEY (`xTeam`)
    REFERENCES `teams` (`xTeam`)
    ON DELETE NO ACTION
    ON UPDATE NO ACTION)
ENGINE = InnoDB
COMMENT = 'two public keys as primary key: guarantees that one inscription (either an athlete or a relay) can only be part of one team in one competition.\nif teams should be per Meeting and not per competition, then one could ommit this table and write xTeam directly to the inscription';


-- -----------------------------------------------------
-- Table `starts`
-- -----------------------------------------------------
CREATE TABLE IF NOT EXISTS `starts` (
  `xStart` INT UNSIGNED NOT NULL AUTO_INCREMENT,
  `xInscription` INT UNSIGNED NOT NULL,
  `xEvent` INT UNSIGNED NOT NULL,
  `startPaid` BIT NOT NULL DEFAULT False,
  `present` BIT NOT NULL DEFAULT False,
  `BestPerf` INT UNSIGNED NOT NULL DEFAULT '0',
  `inBase` BIT NOT NULL DEFAULT False,
  `BestPerfLast` INT UNSIGNED NOT NULL DEFAULT '0',
  `competitive` BIT NOT NULL DEFAULT True COMMENT 'competitive or non-competitive:\nif non-competitive, an athlete will not automatically be qualified for the next round and will not get a rank in the rankinglist.',
  PRIMARY KEY (`xStart`),
  INDEX `fk_start_inscription1_idx` (`xInscription` ASC),
  INDEX `fk_starts_events1_idx` (`xEvent` ASC),
  CONSTRAINT `fk_start_inscription1`
    FOREIGN KEY (`xInscription`)
    REFERENCES `inscriptions` (`xInscription`)
    ON DELETE NO ACTION
    ON UPDATE NO ACTION,
  CONSTRAINT `fk_starts_events1`
    FOREIGN KEY (`xEvent`)
    REFERENCES `events` (`xEvent`)
    ON DELETE NO ACTION
    ON UPDATE NO ACTION)
ENGINE = InnoDB
DEFAULT CHARACTER SET = utf8
COMMENT = 'do we really need the Performances here or do we want to store them differently (own table, together with base data, ...)?\n\nnot implemented:\nErstserie, xStaffel';


-- -----------------------------------------------------
-- Table `meetings`
-- -----------------------------------------------------
CREATE TABLE IF NOT EXISTS `meetings` (
  `xMeeting` INT UNSIGNED NOT NULL AUTO_INCREMENT,
  `meetingName` VARCHAR(100) NOT NULL DEFAULT '',
  `location` VARCHAR(100) NOT NULL DEFAULT '',
  `dateFrom` DATE NOT NULL,
  `dateTo` DATE NOT NULL,
  `meetingOnlineId` INT UNSIGNED NULL,
  `isOnline` BIT NOT NULL DEFAULT False,
  `organizor` VARCHAR(100) NOT NULL DEFAULT '',
  `entryFee` FLOAT NOT NULL DEFAULT '0',
  `entryFeeReduction` FLOAT NOT NULL DEFAULT '0',
  `bailFee` FLOAT NOT NULL DEFAULT '0',
  `meetingIsIndoor` BIT NOT NULL DEFAULT False,
  PRIMARY KEY (`xMeeting`),
  INDEX `Name` (`meetingName` ASC))
ENGINE = InnoDB
AUTO_INCREMENT = 14
DEFAULT CHARACTER SET = utf8
COMMENT = 'probably to be transferred to Mongo only.\n\nnot implemented:\nzeitmessung, password, AutoRangieren, statusChanged';


-- -----------------------------------------------------
-- Table `rounds`
-- -----------------------------------------------------
CREATE TABLE IF NOT EXISTS `rounds` (
  `xRound` INT UNSIGNED NOT NULL AUTO_INCREMENT,
  `xEventGroup` INT UNSIGNED NOT NULL,
  `roundName` VARCHAR(50) NOT NULL DEFAULT '',
  `roundOrder` TINYINT UNSIGNED NOT NULL,
  `numGroups` TINYINT UNSIGNED NOT NULL DEFAULT 1,
  `qualiModule` VARCHAR(45) NOT NULL DEFAULT '' COMMENT 'the name of the qualiModule; must be unique among all modules (or only qualiModules) on the same server',
  `qualiConf` TEXT NULL COMMENT 'could also be BLOB; allows 65536=2^16 bytes to be stored; attention: with charsets where one character can take more than one bytes,  numBytes < numChars!',
  PRIMARY KEY (`xRound`),
  INDEX `fk_round_contest1_idx` (`xEventGroup` ASC),
  CONSTRAINT `fk_round_contest1`
    FOREIGN KEY (`xEventGroup`)
    REFERENCES `eventGroup` (`xEventGroup`)
    ON DELETE NO ACTION
    ON UPDATE NO ACTION)
ENGINE = InnoDB
AUTO_INCREMENT = 277
DEFAULT CHARACTER SET = utf8
COMMENT = 'defines each round of a eventGroup\n\nqualification stuff is always related to \"qualification from this round to the next round\"\nqualif_type defines which class is used for the qualification stuff and interpretes the qualif_type-string, which shall contain the whole setup fir this qualification (number of seriesWinner, timeBest, ...), stored \nNOTE: in Athletica2 it was planned to have an extra table for the qualification linking both rounds; this however is unnecessary complicated and thus teh quali-configuration is now stored in the round qualified from.\nnot implemented:\nSpeakerstatus, StatusUpload, StatusUploadUKC';


-- -----------------------------------------------------
-- Table `conversionParams`
-- -----------------------------------------------------
CREATE TABLE IF NOT EXISTS `conversionParams` (
  `xConversion` INT UNSIGNED NOT NULL,
  `xDiscipline` INT UNSIGNED NOT NULL,
  `conversionParamConf` VARCHAR(100) NOT NULL DEFAULT '',
  INDEX `fk_conversionParams_conversion_idx` (`xConversion` ASC),
  INDEX `fk_conversionParams_disciplineType_idx` (`xDiscipline` ASC),
  PRIMARY KEY (`xConversion`, `xDiscipline`),
  CONSTRAINT `fk_conversionParams_conversion`
    FOREIGN KEY (`xConversion`)
    REFERENCES `conversions` (`xConversion`)
    ON DELETE NO ACTION
    ON UPDATE NO ACTION,
  CONSTRAINT `fk_conversionParams_disciplineType`
    FOREIGN KEY (`xDiscipline`)
    REFERENCES `disciplines` (`xDiscipline`)
    ON DELETE NO ACTION
    ON UPDATE NO ACTION)
ENGINE = InnoDB
DEFAULT CHARACTER SET = utf8
COMMENT = 'stores the paramteters for each conversion type for each discipline\n--> for \'each\' discipline?  not necessary all.';


-- -----------------------------------------------------
-- Table `regions`
-- -----------------------------------------------------
CREATE TABLE IF NOT EXISTS `regions` (
  `xRegion` INT UNSIGNED NOT NULL AUTO_INCREMENT,
  `countryCode` CHAR(3) NOT NULL,
  `countryName` VARCHAR(100) NOT NULL DEFAULT '',
  `countrySortvalue` INT NOT NULL DEFAULT 0,
  `regionName` VARCHAR(100) NOT NULL DEFAULT '',
  `regionShortname` VARCHAR(6) NOT NULL DEFAULT '',
  `regionSortvalue` INT NOT NULL DEFAULT 0,
  PRIMARY KEY (`xRegion`))
ENGINE = InnoDB
COMMENT = 'country is also in regions. Have an entry with regionName etc =\'\' for every country and where available also have additional entries where the regions are set.';


-- -----------------------------------------------------
-- Table `athletes`
-- -----------------------------------------------------
CREATE TABLE IF NOT EXISTS `athletes` (
  `xAthlete` INT UNSIGNED NOT NULL AUTO_INCREMENT,
  `athleteName` VARCHAR(100) NOT NULL DEFAULT '',
  `athleteForename` VARCHAR(100) NOT NULL DEFAULT '',
  `birthday` DATE NOT NULL DEFAULT '1900-01-01',
  `sex` ENUM('f', 'm') NULL DEFAULT 'f',
  `xClub` INT UNSIGNED NOT NULL,
  `license` INT UNSIGNED NOT NULL DEFAULT '0',
  `licenseType` TINYINT UNSIGNED NOT NULL DEFAULT '0',
  `xRegion` INT UNSIGNED NOT NULL,
  `xInscription` INT UNSIGNED NOT NULL,
  PRIMARY KEY (`xAthlete`),
  INDEX `fk_athlete_club1_idx` (`xClub` ASC),
  INDEX `fk_athlete_regions1_idx` (`xRegion` ASC),
  INDEX `fk_athletes_inscriptions1_idx` (`xInscription` ASC),
  CONSTRAINT `fk_athlete_club1`
    FOREIGN KEY (`xClub`)
    REFERENCES `clubs` (`xClub`)
    ON DELETE NO ACTION
    ON UPDATE NO ACTION,
  CONSTRAINT `fk_athlete_regions1`
    FOREIGN KEY (`xRegion`)
    REFERENCES `regions` (`xRegion`)
    ON DELETE NO ACTION
    ON UPDATE NO ACTION,
  CONSTRAINT `fk_athletes_inscriptions1`
    FOREIGN KEY (`xInscription`)
    REFERENCES `inscriptions` (`xInscription`)
    ON DELETE NO ACTION
    ON UPDATE NO ACTION)
ENGINE = InnoDB
DEFAULT CHARACTER SET = utf8
COMMENT = 'without license = manually entered\nnot included compared to old DB:\nAdress, Plz, Ort, Email, Athleticagen, bezahlt';


-- -----------------------------------------------------
-- Table `contest`
-- -----------------------------------------------------
CREATE TABLE IF NOT EXISTS `contest` (
  `xContest` INT UNSIGNED NOT NULL AUTO_INCREMENT,
  `xDiscipline` INT UNSIGNED NOT NULL,
  `contestDate` DATE NOT NULL DEFAULT '1900-01-01',
  `contestTimeAppeal` TIME NOT NULL DEFAULT '00:00:00',
  `contestTimeCall` TIME NOT NULL DEFAULT '00:00:00',
  `contestTimeStart` TIME NOT NULL DEFAULT '00:00:00',
  `contestStatus` TINYINT UNSIGNED NOT NULL DEFAULT '0' COMMENT 'Startliste/Appell gemacht/Serien eingeteilt/Resultate erfasst/...',
  PRIMARY KEY (`xContest`),
  INDEX `fk_contest_disciplines1_idx` (`xDiscipline` ASC),
  CONSTRAINT `fk_contest_disciplines1`
    FOREIGN KEY (`xDiscipline`)
    REFERENCES `disciplines` (`xDiscipline`)
    ON DELETE NO ACTION
    ON UPDATE NO ACTION)
ENGINE = InnoDB
COMMENT = 'if different groups of eventually different round/eventGroups shall have different appeal/call/start times, then these properties would have to be set in the mn-relationship-table between contest and rounds (\'groups\')\n\nNote: make sure to never have multiple rounds of the same eventGroup being merged together; this obviously would lead to problems since the later round will not be able to provide athletes to the contest as lonf as the previous round is not finished and the qualif-status were set';


-- -----------------------------------------------------
-- Table `contest_track`
-- -----------------------------------------------------
CREATE TABLE IF NOT EXISTS `contest_track` (
  `xContest_track` INT UNSIGNED NOT NULL,
  `statusTimekeeper` TINYINT UNSIGNED NOT NULL DEFAULT '0' COMMENT 'what is that for? store whether the data has already been writen (then it maybe should be changed to series, given the chronometry can import single series and not only groups of series)?',
  `trackQnty` TINYINT UNSIGNED NOT NULL DEFAULT '6' COMMENT 'maybe deleted and replace with the setting that is made via the site',
  PRIMARY KEY (`xContest_track`),
  CONSTRAINT `fk_contest_track_contest1`
    FOREIGN KEY (`xContest_track`)
    REFERENCES `contest` (`xContest`)
    ON DELETE NO ACTION
    ON UPDATE NO ACTION)
ENGINE = InnoDB
DEFAULT CHARACTER SET = utf8
COMMENT = 'probably this is not necessary: trackQnty is given in the site-table, and the statusTimekeeper might be obsolete, when assuming that it must be uptodate always\n\nno qualification stuff here anymore because:\n- would not be logical whether the configuration counts from the last round to this or to the next\n- one round of a contest would not  have a configuration --> space unsed without need\n- would not allow for different qualification strategies, that e.g. also migh be applied to tech disciplines';


-- -----------------------------------------------------
-- Table `contest_tech`
-- -----------------------------------------------------
CREATE TABLE IF NOT EXISTS `contest_tech` (
  `attempts` TINYINT UNSIGNED NOT NULL DEFAULT '1',
  `final` BIT NOT NULL DEFAULT False COMMENT 'could also be done by setting attmeptsBeforeFinal=0',
  `finalists` TINYINT NOT NULL DEFAULT '0',
  `attempsBeforeFinal` TINYINT NOT NULL DEFAULT '0',
  `turnOrder` BIT NOT NULL DEFAULT False,
  `bestResOnly` BIT NOT NULL DEFAULT False,
  `xContest_tech` INT UNSIGNED NOT NULL,
  PRIMARY KEY (`xContest_tech`),
  CONSTRAINT `fk_contest_tech_contest1`
    FOREIGN KEY (`xContest_tech`)
    REFERENCES `contest` (`xContest`)
    ON DELETE NO ACTION
    ON UPDATE NO ACTION)
ENGINE = InnoDB
DEFAULT CHARACTER SET = utf8
COMMENT = 'stores the settings for technical rounds (number of attempts, perform a final)';


-- -----------------------------------------------------
-- Table `sites_track`
-- -----------------------------------------------------
CREATE TABLE IF NOT EXISTS `sites_track` (
  `xSite` INT UNSIGNED NOT NULL,
  `lanesStraight` TINYINT NOT NULL DEFAULT 6,
  `lanesTurn` TINYINT NOT NULL DEFAULT 6,
  `chronometryType` TINYINT NOT NULL DEFAULT 0,
  `chronometryConf` VARCHAR(200) NOT NULL DEFAULT '',
  `chonometryName` VARCHAR(50) NOT NULL DEFAULT '',
  PRIMARY KEY (`xSite`))
ENGINE = InnoDB;


-- -----------------------------------------------------
-- Table `sites`
-- -----------------------------------------------------
CREATE TABLE IF NOT EXISTS `sites` (
  `xSite` INT UNSIGNED NULL AUTO_INCREMENT,
  `siteName` VARCHAR(50) NOT NULL DEFAULT '',
  `Homologiert` BIT NOT NULL DEFAULT False,
  `siteIsTrack` BIT NOT NULL DEFAULT false,
  PRIMARY KEY (`xSite`),
  CONSTRAINT `fk_sites_sites_track1`
    FOREIGN KEY (`xSite`)
    REFERENCES `sites_track` (`xSite`)
    ON DELETE NO ACTION
    ON UPDATE NO ACTION)
ENGINE = InnoDB
DEFAULT CHARACTER SET = utf8
COMMENT = 'site_isTrack is used in order to know whether there is a configuration for it in the sites_chronometry table\nin the future, the site_isTrack could be replaced by a separate table, matching disciplines to a site --> would allow automatic allocation of sites to a contest, if it is unique';


-- -----------------------------------------------------
-- Table `series`
-- -----------------------------------------------------
CREATE TABLE IF NOT EXISTS `series` (
  `xSeries` INT UNSIGNED NOT NULL AUTO_INCREMENT,
  `xContest` INT UNSIGNED NOT NULL,
  `xSite` INT UNSIGNED NULL DEFAULT '0',
  `seriesStatus` TINYINT UNSIGNED NOT NULL,
  `seriesNumber` SMALLINT UNSIGNED NOT NULL COMMENT 'the number of the series; this was not implemented so far, the order of serie was given propably through xSeries; however, this is not very sexy.',
  `seriesName` VARCHAR(50) NOT NULL DEFAULT '' COMMENT 'the name of the series: can be empty, but also e.g. \"A\" (for Final A; Final should be written in the round)',
  PRIMARY KEY (`xSeries`),
  INDEX `fk_series_site1_idx` (`xSite` ASC),
  INDEX `fk_series_contest1_idx` (`xContest` ASC),
  UNIQUE INDEX `secondary` (`xContest` ASC),
  CONSTRAINT `fk_series_site1`
    FOREIGN KEY (`xSite`)
    REFERENCES `sites` (`xSite`)
    ON DELETE NO ACTION
    ON UPDATE NO ACTION,
  CONSTRAINT `fk_series_contest1`
    FOREIGN KEY (`xContest`)
    REFERENCES `contest` (`xContest`)
    ON DELETE NO ACTION
    ON UPDATE NO ACTION)
ENGINE = InnoDB
DEFAULT CHARACTER SET = utf8
COMMENT = 'so far no seriesNumber column was available and the order of series probably relied on xSeries. This was not very sexy and is more clear now.\n\nnot implemented: \nTVname, MaxAthlet';


-- -----------------------------------------------------
-- Table `series_track`
-- -----------------------------------------------------
CREATE TABLE IF NOT EXISTS `series_track` (
  `xSeries_track` INT UNSIGNED NOT NULL,
  `series_trackWind` SMALLINT NOT NULL DEFAULT '0' COMMENT 'this one must be signed!',
  `series_trackFilm` SMALLINT UNSIGNED NOT NULL DEFAULT '0',
  `series_trackManualTime` BIT NOT NULL DEFAULT False,
  PRIMARY KEY (`xSeries_track`),
  CONSTRAINT `fk_series_track_series1`
    FOREIGN KEY (`xSeries_track`)
    REFERENCES `series` (`xSeries`)
    ON DELETE NO ACTION
    ON UPDATE NO ACTION)
ENGINE = InnoDB
DEFAULT CHARACTER SET = utf8;


-- -----------------------------------------------------
-- Table `groups`
-- -----------------------------------------------------
CREATE TABLE IF NOT EXISTS `groups` (
  `xGroup` INT UNSIGNED NOT NULL AUTO_INCREMENT,
  `rounds_xRound` INT UNSIGNED NOT NULL,
  `contest_xContest` INT UNSIGNED NOT NULL,
  `groupNr` SMALLINT UNSIGNED NOT NULL DEFAULT 1,
  `groupName` VARCHAR(45) NOT NULL DEFAULT '' COMMENT 'shall be implemented in the future: each group can have a name, and not only a number.',
  PRIMARY KEY (`xGroup`),
  INDEX `fk_rounds_has_contest_rounds1_idx` (`rounds_xRound` ASC),
  INDEX `fk_groups_contest1_idx` (`contest_xContest` ASC),
  CONSTRAINT `fk_rounds_has_contest_rounds1`
    FOREIGN KEY (`rounds_xRound`)
    REFERENCES `rounds` (`xRound`)
    ON DELETE NO ACTION
    ON UPDATE NO ACTION,
  CONSTRAINT `fk_groups_contest1`
    FOREIGN KEY (`contest_xContest`)
    REFERENCES `contest` (`xContest`)
    ON DELETE NO ACTION
    ON UPDATE NO ACTION)
ENGINE = InnoDB
DEFAULT CHARACTER SET = utf8;


-- -----------------------------------------------------
-- Table `startGroup`
-- -----------------------------------------------------
CREATE TABLE IF NOT EXISTS `startGroup` (
  `xStartgroup` INT UNSIGNED NOT NULL AUTO_INCREMENT,
  `xStart` INT UNSIGNED NOT NULL,
  `xGroup` INT UNSIGNED NOT NULL,
  PRIMARY KEY (`xStartgroup`),
  UNIQUE INDEX `secondary` (`xStart` ASC),
  INDEX `fk_xStart` (`xStart` ASC),
  INDEX `fk_startGroup_groups1_idx` (`xGroup` ASC),
  CONSTRAINT `fk_startGroup_starts1`
    FOREIGN KEY (`xStart`)
    REFERENCES `starts` (`xStart`)
    ON DELETE NO ACTION
    ON UPDATE NO ACTION,
  CONSTRAINT `fk_startGroup_groups1`
    FOREIGN KEY (`xGroup`)
    REFERENCES `groups` (`xGroup`)
    ON DELETE NO ACTION
    ON UPDATE NO ACTION)
ENGINE = InnoDB;


-- -----------------------------------------------------
-- Table `seriesStartsResults`
-- -----------------------------------------------------
CREATE TABLE IF NOT EXISTS `seriesStartsResults` (
  `xSeriesStart` INT UNSIGNED NOT NULL AUTO_INCREMENT,
  `xSeries` INT UNSIGNED NOT NULL,
  `position` SMALLINT UNSIGNED NOT NULL DEFAULT '0',
  `xStartgroup` INT UNSIGNED NOT NULL,
  `resultOverrule` TINYINT UNSIGNED NOT NULL DEFAULT '0' COMMENT 'DNS, DQ, DNF, NM, r (retired), withdrawal (combined only)\n(--> maybe NM and DNF not here)\n\n0=normal\n1=r (retired)=hört mitten im Wettkampf auf\n2=NM=o.g.V. (needed?)\n3=DNF=aufg.\n4=withdrawal=abgemeldet \n5=DNS=n.a.\n6=DQ=disq. --> nur diziplinarisch (kein Fehlstart --> ist im Resultat drin), damit man hiermit bestimmen kann, ob jemamnd nicht mehr starten darf',
  `resultRemark` VARCHAR(100) NOT NULL DEFAULT '',
  `qualification` TINYINT NOT NULL DEFAULT 0 COMMENT 'stores how somebody was qualified AND also if somebody retired from the competition; the qualification-module must define whcih number belongs to what and must also provide what is needed for translation of that status into different languages!\nall modules MUST use 0 as default= not qualified for next round!',
  PRIMARY KEY (`xSeriesStart`),
  INDEX `fk_seriesStart_series1_idx` (`xSeries` ASC),
  UNIQUE INDEX `fk_seriesStarts_startGroup1_idx` (`xStartgroup` ASC),
  UNIQUE INDEX `secondary` (`xSeries` ASC, `xStartgroup` ASC),
  CONSTRAINT `fk_seriesStart_series1`
    FOREIGN KEY (`xSeries`)
    REFERENCES `series` (`xSeries`)
    ON DELETE NO ACTION
    ON UPDATE NO ACTION,
  CONSTRAINT `fk_seriesStarts_startGroup1`
    FOREIGN KEY (`xStartgroup`)
    REFERENCES `startGroup` (`xStartgroup`)
    ON DELETE NO ACTION
    ON UPDATE NO ACTION)
ENGINE = InnoDB
DEFAULT CHARACTER SET = utf8
COMMENT = '\nnot implemented:\nRang, Qualifikation, RundeZusammen, Bemerkung, POsition2, Position3, AktivAthlet\n--> some of those were only needed to save the current athlete for the speakermonitor --> this should be possible differently!\n--> eventually include a second position column to store the current order for the use with Vor- und Endkampf in tech-disc; this is needed if we request that it is possible to get the the next athlete right out of the DB; however, we could also think of this ordering beeing done on the client, given the client can always get the rankinglist as it was after 3 attempts form the DB';


-- -----------------------------------------------------
-- Table `seriesStarts_track`
-- -----------------------------------------------------
CREATE TABLE IF NOT EXISTS `seriesStarts_track` (
  `xSeriesStart_track` INT UNSIGNED NOT NULL,
  `lane` TINYINT UNSIGNED NOT NULL,
  PRIMARY KEY (`xSeriesStart_track`),
  CONSTRAINT `fk_seriesStart_track_seriesStart1`
    FOREIGN KEY (`xSeriesStart_track`)
    REFERENCES `seriesStartsResults` (`xSeriesStart`)
    ON DELETE NO ACTION
    ON UPDATE NO ACTION)
ENGINE = InnoDB
DEFAULT CHARACTER SET = utf8
COMMENT = 'position (in seriesStartResult) is not necessary the same as lane (e.g. in every run >= 800m';


-- -----------------------------------------------------
-- Table `heights`
-- -----------------------------------------------------
CREATE TABLE IF NOT EXISTS `heights` (
  `xHeight` INT UNSIGNED NOT NULL AUTO_INCREMENT,
  `xSeries` INT UNSIGNED NOT NULL,
  `jumpoffOrder` SMALLINT UNSIGNED NOT NULL DEFAULT 0 COMMENT 'defines the order if it is a jumpoff height. For all other heights, this property has to be 0. The height is then automatically given through the height, as it can only increase.',
  `height` SMALLINT UNSIGNED NOT NULL,
  PRIMARY KEY (`xHeight`),
  INDEX `fk_height_series1_idx` (`xSeries` ASC),
  CONSTRAINT `fk_height_series1`
    FOREIGN KEY (`xSeries`)
    REFERENCES `series` (`xSeries`)
    ON DELETE NO ACTION
    ON UPDATE NO ACTION)
ENGINE = InnoDB
DEFAULT CHARACTER SET = utf8;


-- -----------------------------------------------------
-- Table `resultsHigh`
-- -----------------------------------------------------
CREATE TABLE IF NOT EXISTS `resultsHigh` (
  `xResult` INT UNSIGNED NOT NULL,
  `xHeight` INT UNSIGNED NOT NULL DEFAULT '0',
  `DELETEresultsHighSortOrder` TINYINT NOT NULL DEFAULT '0' COMMENT '-1=an den Anfang\n0=normal\n1=an Ende\n2=verzichtet auf dieser Höhe',
  `resultsHighFailedAtempts` TINYINT UNSIGNED NOT NULL DEFAULT '0' COMMENT '- how many failed attempts on this height\n- this number also helps to count the total not passed attempts for the ordering',
  `resultsHighValid` TINYINT(1) NOT NULL DEFAULT False COMMENT 'passed this height already yes/no',
  `resultsHighPassed` TINYINT(1) NOT NULL DEFAULT 0 COMMENT 'verzichtet (-)',
  PRIMARY KEY (`xResult`, `xHeight`),
  INDEX `fk_result_high_height1_idx` (`xHeight` ASC),
  CONSTRAINT `fk_result_high_height1`
    FOREIGN KEY (`xHeight`)
    REFERENCES `heights` (`xHeight`)
    ON DELETE NO ACTION
    ON UPDATE NO ACTION,
  CONSTRAINT `fk_resultsHigh_seriesStartsResults1`
    FOREIGN KEY (`xResult`)
    REFERENCES `seriesStartsResults` (`xSeriesStart`)
    ON DELETE NO ACTION
    ON UPDATE NO ACTION)
ENGINE = InnoDB
DEFAULT CHARACTER SET = utf8
COMMENT = 'maybe make a separate column for passed (verzichtet) trial, as it is not directly related to the sortOrder (taking an athlet to the beginning/end of a trial), but as only one on or the other (sortOrder or passing) is possible at the same height, this still works';


-- -----------------------------------------------------
-- Table `contest_high`
-- -----------------------------------------------------
CREATE TABLE IF NOT EXISTS `contest_high` (
  `xContest_high` INT UNSIGNED NOT NULL AUTO_INCREMENT,
  `jumpoff` TINYINT(1) NOT NULL DEFAULT 0 COMMENT '=Stichkampf yes/no\ngeneraly only on championshiops, therefore the standard is no',
  PRIMARY KEY (`xContest_high`),
  CONSTRAINT `fk_contest_high_contest1`
    FOREIGN KEY (`xContest_high`)
    REFERENCES `contest` (`xContest`)
    ON DELETE NO ACTION
    ON UPDATE NO ACTION)
ENGINE = InnoDB;


-- -----------------------------------------------------
-- Table `heightIncreases`
-- -----------------------------------------------------
CREATE TABLE IF NOT EXISTS `heightIncreases` (
  `xHeightIncrease` INT UNSIGNED NOT NULL AUTO_INCREMENT,
  `xRound_high` INT UNSIGNED NOT NULL COMMENT 'to which series this incrementation belongs',
  `heightIncreaseStartheight` SMALLINT UNSIGNED NOT NULL COMMENT 'starting at which height',
  `heightIncrease` SMALLINT UNSIGNED NOT NULL DEFAULT '0' COMMENT 'increase steps from this height on',
  PRIMARY KEY (`xHeightIncrease`),
  INDEX `fk_heightIncreases_rounds_high1_idx` (`xRound_high` ASC),
  CONSTRAINT `fk_heightIncreases_rounds_high1`
    FOREIGN KEY (`xRound_high`)
    REFERENCES `contest_high` (`xContest_high`)
    ON DELETE NO ACTION
    ON UPDATE NO ACTION)
ENGINE = InnoDB
DEFAULT CHARACTER SET = utf8;


-- -----------------------------------------------------
-- Table `seriesStarts_high`
-- -----------------------------------------------------
CREATE TABLE IF NOT EXISTS `seriesStarts_high` (
  `xSeriesStart_high` INT UNSIGNED NOT NULL,
  `startHeight` SMALLINT UNSIGNED NOT NULL DEFAULT '0' COMMENT 'hier bewusst keine Referenz auf height, da dort der Eintrag erst später erstellt werden können soll, wenn die Höhe dran kommt (oder wenn jemand darauf verzeichtet)\n--> so programmieren, dass eine ungültige Starthöhe egal ist und dass programmseitig geprüft wird dass dies nicht passiert',
  PRIMARY KEY (`xSeriesStart_high`),
  CONSTRAINT `fk_seriesStart_high_seriesStart1`
    FOREIGN KEY (`xSeriesStart_high`)
    REFERENCES `seriesStartsResults` (`xSeriesStart`)
    ON DELETE NO ACTION
    ON UPDATE NO ACTION)
ENGINE = InnoDB;


-- -----------------------------------------------------
-- Table `relays`
-- -----------------------------------------------------
CREATE TABLE IF NOT EXISTS `relays` (
  `xRelay` INT UNSIGNED NOT NULL AUTO_INCREMENT,
  `relayName` VARCHAR(100) NOT NULL,
  `xClub` INT UNSIGNED NOT NULL,
  `country` CHAR(3) NOT NULL,
  `xCategory` INT UNSIGNED NOT NULL COMMENT 'while an athlet has an birthdate, a relay simply has a category --> must be proven, that the athetes have the correct age at the date of the competition',
  `xBase` INT UNSIGNED NOT NULL COMMENT 'the ID of the relay in the base data, analog to the license of an athlete',
  `xInscription` INT UNSIGNED NOT NULL,
  PRIMARY KEY (`xRelay`, `xClub`, `xCategory`),
  INDEX `fk_relay_club1_idx` (`xClub` ASC),
  INDEX `fk_relay_category1_idx` (`xCategory` ASC),
  INDEX `fk_relays_inscriptions1_idx` (`xInscription` ASC),
  CONSTRAINT `fk_relay_club1`
    FOREIGN KEY (`xClub`)
    REFERENCES `clubs` (`xClub`)
    ON DELETE NO ACTION
    ON UPDATE NO ACTION,
  CONSTRAINT `fk_relay_category1`
    FOREIGN KEY (`xCategory`)
    REFERENCES `categories` (`xCategory`)
    ON DELETE NO ACTION
    ON UPDATE NO ACTION,
  CONSTRAINT `fk_relays_inscriptions1`
    FOREIGN KEY (`xInscription`)
    REFERENCES `inscriptions` (`xInscription`)
    ON DELETE NO ACTION
    ON UPDATE NO ACTION)
ENGINE = InnoDB
COMMENT = 'if relay are always only created per meeting then it is not necessary to have this table. Instead, all this fileds can be implemented in inscription_relay';


-- -----------------------------------------------------
-- Table `countries`
-- -----------------------------------------------------
CREATE TABLE IF NOT EXISTS `countries` (
  `xCountry` CHAR(3) NOT NULL,
  `countryName` VARCHAR(100) NOT NULL DEFAULT '',
  `countrySortvalue` INT NOT NULL DEFAULT '0',
  PRIMARY KEY (`xCountry`))
ENGINE = InnoDB
DEFAULT CHARACTER SET = utf8
COMMENT = 'the countries are now included in the region table; this table is not used anymore.';


-- -----------------------------------------------------
-- Table `disciplinesOnSite`
-- -----------------------------------------------------
CREATE TABLE IF NOT EXISTS `disciplinesOnSite` (
  `xSite` INT UNSIGNED NOT NULL,
  `xDiscipline` INT UNSIGNED NOT NULL,
  PRIMARY KEY (`xDiscipline`, `xSite`),
  INDEX `fk_disciplines_on_site_sites1_idx` (`xSite` ASC),
  INDEX `fk_disciplines_on_site_disciplines1_idx` (`xDiscipline` ASC),
  CONSTRAINT `fk_disciplines_on_site_sites1`
    FOREIGN KEY (`xSite`)
    REFERENCES `sites` (`xSite`)
    ON DELETE NO ACTION
    ON UPDATE NO ACTION,
  CONSTRAINT `fk_disciplines_on_site_disciplines1`
    FOREIGN KEY (`xDiscipline`)
    REFERENCES `disciplines` (`xDiscipline`)
    ON DELETE NO ACTION
    ON UPDATE NO ACTION)
ENGINE = InnoDB;


-- -----------------------------------------------------
-- Table `disciplinesLocalizations`
-- -----------------------------------------------------
CREATE TABLE IF NOT EXISTS `disciplinesLocalizations` (
  `xDisciplinesLocalization` INT UNSIGNED NOT NULL AUTO_INCREMENT,
  `xDiscipline` INT UNSIGNED NOT NULL,
  `disciplinesLocalizationLanguage` CHAR(2) NOT NULL COMMENT 'language shortcut according to ISO639-1: http://www.loc.gov/standards/iso639-2/php/code_list.php\n',
  `disciplinesLocalizationName` VARCHAR(50) NOT NULL,
  `disciplinesLocalizationShortname` VARCHAR(20) NOT NULL,
  PRIMARY KEY (`xDisciplinesLocalization`, `xDiscipline`),
  INDEX `fk_disciplinesLocalizations_disciplines1_idx` (`xDiscipline` ASC),
  CONSTRAINT `fk_disciplinesLocalizations_disciplines1`
    FOREIGN KEY (`xDiscipline`)
    REFERENCES `disciplines` (`xDiscipline`)
    ON DELETE NO ACTION
    ON UPDATE NO ACTION)
ENGINE = InnoDB
COMMENT = 'stores the language dependet names of the disciplines';


-- -----------------------------------------------------
-- Table `resultsTrack`
-- -----------------------------------------------------
CREATE TABLE IF NOT EXISTS `resultsTrack` (
  `xResultTrack` INT UNSIGNED NOT NULL,
  `resultTrackTime` INT NOT NULL COMMENT 'in milliseconds\n',
  PRIMARY KEY (`xResultTrack`),
  CONSTRAINT `fk_resultsTrack_seriesStartsResults1`
    FOREIGN KEY (`xResultTrack`)
    REFERENCES `seriesStartsResults` (`xSeriesStart`)
    ON DELETE NO ACTION
    ON UPDATE NO ACTION)
ENGINE = InnoDB;


-- -----------------------------------------------------
-- Table `resultsTech`
-- -----------------------------------------------------
CREATE TABLE IF NOT EXISTS `resultsTech` (
  `xResultTech` INT UNSIGNED NOT NULL AUTO_INCREMENT,
  `xResult` INT UNSIGNED NOT NULL,
  `resultTechDistance` SMALLINT NOT NULL DEFAULT 0 COMMENT 'in cm\n-1 for failed trial',
  `resultTechAttempt` TINYINT UNSIGNED NOT NULL COMMENT 'which attempt (start from 1)',
  PRIMARY KEY (`xResultTech`, `xResult`),
  INDEX `fk_resultsTech_seriesStartsResults1_idx` (`xResult` ASC),
  CONSTRAINT `fk_resultsTech_seriesStartsResults1`
    FOREIGN KEY (`xResult`)
    REFERENCES `seriesStartsResults` (`xSeriesStart`)
    ON DELETE NO ACTION
    ON UPDATE NO ACTION)
ENGINE = InnoDB
COMMENT = 'for horizontal jumps indoor and throwing';


-- -----------------------------------------------------
-- Table `resultsTechWind`
-- -----------------------------------------------------
CREATE TABLE IF NOT EXISTS `resultsTechWind` (
  `xResultTechWind` INT UNSIGNED NOT NULL AUTO_INCREMENT,
  `xResult` INT UNSIGNED NOT NULL,
  `resultTechWindDistance` SMALLINT NOT NULL DEFAULT 0 COMMENT 'in cm',
  `resultTechWindAttempt` TINYINT UNSIGNED NOT NULL COMMENT 'which attempt (start from 1)',
  `resultTechWindWind` SMALLINT NOT NULL DEFAULT 0 COMMENT 'unfortunately Wind must appear twice in the column-name\n\nmust be signed (+-)!\nin m/s\n',
  PRIMARY KEY (`xResultTechWind`, `xResult`),
  INDEX `fk_resultsTechWind_seriesStartsResults1_idx` (`xResult` ASC),
  CONSTRAINT `fk_resultsTechWind_seriesStartsResults1`
    FOREIGN KEY (`xResult`)
    REFERENCES `seriesStartsResults` (`xSeriesStart`)
    ON DELETE NO ACTION
    ON UPDATE NO ACTION)
ENGINE = InnoDB
COMMENT = 'compared to tech: has wind\nfor horizontal jumps outdoor';


-- -----------------------------------------------------
-- Table `modules`
-- -----------------------------------------------------
CREATE TABLE IF NOT EXISTS `modules` (
  `xModule` INT UNSIGNED NOT NULL AUTO_INCREMENT,
  `moduleName` VARCHAR(100) NOT NULL,
  `moduleActivated` BIT NOT NULL DEFAULT True,
  `moduleType` SMALLINT NOT NULL,
  PRIMARY KEY (`xModule`),
  UNIQUE INDEX `moduleName_UNIQUE` (`moduleName` ASC))
ENGINE = InnoDB;


-- -----------------------------------------------------
-- Table `relaysAthletes`
-- -----------------------------------------------------
CREATE TABLE IF NOT EXISTS `relaysAthletes` (
  `xRelayAthlete` INT UNSIGNED NOT NULL AUTO_INCREMENT,
  `xAthlete` INT UNSIGNED NOT NULL,
  `xRelay` INT UNSIGNED NOT NULL,
  PRIMARY KEY (`xRelayAthlete`),
  UNIQUE INDEX `Secondary` (`xAthlete` ASC, `xRelay` ASC),
  INDEX `fk_relaysAthletes_relays1_idx` (`xRelay` ASC),
  CONSTRAINT `fk_relaysAthletes_athletes1`
    FOREIGN KEY (`xAthlete`)
    REFERENCES `athletes` (`xAthlete`)
    ON DELETE NO ACTION
    ON UPDATE NO ACTION,
  CONSTRAINT `fk_relaysAthletes_relays1`
    FOREIGN KEY (`xRelay`)
    REFERENCES `relays` (`xRelay`)
    ON DELETE NO ACTION
    ON UPDATE NO ACTION)
ENGINE = InnoDB;


-- -----------------------------------------------------
-- Table `relayAthletePositions`
-- -----------------------------------------------------
CREATE TABLE IF NOT EXISTS `relayAthletePositions` (
  `xRelayAthlete` INT UNSIGNED NOT NULL,
  `xStartgroup` INT UNSIGNED NOT NULL,
  `relayAthletePosition` SMALLINT UNSIGNED NOT NULL,
  PRIMARY KEY (`xRelayAthlete`, `xStartgroup`),
  INDEX `fk_relayAthletePositions_relaysAthletes1_idx` (`xRelayAthlete` ASC),
  INDEX `fk_relayAthletePositions_startGroup1_idx` (`xStartgroup` ASC),
  CONSTRAINT `fk_relayAthletePositions_relaysAthletes1`
    FOREIGN KEY (`xRelayAthlete`)
    REFERENCES `relaysAthletes` (`xRelayAthlete`)
    ON DELETE NO ACTION
    ON UPDATE NO ACTION,
  CONSTRAINT `fk_relayAthletePositions_startGroup1`
    FOREIGN KEY (`xStartgroup`)
    REFERENCES `startGroup` (`xStartgroup`)
    ON DELETE NO ACTION
    ON UPDATE NO ACTION)
ENGINE = InnoDB
COMMENT = 'the order of the atheltes in a relay; can be differnt in each round;\nTODO: it probably makes more sense not to Link to round, but instead store the integer value of the roundOrder; pro: athletes order can ba defined even before the relay has an entry in start and before the discipline has rounds and also a change in the link between the event and the contest would not result to problems; con: the order is just an integer --> the user can not easily see that it is related to quali/final/etc but must know this link by hard (except one programmatically tries to ad dthis information to the GUI)';


SET SQL_MODE=@OLD_SQL_MODE;
SET FOREIGN_KEY_CHECKS=@OLD_FOREIGN_KEY_CHECKS;
SET UNIQUE_CHECKS=@OLD_UNIQUE_CHECKS;
