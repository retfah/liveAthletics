-- MySQL Script generated by MySQL Workbench
-- 10/14/23 16:39:38
-- Model: New Model    Version: 1.0
-- MySQL Workbench Forward Engineering

SET @OLD_UNIQUE_CHECKS=@@UNIQUE_CHECKS, UNIQUE_CHECKS=0;
SET @OLD_FOREIGN_KEY_CHECKS=@@FOREIGN_KEY_CHECKS, FOREIGN_KEY_CHECKS=0;
SET @OLD_SQL_MODE=@@SQL_MODE, SQL_MODE='TRADITIONAL,ALLOW_INVALID_DATES';

-- -----------------------------------------------------
-- Schema athletica_old
-- -----------------------------------------------------
-- -----------------------------------------------------
-- Schema athletica2
-- -----------------------------------------------------
-- New athletica database
-- -----------------------------------------------------
-- Schema athletica2_admin
-- -----------------------------------------------------
-- Add here the following tables:
-- -  all the base-data tables like licensed athletes, clubs, team and their performances --> this data will be copied to the specific meeting-DB as soon as an athlete/club/team is registered
-- -  probably add here a table for user accounts, when they shall be local and not transferred to slaves; so far the local admin account is simply set in a config file.
-- -----------------------------------------------------
-- Schema athletica3
-- -----------------------------------------------------
-- -----------------------------------------------------
-- Schema baseSUI
-- -----------------------------------------------------

-- -----------------------------------------------------
-- Table `competitions`
-- -----------------------------------------------------
CREATE TABLE IF NOT EXISTS `competitions` (
  `xCompetition` INT UNSIGNED NOT NULL AUTO_INCREMENT,
  `type` TINYINT UNSIGNED NOT NULL DEFAULT '0' COMMENT 'die Art des \"Wettkampfes\"=der Wettkampftyp, zB: normal, SVM-LigaA, Kids-Cup, ... (Referenz wird als Nummer abgelegt)\nSMALLINT: damit es sicherlich immer reicht für alle Typen (65535 Werte möglich)',
  `name` VARCHAR(100) NOT NULL DEFAULT '' COMMENT 'Name zur leichteren Identifikation, kann ev auf Anzeigen, Online oder auf den Wettkampfblättern gebruacht werden',
  `teamCompetition` TINYINT(1) NOT NULL DEFAULT 0,
  PRIMARY KEY (`xCompetition`))
ENGINE = InnoDB
DEFAULT CHARACTER SET = utf8
COMMENT = 'defines diffrerent competitions (standard, SVM A, SVM B, team-SM, Kids-cup, etc.) which defines standard parameters for track-distribution-strategies, print-Setups, \n\nev hier noch Startgelder für Teams eingeben';


-- -----------------------------------------------------
-- Table `basedisciplines`
-- -----------------------------------------------------
CREATE TABLE IF NOT EXISTS `basedisciplines` (
  `xBaseDiscipline` INT UNSIGNED NOT NULL AUTO_INCREMENT,
  `type` TINYINT UNSIGNED NOT NULL COMMENT 'an ID for the discipline module to use, e.g. track, techHigh and techLong. Using modules for the disciplines allows for flexibility with new disciplines, but it might add some difficulties, as the modules will have to implement their own tables, which means when activating/deactivating the module, the DB has to be changed!',
  `nameStd` VARCHAR(50) NOT NULL DEFAULT '',
  `shortnameStd` VARCHAR(20) NOT NULL DEFAULT '',
  `timeAppeal` TIME NOT NULL DEFAULT '00:00:00' COMMENT 'offset from the start time',
  `timeCall` TIME NOT NULL DEFAULT '00:00:00' COMMENT 'offset from the start time',
  `baseConfiguration` TEXT NOT NULL DEFAULT '',
  `indoor` BIT NOT NULL DEFAULT 0,
  PRIMARY KEY (`xBaseDiscipline`))
ENGINE = InnoDB
COMMENT = 'the base discipline (e.g. shot put --> the discipline will then further specify';


-- -----------------------------------------------------
-- Table `disciplines`
-- -----------------------------------------------------
CREATE TABLE IF NOT EXISTS `disciplines` (
  `xDiscipline` INT UNSIGNED NOT NULL AUTO_INCREMENT,
  `xBaseDiscipline` INT UNSIGNED NOT NULL COMMENT 'Use the same number for disciplines which shall be joinable.',
  `sortorder` INT UNSIGNED NOT NULL DEFAULT '1' COMMENT 'Sortierwert?',
  `active` BIT NOT NULL DEFAULT 1,
  `configuration` TEXT NOT NULL DEFAULT '' COMMENT 'This should contain e.g. a JSON string with discipline specific settings, e.g. distance, wind, whatever, which is then interpreted by the type of the discipline. ',
  `info` VARCHAR(45) NOT NULL DEFAULT '',
  PRIMARY KEY (`xDiscipline`, `xBaseDiscipline`),
  INDEX `Anzeige` (`sortorder` ASC),
  INDEX `baseDiscipline` (`xBaseDiscipline` ASC),
  CONSTRAINT `fk_disciplines_baseDisciplines1`
    FOREIGN KEY (`xBaseDiscipline`)
    REFERENCES `basedisciplines` (`xBaseDiscipline`)
    ON DELETE NO ACTION
    ON UPDATE NO ACTION)
ENGINE = InnoDB
AUTO_INCREMENT = 206
DEFAULT CHARACTER SET = utf8
COMMENT = 'wind, distance etc are specified in configuration';


-- -----------------------------------------------------
-- Table `categories`
-- -----------------------------------------------------
CREATE TABLE IF NOT EXISTS `categories` (
  `xCategory` INT UNSIGNED NOT NULL AUTO_INCREMENT,
  `shortname` VARCHAR(4) NOT NULL DEFAULT '',
  `name` VARCHAR(30) NOT NULL DEFAULT '',
  `sortorder` INT UNSIGNED NOT NULL DEFAULT '1',
  `ageMin` TINYINT UNSIGNED NOT NULL DEFAULT 0 COMMENT 'from and including this age',
  `ageMax` TINYINT UNSIGNED NOT NULL DEFAULT 99 COMMENT 'up to and including this age',
  `code` VARCHAR(4) NOT NULL DEFAULT '',
  `sex` ENUM('m', 'f') NOT NULL DEFAULT 'f',
  `active` BIT NOT NULL DEFAULT True,
  PRIMARY KEY (`xCategory`),
  UNIQUE INDEX `Kurzname` (`shortname` ASC),
  INDEX `Anzeige` (`sortorder` ASC))
ENGINE = InnoDB
AUTO_INCREMENT = 43
DEFAULT CHARACTER SET = utf8
COMMENT = 'no UKC-Column';


-- -----------------------------------------------------
-- Table `eventgroups`
-- -----------------------------------------------------
CREATE TABLE IF NOT EXISTS `eventgroups` (
  `xEventGroup` INT UNSIGNED NOT NULL AUTO_INCREMENT,
  `xDiscipline` INT UNSIGNED NOT NULL,
  `name` VARCHAR(50) NOT NULL DEFAULT '',
  `combined` BIT NOT NULL DEFAULT 0 COMMENT 'this means it is a combined event (heptathlon, ...) --> prevents having multiple rounds as there every discipline has only one round',
  PRIMARY KEY (`xEventGroup`),
  INDEX `fk_contest_disciplineType1_idx` (`xDiscipline` ASC),
  CONSTRAINT `fk_contest_disciplineType1`
    FOREIGN KEY (`xDiscipline`)
    REFERENCES `disciplines` (`xDiscipline`)
    ON DELETE NO ACTION
    ON UPDATE NO ACTION)
ENGINE = InnoDB
DEFAULT CHARACTER SET = utf8
COMMENT = 'entually add here some configuration stuff for groups that might be useful when group-memberships should be transferred: e.g. shall all rounds share the same groups, i.e. the person is always in group 2\nmaybe a part of this info must also be stored in rounds!';


-- -----------------------------------------------------
-- Table `events`
-- -----------------------------------------------------
CREATE TABLE IF NOT EXISTS `events` (
  `xEvent` INT UNSIGNED NOT NULL AUTO_INCREMENT,
  `xDiscipline` INT UNSIGNED NOT NULL,
  `xCategory` INT UNSIGNED NOT NULL COMMENT 'I think it is ok like this; but eventually we want to have the possibility for multiple categories per event for some reason. Then an additional table with the categories per ventu would be needed. ',
  `xEventGroup` INT UNSIGNED NULL,
  `entryFee` FLOAT UNSIGNED NOT NULL DEFAULT '0',
  `bailFee` FLOAT UNSIGNED NOT NULL DEFAULT '0',
  `onlineId` VARCHAR(36) NULL DEFAULT NULL,
  `date` DATETIME NULL,
  `info` VARCHAR(50) NULL DEFAULT NULL,
  `nationalBody` CHAR(3) NULL DEFAULT NULL,
  PRIMARY KEY (`xEvent`),
  INDEX `fk_discipline_disciplineType1_idx` (`xDiscipline` ASC),
  INDEX `fk_discipline_category1_idx` (`xCategory` ASC),
  INDEX `fk_events_eventGroup1_idx` (`xEventGroup` ASC),
  CONSTRAINT `fk_discipline_disciplineType1`
    FOREIGN KEY (`xDiscipline`)
    REFERENCES `disciplines` (`xDiscipline`)
    ON DELETE NO ACTION
    ON UPDATE NO ACTION,
  CONSTRAINT `fk_discipline_category1`
    FOREIGN KEY (`xCategory`)
    REFERENCES `categories` (`xCategory`)
    ON DELETE NO ACTION
    ON UPDATE NO ACTION,
  CONSTRAINT `fk_events_eventGroup1`
    FOREIGN KEY (`xEventGroup`)
    REFERENCES `eventgroups` (`xEventGroup`)
    ON DELETE NO ACTION
    ON UPDATE NO ACTION)
ENGINE = InnoDB
DEFAULT CHARACTER SET = utf8
COMMENT = 'the events (=single disciplines), an athlete / relay can have an inscription (table start) to\n\nnot implemented compared to wettkampf, but seems ok like this:\ntyp (formerly used to distinguish combined), Punktetabelle, Punkteformel, Windmessung, Zeitmessung, ZeitmessungAuto, Mehrkampfcode, Mehrkampfende, Mehrkampfreihenfolge, xKategorie_SVM, TypAenderung (seems was unused)';


-- -----------------------------------------------------
-- Table `conversions`
-- -----------------------------------------------------
CREATE TABLE IF NOT EXISTS `conversions` (
  `xConversion` INT UNSIGNED NOT NULL AUTO_INCREMENT,
  `name` VARCHAR(50) NOT NULL COMMENT 'possible problem: translation; as long as this is simply a general name like \'IAAF\' or \'swiss-athletics\', it is no problem',
  `type` TINYINT UNSIGNED NOT NULL DEFAULT '0' COMMENT 'defines the internal routine that should be called',
  PRIMARY KEY (`xConversion`),
  UNIQUE INDEX `name_UNIQUE` (`name` ASC))
ENGINE = InnoDB
DEFAULT CHARACTER SET = utf8
COMMENT = 'stores the different conversion types --> \'+-unchangable table\', so probably better not in databse, but \'conf-coded\' somewhere';


-- -----------------------------------------------------
-- Table `combinedevents`
-- -----------------------------------------------------
CREATE TABLE IF NOT EXISTS `combinedevents` (
  `xCombinedEvent` INT UNSIGNED NOT NULL AUTO_INCREMENT,
  `xCategory` INT UNSIGNED NOT NULL,
  `name` VARCHAR(50) NOT NULL DEFAULT '\"\"',
  `type` TINYINT UNSIGNED NOT NULL COMMENT 'here the type of the combinedEvent is stored (like 7-Kampf, 10-Kampf, custom) --> the disciplines that should be connected to this type are defined in a conf-file (but not mandatory for all combinedEventTypes, to allow custom combined Events)\ncustom = ...KAMPF',
  `xConversion` INT UNSIGNED NOT NULL,
  PRIMARY KEY (`xCombinedEvent`),
  INDEX `fk_event_conversion1_idx` (`xConversion` ASC),
  INDEX `fk_combinedEvents_categories1_idx` (`xCategory` ASC),
  CONSTRAINT `fk_event_conversion1`
    FOREIGN KEY (`xConversion`)
    REFERENCES `conversions` (`xConversion`)
    ON DELETE NO ACTION
    ON UPDATE NO ACTION,
  CONSTRAINT `fk_combinedEvents_categories1`
    FOREIGN KEY (`xCategory`)
    REFERENCES `categories` (`xCategory`)
    ON DELETE NO ACTION
    ON UPDATE NO ACTION)
ENGINE = InnoDB
DEFAULT CHARACTER SET = utf8
COMMENT = 'this table is new in Athletica2\nMehrkampf\nwieso braucht es hier die Kategorie? ist redundant\ndie Competition ist redundant';


-- -----------------------------------------------------
-- Table `inscriptions`
-- -----------------------------------------------------
CREATE TABLE IF NOT EXISTS `inscriptions` (
  `xInscription` INT UNSIGNED NOT NULL AUTO_INCREMENT,
  `xCategory` INT UNSIGNED NOT NULL,
  `number` INT UNSIGNED NOT NULL DEFAULT '0' COMMENT 'bib',
  PRIMARY KEY (`xInscription`),
  INDEX `fk_inscription_category1_idx` (`xCategory` ASC),
  CONSTRAINT `fk_inscription_category1`
    FOREIGN KEY (`xCategory`)
    REFERENCES `categories` (`xCategory`)
    ON DELETE NO ACTION
    ON UPDATE NO ACTION)
ENGINE = InnoDB
DEFAULT CHARACTER SET = utf8
COMMENT = 'why do we need inscriptions: because we want that relays and regular athletes can be treated the same in the events! this is also the reason why athletes/relays are a \"subtable\" of inscritpion and not vice versa.\n\nev. delete xCategory\n\nmissing:\nErstserie, Bezahlt, Gruppe(!), BestleistungMK, Vereinsinfo, xTeam, BaseEffortMK, AnmeldeNr_ZLV (!), KidID, Angemeldet, VorjahrleistungMK';


-- -----------------------------------------------------
-- Table `clubs`
-- -----------------------------------------------------
CREATE TABLE IF NOT EXISTS `clubs` (
  `xClub` INT UNSIGNED NOT NULL AUTO_INCREMENT,
  `name` VARCHAR(100) NOT NULL DEFAULT '',
  `sortvalue` VARCHAR(100) NOT NULL DEFAULT '0',
  `usercode` VARCHAR(30) NOT NULL DEFAULT '' COMMENT 'the username in the alabus database --> why do we need this?',
  `deleted` BIT NOT NULL DEFAULT False COMMENT 'because clubs can not be delted as long as it is referenced --> do not ',
  PRIMARY KEY (`xClub`),
  UNIQUE INDEX `Name` (`name` ASC),
  INDEX `Sortierwert` (`sortvalue` ASC),
  INDEX `xCode` (`usercode` ASC))
ENGINE = InnoDB
AUTO_INCREMENT = 634
DEFAULT CHARACTER SET = utf8;


-- -----------------------------------------------------
-- Table `teams`
-- -----------------------------------------------------
CREATE TABLE IF NOT EXISTS `teams` (
  `xTeam` INT UNSIGNED ZEROFILL NOT NULL,
  `xCompetition` INT UNSIGNED NOT NULL COMMENT 'really necessary?',
  `name` VARCHAR(100) NOT NULL DEFAULT '',
  `xClub` INT UNSIGNED NOT NULL,
  `perf` INT UNSIGNED NOT NULL DEFAULT 0 COMMENT 'e.g. last year performance; eventually needed for setting series',
  PRIMARY KEY (`xTeam`),
  INDEX `fk_teams_clubs1_idx` (`xClub` ASC),
  INDEX `fk_teams_competitions1_idx` (`xCompetition` ASC),
  CONSTRAINT `fk_teams_clubs1`
    FOREIGN KEY (`xClub`)
    REFERENCES `clubs` (`xClub`)
    ON DELETE NO ACTION
    ON UPDATE NO ACTION,
  CONSTRAINT `fk_teams_competitions1`
    FOREIGN KEY (`xCompetition`)
    REFERENCES `competitions` (`xCompetition`)
    ON DELETE NO ACTION
    ON UPDATE NO ACTION)
ENGINE = InnoDB
COMMENT = 'in the original, also the category had a column --> is that necessary? IMO: same competition, same category (in team competitions)\none could think about separating the team from the competition, but as teams are always different at each competition/meeting/from year to year/..., it meight be reasonable to store it in one ';


-- -----------------------------------------------------
-- Table `teaminscriptions`
-- -----------------------------------------------------
CREATE TABLE IF NOT EXISTS `teaminscriptions` (
  `xInscription` INT UNSIGNED NOT NULL,
  `xTeam` INT UNSIGNED NOT NULL,
  PRIMARY KEY (`xInscription`, `xTeam`),
  INDEX `fk_teamInscriptions_teams1_idx` (`xTeam` ASC),
  CONSTRAINT `fk_teamInscriptions_inscriptions1`
    FOREIGN KEY (`xInscription`)
    REFERENCES `inscriptions` (`xInscription`)
    ON DELETE NO ACTION
    ON UPDATE NO ACTION,
  CONSTRAINT `fk_teamInscriptions_teams1`
    FOREIGN KEY (`xTeam`)
    REFERENCES `teams` (`xTeam`)
    ON DELETE NO ACTION
    ON UPDATE NO ACTION)
ENGINE = InnoDB
COMMENT = 'an athlete/relay can theoretically ba in multiple teams; whether this is needed or not: I dont know. If yes, it might be necessary to link certains starts of that athlete/relay to one team or the other, which would have to be done with the table teamStarts';


-- -----------------------------------------------------
-- Table `starts`
-- -----------------------------------------------------
CREATE TABLE IF NOT EXISTS `starts` (
  `xStart` INT UNSIGNED NOT NULL AUTO_INCREMENT,
  `xInscription` INT UNSIGNED NOT NULL,
  `xEvent` INT UNSIGNED NOT NULL,
  `paid` BIT NOT NULL DEFAULT False,
  `notificationPerf` INT UNSIGNED NOT NULL DEFAULT '0',
  `bestPerf` INT UNSIGNED NOT NULL DEFAULT '0' COMMENT 'best perfoamnce in life',
  `bestPerfLast` INT UNSIGNED NOT NULL DEFAULT '0' COMMENT 'best performance in the range of interest',
  `competitive` BIT NOT NULL DEFAULT True COMMENT 'competitive or non-competitive:\nif non-competitive, an athlete will not automatically be qualified for the next round and will not get a rank in the rankinglist.',
  PRIMARY KEY (`xStart`),
  INDEX `fk_start_inscription1_idx` (`xInscription` ASC),
  INDEX `fk_starts_events1_idx` (`xEvent` ASC),
  UNIQUE INDEX `noDoubleStarts` (`xEvent` ASC, `xInscription` ASC),
  CONSTRAINT `fk_start_inscription1`
    FOREIGN KEY (`xInscription`)
    REFERENCES `inscriptions` (`xInscription`)
    ON DELETE NO ACTION
    ON UPDATE NO ACTION,
  CONSTRAINT `fk_starts_events1`
    FOREIGN KEY (`xEvent`)
    REFERENCES `events` (`xEvent`)
    ON DELETE NO ACTION
    ON UPDATE NO ACTION)
ENGINE = InnoDB
DEFAULT CHARACTER SET = utf8
COMMENT = 'do we really need the Performances here or do we want to store them differently (own table, together with base data, ...)?\n\nwhere to store the \"present\" field: if it is in \"starts\", it can only be used in the first round; additionally, since the list where the presence is noted is typically based on the contest and its appealTime, it makes sense to implement the present status in the \"startInGroup\" table. However, this also means that we must make sure that there is never an athlete without assignment to a group. \n\nnot implemented:\nErstserie, xStaffel';


-- -----------------------------------------------------
-- Table `rounds`
-- -----------------------------------------------------
CREATE TABLE IF NOT EXISTS `rounds` (
  `xRound` INT UNSIGNED NOT NULL AUTO_INCREMENT,
  `xEventGroup` INT UNSIGNED NOT NULL,
  `name` VARCHAR(50) NOT NULL DEFAULT '',
  `order` TINYINT UNSIGNED NOT NULL,
  `numGroups` SMALLINT UNSIGNED NOT NULL DEFAULT 1,
  `qualiModule` VARCHAR(45) NOT NULL DEFAULT '' COMMENT 'the name of the qualiModule; must be unique among all modules (or only qualiModules) on the same server',
  `qualiConf` TEXT NULL COMMENT 'could also be BLOB; allows 65536=2^16 bytes to be stored; attention: with charsets where one character can take more than one bytes,  numBytes < numChars!',
  PRIMARY KEY (`xRound`),
  INDEX `fk_round_contest1_idx` (`xEventGroup` ASC),
  UNIQUE INDEX `uniqueRound` (`order` ASC, `xEventGroup` ASC),
  CONSTRAINT `fk_round_contest1`
    FOREIGN KEY (`xEventGroup`)
    REFERENCES `eventgroups` (`xEventGroup`)
    ON DELETE NO ACTION
    ON UPDATE NO ACTION)
ENGINE = InnoDB
AUTO_INCREMENT = 277
DEFAULT CHARACTER SET = utf8
COMMENT = 'defines each round of a eventGroup\n\nqualification stuff is always related to \"qualification from this round to the next round\"\nqualif_type defines which class is used for the qualification stuff and interpretes the qualif_type-string, which shall contain the whole setup fir this qualification (number of seriesWinner, timeBest, ...), stored \nNOTE: in Athletica2 it was planned to have an extra table for the qualification linking both rounds; this however is unnecessary complicated and thus teh quali-configuration is now stored in the round qualified from.\nnot implemented:\nSpeakerstatus, StatusUpload, StatusUploadUKC';


-- -----------------------------------------------------
-- Table `conversionparams`
-- -----------------------------------------------------
CREATE TABLE IF NOT EXISTS `conversionparams` (
  `xConversion` INT UNSIGNED NOT NULL,
  `xDiscipline` INT UNSIGNED NOT NULL,
  `params` VARCHAR(100) NOT NULL DEFAULT '',
  INDEX `fk_conversionParams_conversion_idx` (`xConversion` ASC),
  INDEX `fk_conversionParams_disciplineType_idx` (`xDiscipline` ASC),
  PRIMARY KEY (`xConversion`, `xDiscipline`),
  CONSTRAINT `fk_conversionParams_conversion`
    FOREIGN KEY (`xConversion`)
    REFERENCES `conversions` (`xConversion`)
    ON DELETE NO ACTION
    ON UPDATE NO ACTION,
  CONSTRAINT `fk_conversionParams_disciplineType`
    FOREIGN KEY (`xDiscipline`)
    REFERENCES `disciplines` (`xDiscipline`)
    ON DELETE NO ACTION
    ON UPDATE NO ACTION)
ENGINE = InnoDB
DEFAULT CHARACTER SET = utf8
COMMENT = 'stores the paramteters for each conversion type for each discipline\n--> for \'each\' discipline?  not necessary all.';


-- -----------------------------------------------------
-- Table `regions`
-- -----------------------------------------------------
CREATE TABLE IF NOT EXISTS `regions` (
  `xRegion` INT UNSIGNED NOT NULL AUTO_INCREMENT,
  `country` CHAR(3) NOT NULL,
  `countryName` VARCHAR(100) NOT NULL DEFAULT '',
  `countrySortvalue` INT NOT NULL DEFAULT 0,
  `regionName` VARCHAR(100) NOT NULL DEFAULT '',
  `regionShortname` VARCHAR(6) NOT NULL DEFAULT '',
  `regionSortvalue` INT NOT NULL DEFAULT 0,
  PRIMARY KEY (`xRegion`))
ENGINE = InnoDB
COMMENT = 'country is also in regions. Have an entry with regionName etc =\'\' for every country and where available also have additional entries where the regions are set.';


-- -----------------------------------------------------
-- Table `athletes`
-- -----------------------------------------------------
CREATE TABLE IF NOT EXISTS `athletes` (
  `xAthlete` INT UNSIGNED NOT NULL AUTO_INCREMENT,
  `lastname` VARCHAR(100) NOT NULL DEFAULT '',
  `forename` VARCHAR(100) NOT NULL DEFAULT '',
  `birthdate` DATE NOT NULL DEFAULT '1900-01-01',
  `sex` ENUM('f', 'm') NULL DEFAULT 'f',
  `xClub` INT UNSIGNED NOT NULL,
  `identifier` VARCHAR(36) NULL COMMENT 'varchar allows up to UUIDv4 and most integers',
  `nationalBody` CHAR(3) NULL,
  `xRegion` INT UNSIGNED NOT NULL,
  `xInscription` INT UNSIGNED NOT NULL,
  PRIMARY KEY (`xAthlete`),
  INDEX `fk_athlete_club1_idx` (`xClub` ASC),
  INDEX `fk_athlete_regions1_idx` (`xRegion` ASC),
  INDEX `fk_athletes_inscriptions1_idx` (`xInscription` ASC),
  UNIQUE INDEX `uniqueBase` (`identifier` ASC, `nationalBody` ASC)  COMMENT 'every athlete from base should only be once in the DB',
  CONSTRAINT `fk_athlete_club1`
    FOREIGN KEY (`xClub`)
    REFERENCES `clubs` (`xClub`)
    ON DELETE NO ACTION
    ON UPDATE NO ACTION,
  CONSTRAINT `fk_athlete_regions1`
    FOREIGN KEY (`xRegion`)
    REFERENCES `regions` (`xRegion`)
    ON DELETE NO ACTION
    ON UPDATE NO ACTION,
  CONSTRAINT `fk_athletes_inscriptions1`
    FOREIGN KEY (`xInscription`)
    REFERENCES `inscriptions` (`xInscription`)
    ON DELETE CASCADE
    ON UPDATE NO ACTION)
ENGINE = InnoDB
DEFAULT CHARACTER SET = utf8
COMMENT = 'without license = manually entered\nnot included compared to old DB:\nAdress, Plz, Ort, Email, Athleticagen, bezahlt';


-- -----------------------------------------------------
-- Table `contests`
-- -----------------------------------------------------
CREATE TABLE IF NOT EXISTS `contests` (
  `xContest` INT UNSIGNED NOT NULL AUTO_INCREMENT,
  `xBaseDiscipline` INT UNSIGNED NOT NULL COMMENT 'Decision',
  `datetimeAppeal` DATETIME NOT NULL DEFAULT '2020-01-01 10:00:00' COMMENT 'It shall be possible that the different times are not on the same date; on the UI, do not show the date by default',
  `datetimeCall` DATETIME NOT NULL DEFAULT '2020-01-01 10:00:00' COMMENT 'It shall be possible that the different times are not on the same date; on the UI, do not show the date by default',
  `datetimeStart` DATETIME NOT NULL DEFAULT '2020-01-01 10:00:00' COMMENT 'It shall be possible that the different times are not on the same date; on the UI, do not show the date by default',
  `status` TINYINT UNSIGNED NOT NULL DEFAULT 10 COMMENT 'Startliste/Appell gemacht/Serien eingeteilt/Resultate erfasst/...',
  `conf` TEXT NOT NULL DEFAULT '' COMMENT '(replacement for extra tables for each discipline)\nThe configuration for the discipline: timing-stuff, number of attempts in tech, do final in tech, # finalists, turnOrder, jumpoff techHhigh), heightIncreases, ...',
  `name` VARCHAR(50) NULL DEFAULT '',
  PRIMARY KEY (`xContest`),
  INDEX `fk_contests_baseDisciplines1_idx` (`xBaseDiscipline` ASC),
  CONSTRAINT `fk_contests_baseDisciplines1`
    FOREIGN KEY (`xBaseDiscipline`)
    REFERENCES `basedisciplines` (`xBaseDiscipline`)
    ON DELETE NO ACTION
    ON UPDATE NO ACTION)
ENGINE = InnoDB
COMMENT = 'NOTE: It should be tried to have all competition specific configuration in the configuration string. ';


-- -----------------------------------------------------
-- Table `contests_track`
-- -----------------------------------------------------
CREATE TABLE IF NOT EXISTS `contests_track` (
  `xContest` INT UNSIGNED NOT NULL,
  `statusTimekeeper` TINYINT UNSIGNED NOT NULL DEFAULT '0' COMMENT 'what is that for? store whether the data has already been writen (then it maybe should be changed to series, given the chronometry can import single series and not only groups of series)?',
  `trackQnty` TINYINT UNSIGNED NOT NULL DEFAULT '6' COMMENT 'maybe deleted and replace with the setting that is made via the site',
  PRIMARY KEY (`xContest`),
  CONSTRAINT `fk_contest_track_contest1`
    FOREIGN KEY (`xContest`)
    REFERENCES `contests` (`xContest`)
    ON DELETE NO ACTION
    ON UPDATE NO ACTION)
ENGINE = InnoDB
DEFAULT CHARACTER SET = utf8
COMMENT = 'probably this is not necessary: trackQnty is given in the site-table, and the statusTimekeeper might be obsolete, when assuming that it must be uptodate always\n\nno qualification stuff here anymore because:\n- would not be logical whether the configuration counts from the last round to this or to the next\n- one round of a contest would not  have a configuration --> space unsed without need\n- would not allow for different qualification strategies, that e.g. also migh be applied to tech disciplines';


-- -----------------------------------------------------
-- Table `contests_tech`
-- -----------------------------------------------------
CREATE TABLE IF NOT EXISTS `contests_tech` (
  `xContest` INT UNSIGNED NOT NULL,
  `attempts` TINYINT UNSIGNED NOT NULL DEFAULT '1' COMMENT 'how many attempts per athlete (',
  `final` BIT NOT NULL DEFAULT False COMMENT 'could also be done by setting attmeptsBeforeFinal=0',
  `finalists` TINYINT NOT NULL DEFAULT '0',
  `attempsBeforeFinal` TINYINT NOT NULL DEFAULT '0',
  `turnOrder` BIT NOT NULL DEFAULT False,
  `bestResOnly` BIT NOT NULL DEFAULT False,
  PRIMARY KEY (`xContest`),
  CONSTRAINT `fk_contest_tech_contest1`
    FOREIGN KEY (`xContest`)
    REFERENCES `contests` (`xContest`)
    ON DELETE NO ACTION
    ON UPDATE NO ACTION)
ENGINE = InnoDB
DEFAULT CHARACTER SET = utf8
COMMENT = 'stores the settings for technical rounds (number of attempts, perform a final)\nactually this could all be stored also as a simple configuration string';


-- -----------------------------------------------------
-- Table `sites`
-- -----------------------------------------------------
CREATE TABLE IF NOT EXISTS `sites` (
  `xSite` INT UNSIGNED NULL AUTO_INCREMENT,
  `name` VARCHAR(50) NOT NULL DEFAULT '',
  `homologated` BIT NOT NULL DEFAULT False,
  `type` TINYINT UNSIGNED NOT NULL,
  `conf` TEXT NOT NULL DEFAULT '',
  PRIMARY KEY (`xSite`))
ENGINE = InnoDB
DEFAULT CHARACTER SET = utf8
COMMENT = 'currently (2022-09), sites_track as well as disciplinesOnSite are not used. Instead, the ytpe in sites as well as conf is used to store the necessary information. Additionally, there must be somewhere a definition which site-types allow for which disciplines. (This is currently in javascript only and not in the SQL DB.)';


-- -----------------------------------------------------
-- Table `series`
-- -----------------------------------------------------
CREATE TABLE IF NOT EXISTS `series` (
  `xSeries` INT UNSIGNED NOT NULL AUTO_INCREMENT,
  `xContest` INT UNSIGNED NOT NULL,
  `xSite` INT UNSIGNED NULL COMMENT 'philosophy question about the differentiation between series and groups: \n- if series should be a sequence on the same site, then the site should be defiend for the contest\n- if differen series should really have the chance to be on different sites, then keep it as it is\n\nimportant difference not to forget: groups can (not must) be defined before the role call, while series are defined after!\nadvantage when site is set for the contest and is a sequence on the same site: it is no problem to have a room for the contest, but at the same time it is then impossible to have two parallel series with a common final (as typical for long jump). However this is important, thus the site should be defined on series level. However, it is anyway just one room with multiple series and an advanced conflict management. ',
  `status` TINYINT UNSIGNED NOT NULL DEFAULT 10,
  `number` SMALLINT UNSIGNED NOT NULL COMMENT 'the number of the series; this was not implemented so far, the order of serie was given propably through xSeries; however, this is not very sexy.\nTODO: we could make xContest and number a unique constraint, but that would be difficult for series reordering',
  `name` VARCHAR(50) NOT NULL DEFAULT '' COMMENT 'the name of the series: can be empty, but also e.g. \"A\" (for Final A; Final should be written in the round)',
  `datetime` DATETIME NULL COMMENT 'the start time of this series',
  `id` VARCHAR(36) NULL COMMENT 'Eventually we need a unique id for series, especiall for the interaction with the timing. The id should change whenever a new series is created, i.e. also when the old series is deleted before. However, eventually this is also not needed. Therefore, the column can be null for the moment. ',
  `aux` TEXT NULL COMMENT 'discipline or discipline type specific auxilary data (might eventually replace seriesTrack)',
  PRIMARY KEY (`xSeries`),
  INDEX `fk_series_contest1_idx` (`xContest` ASC),
  INDEX `fk_series_sites1_idx` (`xSite` ASC),
  CONSTRAINT `fk_series_contest1`
    FOREIGN KEY (`xContest`)
    REFERENCES `contests` (`xContest`)
    ON DELETE NO ACTION
    ON UPDATE NO ACTION,
  CONSTRAINT `fk_series_sites1`
    FOREIGN KEY (`xSite`)
    REFERENCES `sites` (`xSite`)
    ON DELETE NO ACTION
    ON UPDATE NO ACTION)
ENGINE = InnoDB
DEFAULT CHARACTER SET = utf8
COMMENT = 'so far no seriesNumber column was available and the order of series probably relied on xSeries. This was not very sexy and is more clear now.\n\nnot implemented: \nTVname, MaxAthlet';


-- -----------------------------------------------------
-- Table `seriestrack`
-- -----------------------------------------------------
CREATE TABLE IF NOT EXISTS `seriestrack` (
  `xSeries` INT UNSIGNED NOT NULL,
  `wind` SMALLINT NOT NULL DEFAULT '0' COMMENT 'this one must be signed!',
  `film` SMALLINT UNSIGNED NOT NULL DEFAULT '0',
  `manual` BIT NOT NULL DEFAULT False COMMENT 'manual timing?',
  PRIMARY KEY (`xSeries`),
  CONSTRAINT `fk_series_track_series1`
    FOREIGN KEY (`xSeries`)
    REFERENCES `series` (`xSeries`)
    ON DELETE NO ACTION
    ON UPDATE NO ACTION)
ENGINE = InnoDB
DEFAULT CHARACTER SET = utf8;


-- -----------------------------------------------------
-- Table `groups`
-- -----------------------------------------------------
CREATE TABLE IF NOT EXISTS `groups` (
  `xRound` INT UNSIGNED NOT NULL,
  `number` SMALLINT UNSIGNED NOT NULL DEFAULT 1,
  `xContest` INT UNSIGNED NULL COMMENT 'eventually allow null here',
  `name` VARCHAR(45) NOT NULL DEFAULT '' COMMENT 'shall be implemented in the future: each group can have a name, and not only a number.',
  PRIMARY KEY (`xRound`, `number`),
  INDEX `fk_rounds_has_contest_rounds1_idx` (`xRound` ASC),
  INDEX `fk_groups_contest1_idx` (`xContest` ASC),
  UNIQUE INDEX `uq_xRound_number` (`xRound` ASC, `number` ASC),
  CONSTRAINT `fk_rounds_has_contest_rounds1`
    FOREIGN KEY (`xRound`)
    REFERENCES `rounds` (`xRound`)
    ON DELETE NO ACTION
    ON UPDATE NO ACTION,
  CONSTRAINT `fk_groups_contest1`
    FOREIGN KEY (`xContest`)
    REFERENCES `contests` (`xContest`)
    ON DELETE NO ACTION
    ON UPDATE NO ACTION)
ENGINE = InnoDB
DEFAULT CHARACTER SET = utf8;


-- -----------------------------------------------------
-- Table `startsingroup`
-- -----------------------------------------------------
CREATE TABLE IF NOT EXISTS `startsingroup` (
  `xStartgroup` INT UNSIGNED NOT NULL AUTO_INCREMENT,
  `xRound` INT UNSIGNED NOT NULL,
  `number` SMALLINT UNSIGNED NOT NULL,
  `xStart` INT UNSIGNED NOT NULL,
  `present` BIT NOT NULL DEFAULT False,
  PRIMARY KEY (`xStartgroup`),
  INDEX `fk_xStart` (`xStart` ASC),
  INDEX `fk_startsInGroup_groups1_idx` (`xRound` ASC, `number` ASC),
  UNIQUE INDEX `secondary` (`xRound` ASC, `xStart` ASC)  COMMENT 'in one round, an athlete can only participate in one group',
  CONSTRAINT `fk_startGroup_starts1`
    FOREIGN KEY (`xStart`)
    REFERENCES `starts` (`xStart`)
    ON DELETE NO ACTION
    ON UPDATE NO ACTION,
  CONSTRAINT `fk_startsInGroup_groups1`
    FOREIGN KEY (`xRound` , `number`)
    REFERENCES `groups` (`xRound` , `number`)
    ON DELETE NO ACTION
    ON UPDATE NO ACTION)
ENGINE = InnoDB
COMMENT = 'there is one entry per round for every starting athlete, linking him/her to a group; \nwhere to store the \"present\" field: if it is in \"starts\", it can only be used in the first round; additionally, since the list where the presence is noted is typically based on the contest and its appealTime, it makes sense to implement the present status in the \"startInGroup\" table. However, this also means that we must make sure that there is never an athlete without assignment to a group. \n';


-- -----------------------------------------------------
-- Table `seriesstartsresults`
-- -----------------------------------------------------
CREATE TABLE IF NOT EXISTS `seriesstartsresults` (
  `xSeriesStart` INT UNSIGNED NOT NULL AUTO_INCREMENT,
  `xStartgroup` INT UNSIGNED NOT NULL,
  `xSeries` INT UNSIGNED NOT NULL,
  `position` SMALLINT UNSIGNED NOT NULL DEFAULT '0' COMMENT 'position:\nfor tech: the order of athletes\nfor track: side number; IMORTANT: for sprint this is the same as the lane defined in seriesStarts_track, but for middle/long distance it is not!',
  `resultOverrule` TINYINT UNSIGNED NOT NULL DEFAULT '0' COMMENT 'DNS, DQ, DNF, NM, r (retired), withdrawal (combined only)\n(--> maybe NM and DNF not here)\n\n0=normal\n1=r (retired)=hört mitten im Wettkampf auf\n2=NM=o.g.V. (needed?)\n3=DNF=aufg.\n4=withdrawal=abgemeldet \n5=DNS=n.a.\n6=DQ=disq. --> nur diziplinarisch (kein Fehlstart --> ist im Resultat drin), damit man hiermit bestimmen kann, ob jemamnd nicht mehr starten darf',
  `resultRemark` VARCHAR(100) NOT NULL DEFAULT '',
  `qualification` TINYINT NOT NULL DEFAULT 0 COMMENT 'stores how somebody was qualified AND also if somebody retired from the competition; the qualification-module must define whcih number belongs to what and must also provide what is needed for translation of that status into different languages!\nall modules MUST use 0 as default= not qualified for next round!',
  `startConf` TEXT NOT NULL DEFAULT '' COMMENT 'the lane in track races and the startHeight for techHigh; replaces the separate tables',
  PRIMARY KEY (`xSeriesStart`),
  INDEX `fk_seriesStart_series1_idx` (`xSeries` ASC),
  UNIQUE INDEX `fk_seriesStarts_startGroup1_idx` (`xStartgroup` ASC),
  CONSTRAINT `fk_seriesStart_series1`
    FOREIGN KEY (`xSeries`)
    REFERENCES `series` (`xSeries`)
    ON DELETE NO ACTION
    ON UPDATE NO ACTION,
  CONSTRAINT `fk_seriesStarts_startGroup1`
    FOREIGN KEY (`xStartgroup`)
    REFERENCES `startsingroup` (`xStartgroup`)
    ON DELETE NO ACTION
    ON UPDATE NO ACTION)
ENGINE = InnoDB
DEFAULT CHARACTER SET = utf8
COMMENT = '\nnot implemented:\nRang, Qualifikation, RundeZusammen, Bemerkung, POsition2, Position3, AktivAthlet\n--> some of those were only needed to save the current athlete for the speakermonitor --> this should be possible differently!\n--> eventually include a second position column to store the current order for the use with Vor- und Endkampf in tech-disc; this is needed if we request that it is possible to get the the next athlete right out of the DB; however, we could also think of this ordering beeing done on the client, given the client can always get the rankinglist as it was after 3 attempts form the DB';


-- -----------------------------------------------------
-- Table `heights`
-- -----------------------------------------------------
CREATE TABLE IF NOT EXISTS `heights` (
  `xHeight` INT UNSIGNED NOT NULL AUTO_INCREMENT,
  `xSeries` INT UNSIGNED NOT NULL,
  `jumpoffOrder` SMALLINT UNSIGNED NOT NULL DEFAULT 0 COMMENT 'defines the order if it is a jumpoff height. For all other heights, this property has to be 0. The height is then automatically given through the height, as it can only increase.',
  `height` SMALLINT UNSIGNED NOT NULL,
  PRIMARY KEY (`xHeight`),
  INDEX `fk_height_series1_idx` (`xSeries` ASC),
  CONSTRAINT `fk_height_series1`
    FOREIGN KEY (`xSeries`)
    REFERENCES `series` (`xSeries`)
    ON DELETE NO ACTION
    ON UPDATE NO ACTION)
ENGINE = InnoDB
DEFAULT CHARACTER SET = utf8;


-- -----------------------------------------------------
-- Table `resultshigh`
-- -----------------------------------------------------
CREATE TABLE IF NOT EXISTS `resultshigh` (
  `xResult` INT UNSIGNED NOT NULL,
  `xHeight` INT UNSIGNED NOT NULL DEFAULT '0',
  `resultsHighFailedAttempts` TINYINT UNSIGNED NOT NULL DEFAULT '0' COMMENT '- how many failed attempts on this height\n- this number also helps to count the total not passed attempts for the ordering',
  `resultsHighValid` TINYINT(1) NOT NULL DEFAULT False COMMENT 'passed this height already yes/no',
  `resultsHighPassed` TINYINT(1) NOT NULL DEFAULT 0 COMMENT 'verzichtet (-)',
  PRIMARY KEY (`xHeight`, `xResult`),
  INDEX `fk_result_high_height1_idx` (`xHeight` ASC),
  INDEX `fk_resultsHigh_seriesStartsResults1_idx` (`xResult` ASC),
  CONSTRAINT `fk_result_high_height1`
    FOREIGN KEY (`xHeight`)
    REFERENCES `heights` (`xHeight`)
    ON DELETE NO ACTION
    ON UPDATE NO ACTION,
  CONSTRAINT `fk_resultsHigh_seriesStartsResults1`
    FOREIGN KEY (`xResult`)
    REFERENCES `seriesstartsresults` (`xSeriesStart`)
    ON DELETE NO ACTION
    ON UPDATE NO ACTION)
ENGINE = InnoDB
DEFAULT CHARACTER SET = utf8
COMMENT = 'maybe make a separate column for passed (verzichtet) trial, as it is not directly related to the sortOrder (taking an athlet to the beginning/end of a trial), but as only one on or the other (sortOrder or passing) is possible at the same height, this still works';


-- -----------------------------------------------------
-- Table `contest_high`
-- -----------------------------------------------------
CREATE TABLE IF NOT EXISTS `contest_high` (
  `xContests` INT UNSIGNED NOT NULL AUTO_INCREMENT,
  `jumpoff` TINYINT(1) NOT NULL DEFAULT 0 COMMENT '=Stichkampf yes/no\ngeneraly only on championshiops, therefore the standard is no',
  PRIMARY KEY (`xContests`),
  CONSTRAINT `fk_contest_high_contest1`
    FOREIGN KEY (`xContests`)
    REFERENCES `contests` (`xContest`)
    ON DELETE NO ACTION
    ON UPDATE NO ACTION)
ENGINE = InnoDB;


-- -----------------------------------------------------
-- Table `heightincreases`
-- -----------------------------------------------------
CREATE TABLE IF NOT EXISTS `heightincreases` (
  `xHeightIncrease` INT UNSIGNED NOT NULL AUTO_INCREMENT,
  `xContest` INT UNSIGNED NOT NULL COMMENT 'to which series this incrementation belongs',
  `heightIncreaseStartheight` SMALLINT UNSIGNED NOT NULL COMMENT 'starting at which height',
  `heightIncrease` SMALLINT UNSIGNED NOT NULL DEFAULT '0' COMMENT 'increase steps from this height on',
  PRIMARY KEY (`xHeightIncrease`),
  INDEX `fk_heightIncreases_rounds_high1_idx` (`xContest` ASC),
  CONSTRAINT `fk_heightIncreases_rounds_high1`
    FOREIGN KEY (`xContest`)
    REFERENCES `contest_high` (`xContests`)
    ON DELETE NO ACTION
    ON UPDATE NO ACTION)
ENGINE = InnoDB
DEFAULT CHARACTER SET = utf8;


-- -----------------------------------------------------
-- Table `relays`
-- -----------------------------------------------------
CREATE TABLE IF NOT EXISTS `relays` (
  `xRelay` INT UNSIGNED NOT NULL AUTO_INCREMENT,
  `name` VARCHAR(100) NOT NULL,
  `xClub` INT UNSIGNED NOT NULL,
  `xRegion` INT UNSIGNED NOT NULL,
  `xCategory` INT UNSIGNED NOT NULL COMMENT 'while an athlet has an birthdate, a relay simply has a category --> must be proven, that the athetes have the correct age at the date of the competition',
  `xBase` INT UNSIGNED NOT NULL COMMENT 'the ID of the relay in the base data, analog to the license of an athlete',
  `xInscription` INT UNSIGNED NOT NULL,
  PRIMARY KEY (`xRelay`, `xClub`, `xCategory`),
  INDEX `fk_relay_club1_idx` (`xClub` ASC),
  INDEX `fk_relay_category1_idx` (`xCategory` ASC),
  INDEX `fk_relays_inscriptions1_idx` (`xInscription` ASC),
  INDEX `fk_relays_regions1_idx` (`xRegion` ASC),
  CONSTRAINT `fk_relay_club1`
    FOREIGN KEY (`xClub`)
    REFERENCES `clubs` (`xClub`)
    ON DELETE NO ACTION
    ON UPDATE NO ACTION,
  CONSTRAINT `fk_relay_category1`
    FOREIGN KEY (`xCategory`)
    REFERENCES `categories` (`xCategory`)
    ON DELETE NO ACTION
    ON UPDATE NO ACTION,
  CONSTRAINT `fk_relays_inscriptions1`
    FOREIGN KEY (`xInscription`)
    REFERENCES `inscriptions` (`xInscription`)
    ON DELETE CASCADE
    ON UPDATE NO ACTION,
  CONSTRAINT `fk_relays_regions1`
    FOREIGN KEY (`xRegion`)
    REFERENCES `regions` (`xRegion`)
    ON DELETE NO ACTION
    ON UPDATE NO ACTION)
ENGINE = InnoDB
COMMENT = 'if relay are always only created per meeting then it is not necessary to have this table. Instead, all this fileds can be implemented in inscription_relay';


-- -----------------------------------------------------
-- Table `countries`
-- -----------------------------------------------------
CREATE TABLE IF NOT EXISTS `countries` (
  `xCountry` CHAR(3) NOT NULL,
  `countryName` VARCHAR(100) NOT NULL DEFAULT '',
  `countrySortvalue` INT NOT NULL DEFAULT '0',
  PRIMARY KEY (`xCountry`))
ENGINE = InnoDB
DEFAULT CHARACTER SET = utf8
COMMENT = 'the countries are now included in the region table; this table is not used anymore.';


-- -----------------------------------------------------
-- Table `sites_track`
-- -----------------------------------------------------
CREATE TABLE IF NOT EXISTS `sites_track` (
  `xSite` INT UNSIGNED NOT NULL,
  `lanesStraight` TINYINT NOT NULL DEFAULT 6,
  `lanesTurn` TINYINT NOT NULL DEFAULT 6,
  `chronometryType` TINYINT NOT NULL DEFAULT 0,
  `chronometryConf` VARCHAR(200) NOT NULL DEFAULT '',
  `chonometryName` VARCHAR(50) NOT NULL DEFAULT '',
  PRIMARY KEY (`xSite`),
  CONSTRAINT `fk_sites_track_sites1`
    FOREIGN KEY (`xSite`)
    REFERENCES `sites` (`xSite`)
    ON DELETE NO ACTION
    ON UPDATE NO ACTION)
ENGINE = InnoDB
COMMENT = 'currently (2022-09) not in use! Instead, sites.conf is used.';


-- -----------------------------------------------------
-- Table `disciplinesonsite`
-- -----------------------------------------------------
CREATE TABLE IF NOT EXISTS `disciplinesonsite` (
  `xSite` INT UNSIGNED NOT NULL,
  `xBaseDiscipline` INT UNSIGNED NOT NULL,
  PRIMARY KEY (`xSite`, `xBaseDiscipline`),
  CONSTRAINT `fk_disciplines_on_site_sites1`
    FOREIGN KEY (`xSite`)
    REFERENCES `sites` (`xSite`)
    ON DELETE NO ACTION
    ON UPDATE NO ACTION,
  CONSTRAINT `fk_disciplinesOnSite_baseDisciplines1`
    FOREIGN KEY (`xBaseDiscipline`)
    REFERENCES `basedisciplines` (`xBaseDiscipline`)
    ON DELETE NO ACTION
    ON UPDATE NO ACTION)
ENGINE = InnoDB
COMMENT = 'The alternative to this table would be to define several site types (e.g. track: straight only or full track, with/out wind, max-length; tech: hammer/discus combined or only one of them? Longjump/Triplejump or only one of them?). However, this is not flexible enough when the database should also be able to handle any kind of special, yet unknown disciplines. \n--> currently (2022-09), this table is not in use yet! Instead, the conf in sites is used';


-- -----------------------------------------------------
-- Table `basedisciplinelocalizations`
-- -----------------------------------------------------
CREATE TABLE IF NOT EXISTS `basedisciplinelocalizations` (
  `xDisciplinesLocalization` INT UNSIGNED NOT NULL AUTO_INCREMENT,
  `xBaseDiscipline` INT UNSIGNED NOT NULL,
  `language` CHAR(2) NOT NULL COMMENT 'language shortcut according to ISO639-1: http://www.loc.gov/standards/iso639-2/php/code_list.php\n',
  `name` VARCHAR(50) NOT NULL,
  `shortname` VARCHAR(20) NOT NULL,
  PRIMARY KEY (`xDisciplinesLocalization`, `xBaseDiscipline`),
  INDEX `fk_baseDisciplineLocalizations_baseDisciplines1_idx` (`xBaseDiscipline` ASC),
  UNIQUE INDEX `onlyOne` (`xBaseDiscipline` ASC, `language` ASC),
  CONSTRAINT `fk_baseDisciplineLocalizations_baseDisciplines1`
    FOREIGN KEY (`xBaseDiscipline`)
    REFERENCES `basedisciplines` (`xBaseDiscipline`)
    ON DELETE NO ACTION
    ON UPDATE NO ACTION)
ENGINE = InnoDB
COMMENT = 'stores the language dependet names of the disciplines';


-- -----------------------------------------------------
-- Table `resultstrack`
-- -----------------------------------------------------
CREATE TABLE IF NOT EXISTS `resultstrack` (
  `xResultTrack` INT UNSIGNED NOT NULL,
  `time` INT UNSIGNED NOT NULL COMMENT 'in 1/100\'000s (hopefully futureproof)\nsufficient for all runs; takes up to 11.9h\n',
  `timeRounded` INT UNSIGNED NOT NULL COMMENT 'rounded time, digits and rounding defined by the discipline',
  `rank` TINYINT UNSIGNED NOT NULL COMMENT 'the ranking made by the finish-judge; the rank may be more specific than the reported time (i.e. the same time up to 1/1000 available accuracy)',
  `official` BIT NOT NULL DEFAULT 0,
  `reactionTime` SMALLINT NULL COMMENT 'in ms',
  PRIMARY KEY (`xResultTrack`),
  CONSTRAINT `fk_resultsTrack_seriesStartsResults1`
    FOREIGN KEY (`xResultTrack`)
    REFERENCES `seriesstartsresults` (`xSeriesStart`)
    ON DELETE NO ACTION
    ON UPDATE NO ACTION)
ENGINE = InnoDB;


-- -----------------------------------------------------
-- Table `resultstech`
-- -----------------------------------------------------
CREATE TABLE IF NOT EXISTS `resultstech` (
  `xResultTech` INT UNSIGNED NOT NULL,
  `result` SMALLINT NOT NULL DEFAULT 0 COMMENT 'in cm',
  `attempt` TINYINT UNSIGNED NOT NULL COMMENT 'which attempt (start from 1)',
  `wind` SMALLINT NULL COMMENT 'unfortunately Wind must appear twice in the column-name\n\nmust be signed (+-)!\nin m/s\n',
  PRIMARY KEY (`xResultTech`),
  CONSTRAINT `fk_resultsTechWind_seriesStartsResults1`
    FOREIGN KEY (`xResultTech`)
    REFERENCES `seriesstartsresults` (`xSeriesStart`)
    ON DELETE NO ACTION
    ON UPDATE NO ACTION)
ENGINE = InnoDB
COMMENT = 'compared to tech: has wind\nfor horizontal jumps outdoor';


-- -----------------------------------------------------
-- Table `modules`
-- -----------------------------------------------------
CREATE TABLE IF NOT EXISTS `modules` (
  `xModule` INT UNSIGNED NOT NULL AUTO_INCREMENT,
  `moduleName` VARCHAR(100) NOT NULL,
  `moduleActivated` BIT NOT NULL DEFAULT True,
  `moduleType` SMALLINT NOT NULL,
  PRIMARY KEY (`xModule`),
  UNIQUE INDEX `moduleName_UNIQUE` (`moduleName` ASC))
ENGINE = InnoDB;


-- -----------------------------------------------------
-- Table `relayathletes`
-- -----------------------------------------------------
CREATE TABLE IF NOT EXISTS `relayathletes` (
  `xRelayAthlete` INT UNSIGNED NOT NULL AUTO_INCREMENT,
  `xAthlete` INT UNSIGNED NOT NULL,
  `xRelay` INT UNSIGNED NOT NULL,
  PRIMARY KEY (`xRelayAthlete`),
  UNIQUE INDEX `Secondary` (`xAthlete` ASC, `xRelay` ASC),
  INDEX `fk_relaysAthletes_relays1_idx` (`xRelay` ASC),
  CONSTRAINT `fk_relaysAthletes_athletes1`
    FOREIGN KEY (`xAthlete`)
    REFERENCES `athletes` (`xAthlete`)
    ON DELETE NO ACTION
    ON UPDATE NO ACTION,
  CONSTRAINT `fk_relaysAthletes_relays1`
    FOREIGN KEY (`xRelay`)
    REFERENCES `relays` (`xRelay`)
    ON DELETE CASCADE
    ON UPDATE NO ACTION)
ENGINE = InnoDB;


-- -----------------------------------------------------
-- Table `relayathletepositions`
-- -----------------------------------------------------
CREATE TABLE IF NOT EXISTS `relayathletepositions` (
  `xRelayAthlete` INT UNSIGNED NOT NULL,
  `xStartgroup` INT UNSIGNED NOT NULL,
  `position` SMALLINT UNSIGNED NOT NULL,
  PRIMARY KEY (`xRelayAthlete`, `xStartgroup`),
  INDEX `fk_relayAthletePositions_relaysAthletes1_idx` (`xRelayAthlete` ASC),
  INDEX `fk_relayAthletePositions_startGroup1_idx` (`xStartgroup` ASC),
  CONSTRAINT `fk_relayAthletePositions_relaysAthletes1`
    FOREIGN KEY (`xRelayAthlete`)
    REFERENCES `relayathletes` (`xRelayAthlete`)
    ON DELETE NO ACTION
    ON UPDATE NO ACTION,
  CONSTRAINT `fk_relayAthletePositions_startGroup1`
    FOREIGN KEY (`xStartgroup`)
    REFERENCES `startsingroup` (`xStartgroup`)
    ON DELETE NO ACTION
    ON UPDATE NO ACTION)
ENGINE = InnoDB
COMMENT = 'the order of the atheltes in a relay; can be differnt in each round;\nTODO: it probably makes more sense not to Link to round, but instead store the integer value of the roundOrder; pro: athletes order can ba defined even before the relay has an entry in start and before the discipline has rounds and also a change in the link between the event and the contest would not result to problems; con: the order is just an integer --> the user can not easily see that it is related to quali/final/etc but must know this link by hard (except one programmatically tries to ad dthis information to the GUI)';


SET SQL_MODE=@OLD_SQL_MODE;
SET FOREIGN_KEY_CHECKS=@OLD_FOREIGN_KEY_CHECKS;
SET UNIQUE_CHECKS=@OLD_UNIQUE_CHECKS;
