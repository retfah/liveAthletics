<% if(type=="html"){ %>

    <!-- Add another heat assignment method "based on previous rounds", as defined in the IAAF regulations. (Note: do not include here, since this would require too many changes in the currently rather well structured Code.) -->

<!-- the configuration window for this kind of series assignment-->
<div v-if="seriesAssignmentOverlay=='trackPerf'" class="verticalForm">
    <h3><%= __("Configuration") %></h3>
    <%= __("First sort the athletes based on a performance, then distribute them over the required heats.") %><br>
    <!-- TODO FUTURE: introduce some approach on how to seed runs started in lanes with more than one person per lane; eventually we want there to only have the outer/inner lanes to be filled with two athletes or whatever-->
    <fieldset>
        <legend><%= __("Sort athletes by the best result out of") %>: </legend>
        <label>
            <input type="checkbox" v-model="seriesAssignmentConfiguration.trackPerf.includeRV">
            <%= __("Registration value") %>
        </label>
        <label>
            <input type="checkbox"  v-model="seriesAssignmentConfiguration.trackPerf.includePB">
            <%= __("Personal best") %>
        </label>
        <label>
            <input type="checkbox" v-model="seriesAssignmentConfiguration.trackPerf.includePerfPreviousRounds">
            <%= __("Performances of previous rounds") %>
        </label>
        <!--<label>
            <input type="checkbox" v-model="seriesAssignmentConfiguration.trackPerf.includePerfOtherEvents">
            <%= __("Performances of other events in this meeting") %>
        </label>-->
    </fieldset>

    <fieldset>
        <legend><%= __("Distribute athletes over the heats") %>:</legend>
        <label style="display:inline-block; margin-right:15px;">
            <input type="radio" name="distributeAthletes" value="bestFirst" v-model="seriesAssignmentConfiguration.trackPerf.distributeAthletes">
            <%= __("Best first") %>
        </label>   
        <label style="display:inline-block; margin-right:15px;">
            <input type="radio" name="distributeAthletes" value="bestLast" v-model="seriesAssignmentConfiguration.trackPerf.distributeAthletes">
            <%= __("Best last") %>   
        </label>
        <label style="display:inline-block; margin-right:15px;">
            <input type="radio" name="distributeAthletes" value="IAAF" v-model="seriesAssignmentConfiguration.trackPerf.distributeAthletes">
            <%= __("IAAF (zig-zag)") %>
        </label>
    </fieldset>
    <template v-if="conf.startInLanes">
        <fieldset>
            <legend><%= __("Distribute athletes within the heats") %>:</legend>
            <label style="display:inline-block; margin-right:15px;">
                <input type="radio" name="sortWithinHeat" value="arrow" v-model="seriesAssignmentConfiguration.trackPerf.sortWithinHeat">
                <%= __("Arrow") %>
            </label>
            <label style="display:inline-block; margin-right:15px;">
                <input type="radio" name="sortWithinHeat" value="IAAF" v-model="seriesAssignmentConfiguration.trackPerf.sortWithinHeat">
                <%= __("IAAF") %>
            </label>
            <label style="display:inline-block; margin-right:15px;">
                <input type="radio" name="sortWithinHeat" value="random" v-model="seriesAssignmentConfiguration.trackPerf.sortWithinHeat">
                <%= __("Random") %>
            </label>
            <label style="display:inline-block; margin-right:15px;">
                <input type="radio" name="sortWithinHeat" value="positive" v-model="seriesAssignmentConfiguration.trackPerf.sortWithinHeat">
                <%= __("Best first") %>
            </label>
            <label style="display:inline-block; margin-right:15px;">
                <input type="radio" name="sortWithinHeat" value="negative" v-model="seriesAssignmentConfiguration.trackPerf.sortWithinHeat">
                <%= __("Best last") %>
            </label>
            <br>
            <label style="display:inline-block; margin-right:15px;">
                <input type="radio" name="sortWithinHeat" value="custom" v-model="seriesAssignmentConfiguration.trackPerf.sortWithinHeat">
                <%= __("Custom") %>
            </label>
            <label>
                <%= __("Custom sort logic") %> <button type="button" class="information" v-on:click="overlayInfo('<%= __('Custom sort logic') %>:', '<%= __('Note down the lane numbers in the order of assignment, separated with a ";". The first lane will be assigned to the person with the best peformance, etc. Lanes separated with a "," instead of a ";" will be shuffled before assignment. Example: "2,3 ; 4 ; 1" = the two fastest are randomly assigned lanes 2 or 3, the third fastest is on lane 4 and the last is on lane 1. Whitespace is neglected.') %>')"><%= __('i') %></button>
                <input type="text" v-model="seriesAssignmentConfiguration.trackPerf.sortWithinHeatCustom" v-on:click="seriesAssignmentConfiguration.trackPerf.sortWithinHeat='custom'">
            </label>
        </fieldset>
        <fieldset>
            <legend><%= __("Position of athletes in heats with empty lanes") %>:</legend>
            <label style="display:inline-block; margin-right:15px;">
                <input type="radio" name="positioningInSeries" value="left" v-model.number="seriesAssignmentConfiguration.trackPerf.positioningInSeries">
                <%= __("Left") %>
            </label>
            <label style="display:inline-block; margin-right:15px;">
                <input type="radio" name="positioningInSeries" value="centerLeft" v-model.number="seriesAssignmentConfiguration.trackPerf.positioningInSeries">
                <%= __("Center left") %>
            </label>
            <label style="display:inline-block; margin-right:15px;">
                <input type="radio" name="positioningInSeries" value="centerRight" v-model.number="seriesAssignmentConfiguration.trackPerf.positioningInSeries">
                <%= __("Center right") %>
            </label>
            <label style="display:inline-block; margin-right:15px;">
                <input type="radio" name="positioningInSeries" value="right" v-model.number="seriesAssignmentConfiguration.trackPerf.positioningInSeries">
                <%= __("Right") %>
            </label>
        </fieldset>

    </template>
    <template v-else>
        <%= __("The athletes are sorted randomly within the heat.") %>
    </template>



</div>

<% }else{ %> // must have a non-code line here, since it will be commented out!
    {
        name: '<%= __("By Performance") %>',  // the name of the series assignment.
        overlayName: "trackPerf", // the name of the overlay
        assignFunc: function (args){

            // the array stores which places in the sorted (by performance) athelets array shall be shuffled;  
            // ATTENTION: in order that the assignement is correct, assignmentGroupsIAAF as well as lanesIAAF both must be correct  
            const assignmentGroupsIAAF = [
                [[0,0]], // 1 lane
                [[0,1]], // 2 lanes
                [[0,2]], // 3 lanes
                [[0,1], [2,3]], // 4 lanes
                [[0,2], [3,4]], // 5 lanes
                [[0,2], [3,5]], // 6 lanes (Rule 20.4.2 note)
                [[0,2], [3,4], [5,6]], // 7 lanes
                [[0,3], [4,5], [6,7]], // 8 lanes (Rule 20.4.2)
                [[0,3], [4,5], [6,8]], // 9 lanes
                [[0,3], [4,6], [7,9]], // 10 lanes
            ];
            // the aray stores the lane to assign to which position (the lane is the real number, i..e not zero-based)
            const lanesIAAF = [
                [1], // 1 lane
                [1,2], // 2 lanes
                [1,2,3], // 3 lanes
                [2,3,1,4], // 4 lanes
                [2,3,4,1,5], // 5 lanes
                [3,4,5,1,2,6], // 6 lanes
                [3,4,5,6,7,1,2], // 7 lanes
                [3,4,5,6,7,8,1,2], // 8 lanes
                [4,5,6,7,8,9,1,2,3], // 9 lanes
                [4,5,6,7,8,9,10,1,2,3], // 10 lanes
            ];
            // for information only: people of which group per lane
            // x= [
            //     [1],  // 1
            //     [1,1], // 2
            //     [1,1,1], // 3
            //     [2,1,1,2], // 4
            //     [2,1,1,1,2], // 5
            //     [2,2,1,1,1,2], // 6
            //     [3,3,1,1,1,2,2], // 7
            //     [3,3,1,1,1,1,2,2], // 8: shuffle group 3 on lanes 1 and 2, shuffle group 1 on lanes 3-6 and shuffle group 2 on 7-8
            //     [3,3,3,1,1,1,1,2,2], // 9
            //     [3,3,3,1,1,1,1,2,2,2], // 10
            // ]

            // if customSort is given, parse it, check it and create the logic as in assignmentGroupsIAAF and lanesIAAF
            let customLanes;
            let customAssignmentGroups = [];
            if (this.seriesAssignmentConfiguration.trackPerf.sortWithinHeat=='custom'){

                // first, remove everything except numbers comma and semicolon
                let s = this.seriesAssignmentConfiguration.trackPerf.sortWithinHeatCustom.replace(/[^,;\d]/g, '');

                // first simply get the lane order by splitting at ,; and parse to int
                customLanes = s.split(/[,;]/g).map(x=>parseInt(x));
                
                // no lane shall occure twice and no lane can be higher than the max number of lanes we have
                if (Math.max(...customLanes)>this.conf.lanes || Math.min(...customLanes)<1){
                    return;
                }
                for (let i=1;i<=this.conf.lanes; i++){
                    if (customLanes.reduce((total, x)=>(x==i ? total+1 : total), 0)>1){
                        return
                    }
                }

                // get the shuffle groups; basically we only need to know how many lanes are in the same shuffle group
                let groups = s.replace(/[,]/g,'').split(/[;]/g).map(x=>x.length);
                let j=0;
                for (let i=0; i<groups.length; i++){
                    customAssignmentGroups.push([j, j+groups[i]-1]);
                    j += groups[i];
                }

            }

            // calculate how many series are needed and add those series
            if (this.conf.startInLanes){
                this.numSeries = Math.ceil(this.unassignedAthletesCreate.length/(this.conf.groupSize*this.conf.lanes)); 
            } else {
                this.numSeries = Math.ceil(this.unassignedAthletesCreate.length/this.conf.groupSize); 
            }

            this.seriesObj = [];
            for (let i=0; i<this.numSeries; i++){
                this.addEmptySeriesInitial()
            }
            // the series are created

            // first sort startsingroup accordingly.
            // for sorting, first create an object with all xStartgroup and the performance for this person
            const performances = {};
            for (let SG of this.unassignedAthletesCreate){
                perfs = [Infinity];
                if (this.seriesAssignmentConfiguration.trackPerf.includeRV && SG.bestPerfLast){
                    perfs.push(SG.bestPerfLast);
                }
                if (this.seriesAssignmentConfiguration.trackPerf.includePB && SG.bestPerf){
                    perfs.push(SG.bestPerf);
                }
                if (this.seriesAssignmentConfiguration.trackPerf.includeRV && SG.includePerfPreviousRounds){
                    // TODO
                    //perfs.push();
                }
                if (this.seriesAssignmentConfiguration.trackPerf.includeRV && SG.includePerfOtherEvents){
                    // TODO
                    //perfs.push();
                }
                performances[SG.xStartgroup] = Math.min(...perfs);
            }
            this.unassignedAthletesCreate.sort((a,b)=>performances[a.xStartgroup]-performances[b.xStartgroup]);

            // distribute the athletes (IAAF 20.3.3)
            let athletesPerSeries = Array(this.numSeries).fill(null).map(()=>Array());
            if (this.seriesAssignmentConfiguration.trackPerf.distributeAthletes == 'IAAF'){
                // procedure: assign an athlete and then go in the current direction
                let direction = 1; 
                let currentSeries = 0;
                for (let i=0; i<this.unassignedAthletesCreate.length; i++){
                    athletesPerSeries[currentSeries].push(this.unassignedAthletesCreate[i]);
                    if ((currentSeries+1==this.numSeries && direction==1) || (currentSeries==0 && direction==-1)){
                        direction *=-1;
                    } else {
                        currentSeries += direction;
                    }
                }

                // randomly sort the series (IAAF 20.3.4)
                // Note: this is mainly important when not-startsInLane, since the last heat always has the benefit to know the required lucky loser time
                // Fisher Yates shuffle
                for (let i = athletesPerSeries.length -1; i > 0; i--) {
                    let j = Math.floor(Math.random() * (i+1));
                    let k = athletesPerSeries[i];
                    athletesPerSeries[i] = athletesPerSeries[j];
                    athletesPerSeries[j] = k;
                }

                this.unassignedAthletesCreate = [];
            } else {
                // either bestFirst or bestLast
                let nRemaining = this.unassignedAthletesCreate.length;
                for (let i=0; i<this.numSeries; i++){
                    // calculate the number of athletes in this series
                    let n = Math.ceil(nRemaining/(this.numSeries-i));
                    // add this number of athletes to this series
                    athletesPerSeries[i] = this.unassignedAthletesCreate.splice(0,n);

                    nRemaining -= n;
                }

                // reverse the series if needed
                if (this.seriesAssignmentConfiguration.trackPerf.distributeAthletes == 'bestLast'){
                    athletesPerSeries.reverse();
                }
            }

            // distribute the persons within the series
            // differentiate startInLanes or not
            if (this.conf.startInLanes){
                // follow the set rule for the sortWithinHeat (arrow, IAAF, random, positive, negative) and the positioning of the series (left, centerLeft, centerRight, right)
                
                // loop over each series
                for (let i=0; i<this.numSeries; i++){

                    let sig = this.seriesObj[i].SSRs;

                    // if the lanes are to be distributed randomly, sort the athletes randomly within the series and then assign the lanes deterministically
                    if (this.seriesAssignmentConfiguration.trackPerf.sortWithinHeat == 'random'){
                        for (let ii = athletesPerSeries[i].length-1; ii > 0; ii--) {
                            let jj = Math.floor(Math.random() * (ii+1)); 
                            let k = athletesPerSeries[i][ii];
                            athletesPerSeries[i][ii] = athletesPerSeries[i][jj];
                            athletesPerSeries[i][jj] = k
                        }
                    }
                    
                    let remainingAthInSeries = athletesPerSeries[i].length;
                    // loop over each group
                    for (let j=0; j<this.conf.groupSize; j++){
                        let occupiedLanes = Math.min(this.conf.lanes, remainingAthInSeries);
                        let emptyLanes = this.conf.lanes - occupiedLanes;

                        // prepare how the athletes shall be centered over the heat, if there are empty lanes
                        let emptyLanesLeft = 0; 
                        if (emptyLanes>0){
                            if (this.seriesAssignmentConfiguration.trackPerf.positioningInSeries=='right'){
                                emptyLanesLeft = emptyLanes;
                            } else if (this.seriesAssignmentConfiguration.trackPerf.positioningInSeries=='centerRight'){
                                emptyLanesLeft = Math.ceil(emptyLanes/2);
                            } else if (this.seriesAssignmentConfiguration.trackPerf.positioningInSeries=='centerLeft'){
                                emptyLanesLeft = Math.floor(emptyLanes/2);
                            }
                        }

                        // if the lanes are to be distributed after IAAF or custom, shuffle the athletes within the different assignement groups
                        if (this.seriesAssignmentConfiguration.trackPerf.sortWithinHeat=='IAAF' || this.seriesAssignmentConfiguration.trackPerf.sortWithinHeat=='custom'){
                            let AG;
                            if (this.seriesAssignmentConfiguration.trackPerf.sortWithinHeat=='IAAF'){
                                AG = assignmentGroupsIAAF[occupiedLanes-1];
                            } else {
                                AG = customAssignmentGroups;
                            }
                            for (let shuffleGroup of AG){
                                // Math.min: do not shuffle empty lanes! 
                                for (let ii = Math.min(shuffleGroup[1], occupiedLanes-1)-shuffleGroup[0]; ii > 0; ii--) {
                                    let jj = Math.floor(Math.random() * (ii+1)); 
                                    let k = athletesPerSeries[i][ii+shuffleGroup[0]];
                                    athletesPerSeries[i][ii+shuffleGroup[0]] = athletesPerSeries[i][jj+shuffleGroup[0]];
                                    athletesPerSeries[i][jj+shuffleGroup[0]] = k
                                }
                            }
                        }

                        // assign the lanes
                        // for the arrow distribution, we need to keep track of the previous lane and the direction of assignment
                        let laneBefore = emptyLanesLeft + 1 + Math.ceil((occupiedLanes-1)/2); // this is actually the first lane, since this number +-0 stays the same
                        let assignmentDirection = (occupiedLanes % 2) == 0 ? 1 : -1; // this seems to be wrong, but is right, since it is swapped at the first lane
                        for (let k=0;k<occupiedLanes; k++ ){

                            let lane;
                            if (this.seriesAssignmentConfiguration.trackPerf.sortWithinHeat=='IAAF'){
                                // TODO: eventually we should not use the lane distribution for the occupied lanes, but for all available lanes and simply not use the emptyLanesLeft rule, but just neglect the last element; (see also "custom")
                                lane =  lanesIAAF[occupiedLanes-1][k] + emptyLanesLeft;
                            } else if (this.seriesAssignmentConfiguration.trackPerf.sortWithinHeat=='arrow'){
                                lane =  laneBefore + assignmentDirection*k;
                                laneBefore = lane;
                                assignmentDirection *= -1;
                            } else if (this.seriesAssignmentConfiguration.trackPerf.sortWithinHeat=='random'){
                                lane =  k + 1 + emptyLanesLeft;
                            } else if (this.seriesAssignmentConfiguration.trackPerf.sortWithinHeat=='positive'){
                                lane =  k + 1 + emptyLanesLeft;
                            } else if (this.seriesAssignmentConfiguration.trackPerf.sortWithinHeat=='negative'){
                                lane =  occupiedLanes + emptyLanesLeft - k;
                            } else if (this.seriesAssignmentConfiguration.trackPerf.sortWithinHeat=='custom'){
                                // if we use custom sort, we do not use the alignment on the track; we simply follow the given rule; Thus, we do not add emptyLanesLeft here
                                lane =  customLanes[k];
                            }

                            // search for the right SSR entry: 
                            let ssr = sig.find(ssr=>ssr.lane==lane && ssr.posInLane==j+1);
                            ssr.startsingroup = athletesPerSeries[i].shift();
                        }
                    }
                }

            } else {
                for (let s = 0; s<this.numSeries; s++){

                    // shuffle the athletes when not started in lane
                    for (let i = athletesPerSeries[s].length -1; i > 0; i--) {
                        let j = Math.floor(Math.random() * (i+1));
                        let k = athletesPerSeries[s][i];
                        athletesPerSeries[s][i] = athletesPerSeries[s][j];
                        athletesPerSeries[s][j] = k
                    }

                    let sig = this.seriesObj[s].SSRs;
                    let l = athletesPerSeries[s].length;
                    for (let j=0; j<l; j++){
                        sig.push({
                            lane:j+1,
                            position:j+1,
                            posInLane:1,
                            startsingroup: athletesPerSeries[s].shift(),
                        })
                    }
                }

            }


        }, // the function to call to assign the series. arguments and return stuff to be defined. Eventually there is nothing to be returned, but we simply bind the function to the  of vue this and the function shall/can access all properties available.
        initFunc: function(){
            this.seriesAssignmentConfiguration.trackPerf = {
                includeRV: true,
                includePB: false,
                includePerfPreviousRounds: true,
                includePerfOtherEvents: false, // TODO: whether or not to include the results from other events on the same competition
                distributeAthletes: 'bestFirst', // bestFirst, bestLast, IAAF
                sortWithinHeat: 'arrow', // IAAF, arrow, random, positive, negative
                sortWithinHeatCustom: '', // string for custom sorting
                positioningInSeries: 'centerRight', // left, centerLeft, centerRight, right; prefer not to use the inner lane by default, but center the athletes
            }
        }, // function called on initialization of the series assignment tool; shall also add the required properties to the seriesAssignmentConfiguration object within a "personal" object! 
        baseDisciplineTypes: [3], // the baseDisciplines-types where this series assignment opiton shall be present (probably only needed for track disciplines)
    }

<% } %>