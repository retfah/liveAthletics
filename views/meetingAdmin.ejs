<script type="text/javascript">

    // connect to rSideChannel and rMeeting
    
    class vuMeeting extends roomClientVue{
        
        constructor(vue, meetingShortname){
            // parent constructor: initializes the room
            //(roomName, writing, storeInfos, path, className, datasetName='')
            super('meeting@' + meetingShortname, true, true, '/static/rMeetingClient.js', 'rMeetingClient', '')
    
            // needed to call things in the vue class
            this.vue = vue;
        }
    
        /**
         * called when a a writing ticket is stored or deleted
         */
        onWritingTicketChange(){
            if (this.room.writingTicketID){
                //this.vueServerAdmin.readOnly = false;
            } else {
                //this.vueServerAdmin.readOnly = true;
            }
        }
    
        onChange(){
            //this.vue.$forceUpdate();
        }
        
        afterFullreload(){
            // set the changed data-property as data of the vue-instance
            this.vue.meeting = this.room.data; // this will actually store a proxy of the data!
    
            // backtransfer the "proxied" data from the vue, so that changing data in the room runs through the proxy
            this.room.data = this.vue.meeting;
        }
        
        dataArrived(){
            // raised as soon as the room has its data stored for the first time
            this.vue.meeting = this.room.data;
        
            // backtransfer the "proxied" data from the vue, so that changing data in the room runs through the proxy
            this.room.data = this.vue.meeting;
    
        }
    }
    
    var vueMeetingAdmin={};
    function startupMeetingAdmin(){
    
        let vueAppConfig = {
            data(){
                return {
                    meeting:{},
                    mode: 0, // 0= show data, 1= changing data, 2= updating data on the server
                    meetingWorkCopy: {}, // a copy of the meeting to be used during modifications
                    infoVisible: false,
                    infoTitle: '',
                    infoContent: '',
                    overlay: undefined,
                    // NEW approach: only store a list of all module names, of which one module can be selected
                    // when the selected module is changed, the data gets reset to the default data of the newly selected module
                    modules:[{name:'swiss-athletics', defaultData:{all:'data that shall be in moduleData as a default', username:'', password: '', overlay:undefined, errConnection:false, errCredentials:false, errGeneral:false, lastUpdate:'', errNoMeetings:false, errCode:0, errMsg:'', updateNotes:'', updateCount:0, failCount:0, newCount:0, importNotes:'', deleteAthletes:0, competitions:[]}}, {name:'world-athletics', defaultData:{}}],
                    selectedModuleIndex:-1,
                    moduleData:{}, // will be filled by the selected module
                }
            },
            methods:{
                baseSuiGetCompetitions: function(evt){

                    // prevent that the form is "submitted" (which would simply reload the page).
                    evt.preventDefault();

                    const opts = {
                        username: this.moduleData.username,
                        password: this.moduleData.password,
                    }

                    // hide all errors at beginning
                    this.moduleData.errConnection = false;
                    this.moduleData.errNoMeetings = false;
                    this.moduleData.errCredentials = false;

                    // the success callback is always called, even when there was an error
                    const succFunc = (data, defaultFunc)=>{
                        // there is no default function for this call

                        if (data.err==0){
                            // could gather a list of competitions:
                            this.moduleData.competitions = data.competitions;

                            // make sure the errors are surely hidden
                            this.moduleData.errConnection = false;
                            this.moduleData.errNoMeetings = false;
                            this.moduleData.errCredentials = false;

                            this.moduleData.overlay = 'importSUIStep2';
                        } else if (data.err==1){
                            this.moduleData.errCredentials = false;
                            this.moduleData.errConnection = false;
                            this.moduleData.errNoMeetings = true;
                        } else if (data.err==2){
                            this.moduleData.errCredentials = false;
                            this.moduleData.errConnection = true;
                            this.moduleData.errNoMeetings = false;
                        } else if (data.err==3){
                            this.moduleData.errCredentials = true;
                            this.moduleData.errConnection = false;
                            this.moduleData.errNoMeetings = false;
                        }

                    }

                    rMeet.room.baseFunctionInit('SUI', 'getCompetitions', opts, succFunc);
                },
                baseSuiUpdateBaseDataInit: function(evt){
                    // prevent that the form is "submitted" (which would simply reload the page).
                    evt.preventDefault();

                    // the success callback is always called, even when there was an error
                    const succFunc = (data, defaultFunc)=>{
                        // there is no default function for this call
                        if (data.lastUpdate){
                            this.moduleData.lastUpdate = data.lastUpdate.substr(0,10);
                        } else {
                            this.moduleData.lastUpdate = '-';
                        }
                    }

                    // reset previous errors
                    this.moduleData.updateNotes = '';
                    this.moduleData.errConnection = false;
                    this.moduleData.errNoMeetings = false;
                    this.moduleData.errCredentials = false;
                    this.moduleData.errGeneral = false;

                    rMeet.room.baseFunctionInit('SUI', 'baseLastUpdate', null, succFunc)
                    
                    // show the overlay:
                    this.moduleData.overlay = "importServiceBaseUpdate1";
                },
                baseSuiImportCompetitionWindow: function(evt){
                    evt.preventDefault();

                    this.moduleData.competitions = [];

                    // make sure the errors are surely hidden
                    this.moduleData.errConnection = false;
                    this.moduleData.errNoMeetings = false;
                    this.moduleData.errCredentials = false;

                    // show the overlay:
                    this.moduleData.overlay = "importSUIStep1";
                },
                baseSuiUpdateBaseData: function(evt){
                    // prevent that the form is "submitted" (which would simply reload the page).
                    evt.preventDefault();

                    const opts = {
                        username: this.moduleData.username,
                        password: this.moduleData.password,
                    };

                    // reset previous errors
                    this.moduleData.updateNotes = '';
                    this.moduleData.errConnection = false;
                    this.moduleData.errNoMeetings = false;
                    this.moduleData.errCredentials = false;
                    this.moduleData.errGeneral = false;

                    // the success callback is always called, even when there was an error
                    const succFunc = (data, defaultFunc)=>{
                        // there is no default function for this call

                        if (data.err==0){
                            // could gather a list of competitions:
                            this.moduleData.updateNotes = data.notes;

                            // make sure the errors are surely hidden
                            this.moduleData.errConnection = false;
                            this.moduleData.errNoMeetings = false;
                            this.moduleData.errCredentials = false;
                            this.moduleData.errGeneral = false;

                            this.moduleData.overlay = 'importServiceBaseUpdate2';
                        } else if (data.err==2){
                            this.moduleData.errCredentials = false;
                            this.moduleData.errConnection = true;
                            this.moduleData.errGeneral = false;
                        } else if (data.err==3){
                            this.moduleData.errCredentials = true;
                            this.moduleData.errConnection = false;
                            this.moduleData.errGeneral = false;
                        }

                    }

                    const errFunc = (code, msg) =>{
                        this.moduleData.errCode = code;
                        this.moduleData.errMsg = msg;
                        this.moduleData.errGeneral = true;
                    }

                    rMeet.room.baseFunctionInit('SUI', 'baseUpdate', opts, succFunc, errFunc, 300); //timeout after 300s

                },
                baseSuiUploadResults: function(evt){

                    // prevent "submit", which would reload
                    evt.preventDefault();

                    let opts = {
                        username: this.moduleData.username,
                        password: this.moduleData.password,
                    };
                    const succFunc = ()=>{
                        alert('successful upload');
                        this.moduleData.overlay = undefined;
                    };
                    const errFunc = (code, message)=>{
                        alert(`upload failed ${code} ${message}`);
                    };

                    rMeet.room.baseFunctionInit('SUI', 'uploadResults', opts, succFunc, errFunc)
                },
                baseSuiImportCompetition: function(identifier){

                    const opts = {
                        username: this.moduleData.username,
                        password: this.moduleData.password,
                        identifier
                    };

                    // the success callback is always called, even when there was an error
                    const succFunc = (data, defaultFunc)=>{
                        // there is no default function for this call

                        if (data.err==0){
                            // imported successfully

                            // show some notes from the import process
                            this.moduleData.importNotes = data.notes;
                            this.moduleData.updateCount = data.updateCount;
                            this.moduleData.failCount = data.failCount;
                            this.moduleData.newCount = data.newCount;

                            // make sure the errors are surely hidden
                            this.moduleData.errCredentials = false;
                            this.moduleData.errConnection = false;
                            this.moduleData.errNoMeetings = false;

                            this.moduleData.overlay = 'importSUIStep3';

                        } else if (data.err==1){
                            this.moduleData.errCredentials = false;
                            this.moduleData.errConnection = false;
                            this.moduleData.errNoMeetings = true;
                        } else if (data.err==2){
                            this.moduleData.errCredentials = false;
                            this.moduleData.errConnection = true;
                            this.moduleData.errNoMeetings = false;
                        } else if (data.err==3){
                            this.moduleData.errCredentials = true;
                            this.moduleData.errConnection = false;
                            this.moduleData.errNoMeetings = false;
                        }

                    }

                    rMeet.room.baseFunctionInit('SUI', 'importCompetition', opts, succFunc)
                },
                dateFromChanged: function(){
                    // if the dateFrom changes, set the timezone for this date
                    this.meetingWorkCopy.timezoneOffset = -new Date(this.meetingWorkCopy.dateFromFormatted).getTimezoneOffset(); // negatove since the timezoneOffset is considered as "what to add/subtract from the local time to get to UTC"
                },
                abortMeetingChange: function(){
                    // reset the data
                    this.meetingWorkCopy = copyObject(this.meeting)
                    
                    this.meetingWorkCopy.dateFromFormatted = this.meetingWorkCopy.dateFrom.substr(0, 10);
                        this.meetingWorkCopy.dateToFormatted = this.meetingWorkCopy.dateTo.substr(0, 10);
                    
                    this.mode = 0;
                },
                saveMeetingChange: function(){

                    // create a copy of the data and remove the temporary, local data
                    let data = copyObject(this.meetingWorkCopy);
                    data.dateTo = new Date(data.dateToFormatted); // this approach makes the hour zero at UTC, as we need it
                    data.dateFrom = new Date(data.dateFromFormatted); 
                    delete data.dateFromFormatted;
                    delete data.dateToFormatted;

                    // send the change
                    rMeet.room.updateMeetingInit(data, (data, defaultFunc)=>{
                        // first call the default function, which adds the data to the local data
                        defaultFunc(data);
                        // then set the mode to 0
                        this.mode = 0; 
                    }, ()=>{
                        // resets the data in meetingWorkCopy on error
                        this.abortMeetingChange();
                    });

                    this.mode = 2;
                },
                renewStartgroups: function(){
                    rMeet.room.renewStartgroupsInit();
                }
            },
            computed:{
                selectedModuleName:function(){
                    if (this.selectedModuleIndex>=0){
                        return this.modules[this.selectedModuleIndex].name;
                    } else {
                        return '';
                    }
                }
            },
            watch:{
                selectedModuleIndex:function(){
                    // reset to the default data
                    this.moduleData = JSON.parse(JSON.stringify(this.modules[this.selectedModuleIndex].defaultData));

                },
                meeting:{
                    deep:true,
                    handler: function(){
                        // as soon as the meeting is changed, we know that the answer of the server arrived and thus we can reset the mode
                        this.mode = 0;
                        this.meetingWorkCopy = copyObject(this.meeting);
                        /*let dFrom = new Date(this.meetingWorkCopy.dateFrom);
                        let dTo = new Date(this.meetingWorkCopy.dTo);
                        this.meetingWorkCopy.dateFromFormatted = `${dFrom.getUTCFullYear()}-${dFrom.getUTCMonth()+1}-${dFrom.getUTCDate()}`
                        this.meetingWorkCopy.dateToFormatted = `${dTo.getUTCFullYear()}-${dTo.getUTCMonth()+1}-${dTo.getUTCDate()}`*/
                        this.meetingWorkCopy.dateFromFormatted = this.meetingWorkCopy.dateFrom.substr(0, 10);
                        this.meetingWorkCopy.dateToFormatted = this.meetingWorkCopy.dateTo.substr(0, 10);
                    }
                }
            },  
            components:{
                // instead of globally adding it with vueAthletes.component(...), we can also do that locally
                'v-table':VTable,
                'v-th': VTh,
                'v-tr':VTr,
                //'v-mask': VueMask.VueMaskPlugin,
            }
        }

        vueMeetingAdmin = Vue.createApp(vueAppConfig).mount('#vueMeetingAdmin');

    
        let ms = getMeetingShortname();
        var rMeet = new vuMeeting(vueMeetingAdmin, ms); 

    }
</script>
<div id="vueMeetingAdmin">

    <h2><%= __("Competition settings") %></h2>
    <button type="button" class="btn" v-if="mode==0" v-on:click="mode=1"><%= __("Modify") %></button>
    <form class="verticalForm">
        <label>
            <%= __("Meeting name") %>: 
            <input type="text" v-model="meetingWorkCopy.name" maxlength="100" v-bind:disabled="mode!=1">
        </label>
        <label>
            <%= __("Organizer") %>: 
            <input type="text" v-model="meetingWorkCopy.organizer" maxlength="100" v-bind:disabled="mode!=1">
        </label>
        <label>
            <%= __("Location") %>: 
            <input type="text" v-model="meetingWorkCopy.location" maxlength="100" v-bind:disabled="mode!=1">
        </label>
        <label>
            <%= __("Stadium") %>: 
            <input type="text" v-model="meetingWorkCopy.stadium" maxlength="100" v-bind:disabled="mode!=1">
        </label>
        <label>
            <%= __("Date from") %>:
            <input v-model="meetingWorkCopy.dateFromFormatted" type="date" v-bind:disabled="mode!=1">
        </label>
        <label>
            <%= __("Date to") %>:
            <input v-model="meetingWorkCopy.dateToFormatted" type="date" v-bind:disabled="mode!=1">
        </label>
        <label>
            <%= __("Timezone offset (in min)") %>:
            <input v-model.number="meetingWorkCopy.timezoneOffset" type="number" v-bind:disabled="mode!=1" min="-780" max="900"> <!-- time zones are not perfectly from -12 to +12, but go up to +14 and might include daylight saving time as well-->
        </label>
        <label>
            <%= __("Indoor") %>:
            <input v-model="meetingWorkCopy.isIndoor" type="checkbox" v-bind:disabled="mode!=1">
        </label>
        <label>
            <%= __("Fee model") %>:
            <select v-model="meetingWorkCopy.feeModel" v-bind:disabled="mode!=1">
                <option value=null><%= __('None') %></option>
                <option value='swiss'><%= __('Swiss') %></option>
                <!-- TODO: make the list being completed from a list of modules, similar to series assignements -->
            </select>
        </label>
        TODO: add model specific options!
        <!--<label>
            <%= __("Import/Export model") %>:
            <select v-model="meetingWorkCopy.importExportModel" v-bind:disabled="mode!=1">
                <option value=null><%= __('None') %></option>
                <option value='swiss'><%= __('Swiss') %></option>
            </select>
        </label>
        TODO: add model specific options!--><br>
        <%= __("Renew inscription information (name, birthdate, bib, PB, SB, ...) in all contests") %>:
        <button type="button" class="btn" v-on:click="renewStartgroups($event)"><%= __("Renew") %></button>
    

    </form>
    <h1><%= __("Data exchange (import, export, base data, ...)") %></h1>
    <form class="verticalForm">
        <label>
            <%= __("Select the data exchange module") %>
            <select v-model="selectedModuleIndex" >
                <option v-for="(m,i) in modules" v-bind:value=i>{{m.name}}</option>
            </select>
        </label>
    </form>
    
    <!--after here, all stuff should be provided by the respective module -->

    <!-- put all swiss-athletics stuff after here-->
    <div v-if="selectedModuleName=='swiss-athletics'">

        <h3><%= __("Update base data") %></h3>
        <!-- TODO: eventually move this to the admin page -->
        <button type="button" class="btn" v-on:click="baseSuiUpdateBaseDataInit($event)"><%= __("Initialize update") %></button><br>

        <h3><%= __("Import competition from") %> swiss-athletics</h3>
        <button type="button" class="btn" v-on:click="baseSuiImportCompetitionWindow($event)"><%= __("Initialize import") %></button>

        <h3><%= __("Export to") %> swiss-athletics</h3>
        <button type="button" class="btn" v-on:click="moduleData.overlay='uploadResults'"><%= __("Upload results") %></button><br>

        <div class="overlay" v-bind:class="{shown: moduleData.overlay=='uploadResults'}">
            <div class="overlayContainer">
                <form class="verticalForm">
                    <label>
                        <%= __("Username") %>
                        <input type="text" v-model="moduleData.username" >
                    </label>
                    <label>
                        <%= __("Password") %>
                        <input type="password" v-model="moduleData.password" >
                    </label>
                    <button type="submit" class="btn" v-on:click="baseSuiUploadResults($event)"><%= __("Upload results") %></button>
                    <button type="button"class="btn btnRed" v-on:click="moduleData.overlay=undefined"><%= __("Abort") %></button>
                </form>
            </div>
        </div>
        <div class="overlay" v-bind:class="{shown: moduleData.overlay=='importServiceBaseUpdate1'}">
            <div class="overlayContainer">
                <form class="verticalForm">
                    <%= __("The last update was done on") %>: {{moduleData.lastUpdate}} <br>
                    <%= __("Update the base data. This can easily take some minutes. Please be patient.") %>
                    <label>
                        <%= __("Username") %>
                        <input type="text" v-model="moduleData.username" >
                    </label>
                    <label>
                        <%= __("Password") %>
                        <input type="password" v-model="moduleData.password" >
                    </label>
                    <div v-if="moduleData.errConnection">
                        <%= __("Connection error: Could not conncet to the server.") %>
                    </div>
                    <div v-if="moduleData.errCredentials" style="color: red;">
                        <%= __("The credentials (username, password) are not correct.") %>
                    </div>
                    <div v-if="moduleData.errGeneral">
                        <%= __("A general error (code {{moduleData.errCode}} occured: {{moduleData.errMsg}})") %>
                    </div>
                    <button type="submit" class="btn" v-on:click="baseSuiUpdateBaseData($event)"><%= __("Update") %></button>
                    <button type="button"class="btn btnRed" v-on:click="moduleData.overlay=undefined"><%= __("Abort") %></button>
                </form>    
            </div>
        </div>
        <div class="overlay" v-bind:class="{shown: moduleData.overlay=='importServiceBaseUpdate2'}">
            <div class="overlayContainer">
                <form class="verticalForm">
                    <%= __("Update finished.") %> <%= __("Remarks") %>: 
                    <div v-for="note in moduleData.updateNotes">{{note}}</div>
                    
                    <button type="button"class="btn btnGreen" v-on:click="moduleData.overlay=undefined"><%= __("Finished") %></button>
                </form>    
            </div>
        </div>
        <div class="overlay" v-bind:class="{shown: moduleData.overlay=='importSUIStep1'}">
            <div class="overlayContainer">
                <form class="verticalForm">
                    <%= __("Get a list of the available meetings") %>
                    <label>
                        <%= __("Username") %>
                        <input type="text" v-model="moduleData.username" >
                    </label>
                    <label>
                        <%= __("Password") %>
                        <input type="password" v-model="moduleData.password" >
                    </label>
                    <div v-if="moduleData.errConnection">
                        <%= __("Connection error: Could not conncet to the server.") %>
                    </div>
                    <div v-if="moduleData.errCredentials" style="color: red;">
                        <%= __("The credentials (username, password) are not correct.") %>
                    </div>
                    <div v-if="moduleData.errNoMeetings">
                        <%= __("There are no meetings associated with this account.") %>
                    </div>
                    <button type="submit" class="btn" v-on:click="baseSuiGetCompetitions($event)">Anmelden</button>
                    <button type="button"class="btn btnRed" v-on:click="moduleData.overlay=undefined"><%= __("Abort") %></button>
                </form>    
            </div>
        </div>
        <div class="overlay" v-bind:class="{shown: moduleData.overlay=='importSUIStep2'}">
            <div class="overlayContainer">
                <form class="verticalForm">
                    <h4><%= __("Choose the meeting to import") %></h4>
                    <%= __("Username and password are unchanged") %>
                    <label>
                        <%= __("Username") %>
                        <input type="text" v-model="moduleData.username" >
                    </label>
                    <label>
                        <%= __("Password") %>
                        <input type="password" v-model="moduleData.password" >
                    </label>
                    <%= __("Delete registrations of this national body before (re-)importing the competition:") %><br>
                    <input type="radio" v-model="moduleData.deleteAthletes" name="group1" id="r1" value="0" checked/>
                    <label for="r1" style="display: inline;"><%= __("Keep all current registrations") %></label><br>
                    <input type="radio" v-model="moduleData.deleteAthletes" name="group1" id="r2" value="1" />
                    <label for="r2" style="display: inline;"><%= __("Delete starts, keep athletes") %></label><br>
                    <input type="radio" v-model="moduleData.deleteAthletes" name="group1" id="r3" value="2" />
                    <label for="r3" style="display: inline;"><%= __("Delete starts and athletes") %></label><br>
                    <table class="selectTable">
                        <template v-for="(m,i) in moduleData.competitions">
                            <tr class="clickable" v-on:click="baseSuiImportCompetition(m.identifier)">
                                <td>{{m.identifier}}</td>
                                <td>{{m.name}}</td>
                                <td>{{new Date(m.date).toLocaleDateString()}}</td>
                            </tr>
                        </template>
                    </table>
    
                    <div v-if="moduleData.errConnection">
                        <%= __("Connection error: Could not conncet to the server.") %>
                    </div>
                    <div v-if="moduleData.errCredentials" style="color: red;">
                        <%= __("The credentials (username, password) are not correct.") %>
                    </div>
                    <div v-if="moduleData.errNoMeetings">
                        <%= __("This meeting does not exist") %>
                    </div>
                    <button type="button"class="btn btnRed" v-on:click="moduleData.overlay=undefined"><%= __("Abort") %></button>
                </form>    
            </div>
        </div>
        <div class="overlay" v-bind:class="{shown: moduleData.overlay=='importSUIStep3'}">
            <div class="overlayContainer">
                <form class="verticalForm">
                    <h3><%= __("Disciplines") %></h3>
                    <div><%= __("Disciplines added") %>: {{moduleData.newCount}}</div>
                    <div><%= __("Disciplines updated") %>: {{moduleData.updateCount}}</div>
                    <div><%= __("Disciplines with errors") %>: {{moduleData.failCount}}</div>
                    <h3><%= __("Notes") %></h3>
                    <div v-for="note in moduleData.importNotes">{{note}}</div>
                    <button type="button"class="btn btnGreen" v-on:click="moduleData.overlay=undefined"><%= __("Finished") %></button>
                </form>    
            </div>
        </div>
    </div>

    




    <div class="overlay" v-bind:class="{shown: mode==1}">
        <div class="overlayContainer">
            <button type="button"class="btn btnRed" v-on:click="abortMeetingChange"><%= __("Abort") %></button>
            <button type="button" class="btn btnGreen" v-on:click="saveMeetingChange"><%= __("Save") %></button>
            <form class="verticalForm">
                <label>
                    <%= __("Meeting name") %>: 
                    <input type="text" v-model="meetingWorkCopy.name" maxlength="100" v-bind:disabled="mode!=1">
                </label>
                <label>
                    <%= __("Organizer") %>: 
                    <input type="text" v-model="meetingWorkCopy.organizer" maxlength="100" v-bind:disabled="mode!=1">
                </label>
                <label>
                    <%= __("Location") %>: 
                    <input type="text" v-model="meetingWorkCopy.location" maxlength="100" v-bind:disabled="mode!=1">
                </label>
                <label>
                    <%= __("Stadium") %>: 
                    <input type="text" v-model="meetingWorkCopy.stadium" maxlength="100" v-bind:disabled="mode!=1">
                </label>
                <label>
                    <%= __("Date from") %>:
                    <input v-model="meetingWorkCopy.dateFromFormatted" type="date" v-bind:disabled="mode!=1" v-on:change="dateFromChanged">
                </label>
                <label>
                    <%= __("Date to") %>:
                    <input v-model="meetingWorkCopy.dateToFormatted" type="date" v-bind:disabled="mode!=1">
                </label>
                <label>
                    <%= __("Timezone offset (in min)") %>:
                    <input v-model.number="meetingWorkCopy.timezoneOffset" type="number" v-bind:disabled="mode!=1" min="-780" max="900"> <!-- time zones are not perfectly from -12 to +12, but go up to +14 and might include daylight saving time as well-->
                </label>
                <label>
                    <%= __("Indoor") %>:
                    <input v-model="meetingWorkCopy.isIndoor" type="checkbox" v-bind:disabled="mode!=1">
                </label>
                <label>
                    <%= __("Fee model") %>:
                    <select v-model="meetingWorkCopy.feeModel" v-bind:disabled="mode!=1">
                        <option value=null><%= __('None') %></option>
                        <option value='swiss'><%= __('Swiss') %></option>
                        <!-- TODO: make the list b eing completed from a list of modules, similar to series assignements -->
                    </select>
                </label>
                TODO: add model specific options!
                <!--<label>
                    <%= __("Import/Export model") %>:
                    <select v-model="meetingWorkCopy.importExportModel" v-bind:disabled="mode!=1">
                        <option value=null><%= __('None') %></option>
                        <option value='swiss'><%= __('Swiss') %></option>
                    </select>
                </label>
                TODO: add model specific options! -->
            </form>
        </div>
    </div>

    <div id="overlay" v-on:click="infoVisible=false" v-bind:class="{shown: infoVisible}">
        <!-- overlay used for displaying general information -->
        <div id="overlayContainer">
            <div id="overlayTitle"><b>{{infoTitle}}</b></div>
            <div id="overlayContent">{{infoContent}}</div>
        </div>
    </div>
</div>

<!-- TODO: eventually add here another insert for side channels!-->