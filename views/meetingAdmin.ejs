<script type="text/javascript">

    // connect to rSideChannel and rMeeting
    
    class vuMeeting extends roomClientVue{
        
        constructor(vue, meetingShortname){
            // parent constructor: initializes the room
            //(roomName, writing, storeInfos, path, className, datasetName='')
            super('meeting@' + meetingShortname, true, true, '/static/rMeetingClient.js', 'rMeetingClient', '')
    
            // needed to call things in the vue class
            this.vue = vue;
        }
    
        /**
         * called when a a writing ticket is stored or deleted
         */
        onWritingTicketChange(){
            if (this.room.writingTicketID){
                //this.vueServerAdmin.readOnly = false;
            } else {
                //this.vueServerAdmin.readOnly = true;
            }
        }
    
        onChange(){
            //this.vue.$forceUpdate();
        }
        
        afterFullreload(){
            // set the changed data-property as data of the vue-instance
            this.vue.meeting = this.room.data; // this will actually store a proxy of the data!
    
            // backtransfer the "proxied" data from the vue, so that changing data in the room runs through the proxy
            this.room.data = this.vue.meeting;
        }
        
        dataArrived(){
            // raised as soon as the room has its data stored for the first time
            this.vue.meeting = this.room.data;
        
            // backtransfer the "proxied" data from the vue, so that changing data in the room runs through the proxy
            this.room.data = this.vue.meeting;
    
        }
    }
    
    var vueMeetingAdmin={};
    function startupMeetingAdmin(){
    
        let vueAppConfig = {
            data(){
                return {
                    meeting:{},
                    mode: 0, // 0= show data, 1= changing data, 2= updating data on the server
                    meetingWorkCopy: {}, // a copy of the meeting to be used during modifications
                    infoVisible: false,
                    infoTitle: '',
                    infoContent: '',
                    overlay: undefined,
                    importServices:['SUI', 'FRA'],
                    exportServices:['SUI', 'World athletics'],
                    selectedImportService:0,
                    importServiceData:{},
                    importServiceOverlayname: ['importSUIStep1', 'importSUIStep1'],
                }
            },
            methods:{
                baseSuiGetCompetitions: function(evt){

                    // prevent that the form is "submitted" (which would simply reload the page).
                    evt.preventDefault();

                    const req = {
                        baseName: this.importServices[this.selectedImportService],
                        opts: {
                            username: this.importServiceData.username,
                            password: this.importServiceData.password,
                        }
                    }

                    // the success callback is always called, even when there was an error
                    const succFunc = (data, defaultFunc)=>{
                        // there is no default function for this call

                        if (data.err==0){
                            // could gather a list of competitions:
                            this.importServiceData.competitions = data.competitions;

                            // make sure the errors are surely hidden
                            this.importServiceData.errConnection = false;
                            this.importServiceData.errNoMeetings = false;
                            this.importServiceData.errCredentials = false;

                            this.overlay = 'importSUIStep2';
                        } else if (data.err==1){
                            this.importServiceData.errCredentials = false;
                            this.importServiceData.errConnection = false;
                            this.importServiceData.errNoMeetings = true;
                        } else if (data.err==2){
                            this.importServiceData.errCredentials = false;
                            this.importServiceData.errConnection = true;
                            this.importServiceData.errNoMeetings = false;
                        } else if (data.err==3){
                            this.importServiceData.errCredentials = true;
                            this.importServiceData.errConnection = false;
                            this.importServiceData.errNoMeetings = false;
                        }

                    }

                    rMeet.room.baseGetCompetitionsInit(req, succFunc);
                },
                baseSuiUpdateBaseDataInit: function(evt){
                    // prevent that the form is "submitted" (which would simply reload the page).
                    evt.preventDefault();

                    // get the date of the last update
                    const req = {
                        baseName: this.importServices[this.selectedImportService],
                    }

                    // the success callback is always called, even when there was an error
                    const succFunc = (data, defaultFunc)=>{
                        // there is no default function for this call

                        if (data.err==0){
                            this.importServiceData.lastUpdate = data.lastUpdate.substr(0,10);
                        } 

                    }

                    rMeet.room.baseGetLastUpdateInit(req, succFunc);
                    
                    // show the overlay:
                    this.overlay = "importServiceBaseUpdate1";
                },
                baseSuiUpdateBaseData: function(evt){
                    // prevent that the form is "submitted" (which would simply reload the page).
                    evt.preventDefault();

                    const req = {
                        baseName: this.importServices[this.selectedImportService],
                        opts: {
                            username: this.importServiceData.username,
                            password: this.importServiceData.password,
                        }
                    }

                    // the success callback is always called, even when there was an error
                    const succFunc = (data, defaultFunc)=>{
                        // there is no default function for this call

                        if (data.err==0){
                            // could gather a list of competitions:
                            this.importServiceData.updateNotes = data.notes;

                            // make sure the errors are surely hidden
                            this.importServiceData.errConnection = false;
                            this.importServiceData.errNoMeetings = false;
                            this.importServiceData.errCredentials = false;
                            this.importServiceData.errGeneral = false;

                            this.overlay = 'importServiceBaseUpdate2';
                        } else if (data.err==2){
                            this.importServiceData.errCredentials = false;
                            this.importServiceData.errConnection = true;
                            this.importServiceData.errGeneral = false;
                        } else if (data.err==3){
                            this.importServiceData.errCredentials = true;
                            this.importServiceData.errConnection = false;
                            this.importServiceData.errGeneral = false;
                        }

                    }

                    const errFunc = (code, msg) =>{
                        this.importServiceData.errCode = code;
                        this.importServiceData.errMsg = msg;
                        this.importServiceData.errGeneral = true;
                    }

                    rMeet.room.baseUpdateInit(req, succFunc, errFunc);

                },
                baseSuiImportCompetition: function(identifier){
                    const req = {
                        baseName: this.importServices[this.selectedImportService],
                        identifier: identifier,
                        opts: {
                            username: this.importServiceData.username,
                            password: this.importServiceData.password,
                        }
                    }

                    // the success callback is always called, even when there was an error
                    const succFunc = (data, defaultFunc)=>{
                        // there is no default function for this call

                        if (data.err==0){
                            // imported successfully

                            // show some notes from the import process
                            this.importServiceData.importNotes = data.notes;
                            this.importServiceData.updateCount = data.updateCount;
                            this.importServiceData.failCount = data.failCount;
                            this.importServiceData.newCount = data.newCount;

                            // make sure the errors are surely hidden
                            this.importServiceData.errCredentials = false;
                            this.importServiceData.errConnection = false;
                            this.importServiceData.errNoMeetings = false;

                            this.overlay = 'importSUIStep3';

                        } else if (data.err==1){
                            this.importServiceData.errCredentials = false;
                            this.importServiceData.errConnection = false;
                            this.importServiceData.errNoMeetings = true;
                        } else if (data.err==2){
                            this.importServiceData.errCredentials = false;
                            this.importServiceData.errConnection = true;
                            this.importServiceData.errNoMeetings = false;
                        } else if (data.err==3){
                            this.importServiceData.errCredentials = true;
                            this.importServiceData.errConnection = false;
                            this.importServiceData.errNoMeetings = false;
                        }

                    }

                    rMeet.room.baseImportCompetitionInit(req, succFunc);
                },
                dateFromChanged: function(){
                    // if the dateFrom changes, set the timezone for this date
                    this.meetingWorkCopy.timezoneOffset = -new Date(this.meetingWorkCopy.dateFromFormatted).getTimezoneOffset(); // negatove since the timezoneOffset is considered as "what to add/subtract from the local time to get to UTC"
                },
                abortMeetingChange: function(){
                    // reset the data
                    this.meetingWorkCopy = copyObject(this.meeting)
                    
                    this.meetingWorkCopy.dateFromFormatted = this.meetingWorkCopy.dateFrom.substr(0, 10);
                        this.meetingWorkCopy.dateToFormatted = this.meetingWorkCopy.dateTo.substr(0, 10);
                    
                    this.mode = 0;
                },
                saveMeetingChange: function(){

                    // create a copy of the data and remove the temporary, local data
                    let data = copyObject(this.meetingWorkCopy);
                    data.dateTo = new Date(data.dateToFormatted); // this approach makes the hour zero at UTC, as we need it
                    data.dateFrom = new Date(data.dateFromFormatted); 
                    delete data.dateFromFormatted;
                    delete data.dateToFormatted;

                    // send the change
                    rMeet.room.updateMeetingInit(data, (data, defaultFunc)=>{
                        // first call the default function, which adds the data to the local data
                        defaultFunc(data);
                        // then set the mode to 0
                        this.mode = 0; 
                    });

                    this.mode = 2;
                },
                renewStartgroups: function(){
                    rMeet.room.renewStartgroupsInit();
                }
            },
            watch:{
                meeting:{
                    deep:true,
                    handler: function(){
                        // as soon as the meeting is changed, we know that the answer of the server arrived and thus we can reset the mode
                        this.mode = 0;
                        this.meetingWorkCopy = copyObject(this.meeting);
                        /*let dFrom = new Date(this.meetingWorkCopy.dateFrom);
                        let dTo = new Date(this.meetingWorkCopy.dTo);
                        this.meetingWorkCopy.dateFromFormatted = `${dFrom.getUTCFullYear()}-${dFrom.getUTCMonth()+1}-${dFrom.getUTCDate()}`
                        this.meetingWorkCopy.dateToFormatted = `${dTo.getUTCFullYear()}-${dTo.getUTCMonth()+1}-${dTo.getUTCDate()}`*/
                        this.meetingWorkCopy.dateFromFormatted = this.meetingWorkCopy.dateFrom.substr(0, 10);
                        this.meetingWorkCopy.dateToFormatted = this.meetingWorkCopy.dateTo.substr(0, 10);
                    }
                }
            },  
            components:{
                // instead of globally adding it with vueAthletes.component(...), we can also do that locally
                'v-table':VTable,
                'v-th': VTh,
                'v-tr':VTr,
                //'v-mask': VueMask.VueMaskPlugin,
            }
        }

        vueMeetingAdmin = Vue.createApp(vueAppConfig).mount('#vueMeetingAdmin');

    
        let ms = getMeetingShortname();
        var rMeet = new vuMeeting(vueMeetingAdmin, ms); 

    }
</script>
<div id="vueMeetingAdmin">

    <h2><%= __("Competition settings") %></h2>
    <button type="button" class="btn" v-if="mode==0" v-on:click="mode=1"><%= __("Modify") %></button>
    <form class="verticalForm">
        <label>
            <%= __("Meeting name") %>: 
            <input type="text" v-model="meetingWorkCopy.name" maxlength="100" v-bind:disabled="mode!=1">
        </label>
        <label>
            <%= __("Organizer") %>: 
            <input type="text" v-model="meetingWorkCopy.organizer" maxlength="100" v-bind:disabled="mode!=1">
        </label>
        <label>
            <%= __("Location") %>: 
            <input type="text" v-model="meetingWorkCopy.location" maxlength="100" v-bind:disabled="mode!=1">
        </label>
        <label>
            <%= __("Stadium") %>: 
            <input type="text" v-model="meetingWorkCopy.stadium" maxlength="100" v-bind:disabled="mode!=1">
        </label>
        <label>
            <%= __("Date from") %>:
            <input v-model="meetingWorkCopy.dateFromFormatted" type="date" v-bind:disabled="mode!=1">
        </label>
        <label>
            <%= __("Date to") %>:
            <input v-model="meetingWorkCopy.dateToFormatted" type="date" v-bind:disabled="mode!=1">
        </label>
        <label>
            <%= __("Timezone offset (in min)") %>:
            <input v-model.number="meetingWorkCopy.timezoneOffset" type="number" v-bind:disabled="mode!=1" min="-780" max="900"> <!-- time zones are not perfectly from -12 to +12, but go up to +14 and might include daylight saving time as well-->
        </label>
        <label>
            <%= __("Indoor") %>:
            <input v-model="meetingWorkCopy.isIndoor" type="checkbox" v-bind:disabled="mode!=1">
        </label>
        <label>
            <%= __("Fee model") %>:
            <select v-model="meetingWorkCopy.feeModel" v-bind:disabled="mode!=1">
                <option value=null><%= __('None') %></option>
                <option value='swiss'><%= __('Swiss') %></option>
                <!-- TODO: make the list b eing completed from a list of modules, similar to series assignements -->
            </select>
        </label>
        TODO: add model specific options!
        <!--<label>
            <%= __("Import/Export model") %>:
            <select v-model="meetingWorkCopy.importExportModel" v-bind:disabled="mode!=1">
                <option value=null><%= __('None') %></option>
                <option value='swiss'><%= __('Swiss') %></option>
            </select>
        </label>
        TODO: add model specific options!-->

        <h2><%= __("Update base data") %></h2>
        <!-- TODO: eventually move this to the admin page -->
        <select v-model="selectedImportService" >
            <option v-for="(s,i) in importServices" v-bind:value=i>{{s}}</option>
        </select>
        <button type="button" class="btn" v-on:click="baseSuiUpdateBaseDataInit($event)"><%= __("Initialize update") %></button><br>
        <%= __("Renew inscription information (name, birthdate, bib, PB, SB, ...) in all contests") %>:
        <button type="button" class="btn" v-on:click="renewStartgroups($event)"><%= __("Renew") %></button>

        <h2><%= __("Import competition from an online service") %></h2>
        <select v-model="selectedImportService" >
            <option v-for="(s,i) in importServices" v-bind:value=i>{{s}}</option>
        </select>
        <button type="button" class="btn" v-on:click="overlay=importServiceOverlayname[selectedImportService]"><%= __("Initialize import") %></button>
    
        <h2><%= __("Export to online service") %></h2>
        to be done

    </form>
    <div class="overlay" v-bind:class="{shown: overlay=='importServiceBaseUpdate1'}">
        <div class="overlayContainer">
            <form class="verticalForm">
                The last update was done on: {{importServiceData.lastUpdate}}
                Update the base data. This can easily take some minutes. Please be patient.
                <label>
                    <%= __("Username") %>
                    <input type="text" v-model="importServiceData.username" >
                </label>
                <label>
                    <%= __("Password") %>
                    <input type="password" v-model="importServiceData.password" >
                </label>
                <div v-if="importServiceData.errConnection">
                    Verbindungsfehler: Mit der Verbindung zum Server ist etwas falsch
                </div>
                <div v-if="importServiceData.errCredentials">
                    Die Loginangaben sind nicht korrekt.
                </div>
                <div v-if="importServiceData.errGeneral">
                    {{`A general error (code ${importServiceData.errCode}) occured: ${importServiceData.errMsg}`}}
                </div>
                <button type="submit" class="btn" v-on:click="baseSuiUpdateBaseData($event)">Update</button>
                <button type="button"class="btn btnRed" v-on:click="overlay=undefined"><%= __("Abort") %></button>
            </form>    
        </div>
    </div>
    <div class="overlay" v-bind:class="{shown: overlay=='importServiceBaseUpdate2'}">
        <div class="overlayContainer">
            <form class="verticalForm">
                Update abgeschlossen. Bemerkungen: 
                <div v-for="note in importServiceData.updateNotes">{{note}}</div>
                
                <button type="button"class="btn btnGreen" v-on:click="overlay=undefined"><%= __("Finished") %></button>
            </form>    
        </div>
    </div>
    <div class="overlay" v-bind:class="{shown: overlay=='importSUIStep1'}">
        <div class="overlayContainer">
            <form class="verticalForm">
                Rufe zuerst die Liste der Verfügbaren Meetings ab.
                <label>
                    <%= __("Username") %>
                    <input type="text" v-model="importServiceData.username" >
                </label>
                <label>
                    <%= __("Password") %>
                    <input type="password" v-model="importServiceData.password" >
                </label>
                <div v-if="importServiceData.errConnection">
                    Verbindungsfehler: Mit der Verbindung zum Server ist etwas falsch
                </div>
                <div v-if="importServiceData.errCredentials">
                    Die Loginangaben sind nicht korrekt.
                </div>
                <div v-if="importServiceData.errNoMeetings">
                    Mit diesen Zugangsdatem sind keine Meetings verknüpft.
                </div>
                <button type="submit" class="btn" v-on:click="baseSuiGetCompetitions($event)">Anmelden</button>
                <button type="button"class="btn btnRed" v-on:click="overlay=undefined"><%= __("Abort") %></button>
            </form>    
        </div>
    </div>
    <div class="overlay" v-bind:class="{shown: overlay=='importSUIStep2'}">
        <div class="overlayContainer">
            <form class="verticalForm">
                Meeging zum Import auswählen
                (Benutzername und Passwort sind unverändert)
                <label>
                    <%= __("Username") %>
                    <input type="text" v-model="importServiceData.username" >
                </label>
                <label>
                    <%= __("Password") %>
                    <input type="password" v-model="importServiceData.password" >
                </label>
                <%= __("Delete registrations of this national body before (re-)importing the competition:") %>
                <input type="radio" v-model="importServiceData.deleteAthletes" name="group1" id="r1" value="0" checked/>
                <label for="r1" style="display: inline;"><%= __("Keep all current registrations") %></label><br>
                <input type="radio" v-model="importServiceData.deleteAthletes" name="group1" id="r2" value="1" />
                <label for="r2" style="display: inline;"><%= __("Delete starts, keep athletes") %></label><br>
                <input type="radio" v-model="importServiceData.deleteAthletes" name="group1" id="r3" value="2" />
                <label for="r3" style="display: inline;"><%= __("Delete starts and athletes") %></label><br>
                <table class="selectTable">
                    <template v-for="(m,i) in importServiceData.competitions">
                        <tr class="clickable" v-on:click="baseSuiImportCompetition(m.identifier)">
                            <td>{{m.identifier}}</td>
                            <td>{{m.name}}</td>
                            <td>{{new Date(m.date).toLocaleDateString()}}</td>
                        </tr>
                    </template>
                </table>

                <div v-if="importServiceData.errConnection">
                    Verbindungsfehler: Mit der Verbindung zum Server ist etwas falsch
                </div>
                <div v-if="importServiceData.errCredentials">
                    Die Loginangaben sind nicht korrekt.
                </div>
                <div v-if="importServiceData.errNoMeetings">
                    Dieses Meeting existiert nicht.
                </div>
                <button type="button"class="btn btnRed" v-on:click="overlay=undefined"><%= __("Abort") %></button>
            </form>    
        </div>
    </div>
    <div class="overlay" v-bind:class="{shown: overlay=='importSUIStep3'}">
        <div class="overlayContainer">
            <form class="verticalForm">
                Erfolge und Probleme beim Importieren: <br>
                <h3>Disziplinen</h3>
                <div>Disziplinen hinzugefügt: {{importServiceData.newCount}}</div>
                <div>Disziplinen updated: {{importServiceData.updateCount}}</div>
                <div>Disziplinen mit Fehlern: {{importServiceData.failCount}}</div>
                <h3>Notizen</h3>
                <div v-for="note in importServiceData.importNotes">{{note}}</div>
                

                <button type="button"class="btn btnGreen" v-on:click="overlay=undefined"><%= __("Finished") %></button>
            </form>    
        </div>
    </div>

    <div class="overlay" v-bind:class="{shown: mode==1}">
        <div class="overlayContainer">
            <button type="button"class="btn btnRed" v-on:click="abortMeetingChange"><%= __("Abort") %></button>
            <button type="button" class="btn btnGreen" v-on:click="saveMeetingChange"><%= __("Save") %></button>
            <form class="verticalForm">
                <label>
                    <%= __("Meeting name") %>: 
                    <input type="text" v-model="meetingWorkCopy.name" maxlength="100" v-bind:disabled="mode!=1">
                </label>
                <label>
                    <%= __("Organizer") %>: 
                    <input type="text" v-model="meetingWorkCopy.organizer" maxlength="100" v-bind:disabled="mode!=1">
                </label>
                <label>
                    <%= __("Location") %>: 
                    <input type="text" v-model="meetingWorkCopy.location" maxlength="100" v-bind:disabled="mode!=1">
                </label>
                <label>
                    <%= __("Stadium") %>: 
                    <input type="text" v-model="meetingWorkCopy.stadium" maxlength="100" v-bind:disabled="mode!=1">
                </label>
                <label>
                    <%= __("Date from") %>:
                    <input v-model="meetingWorkCopy.dateFromFormatted" type="date" v-bind:disabled="mode!=1" v-on:change="dateFromChanged">
                </label>
                <label>
                    <%= __("Date to") %>:
                    <input v-model="meetingWorkCopy.dateToFormatted" type="date" v-bind:disabled="mode!=1">
                </label>
                <label>
                    <%= __("Timezone offset (in min)") %>:
                    <input v-model.number="meetingWorkCopy.timezoneOffset" type="number" v-bind:disabled="mode!=1" min="-780" max="900"> <!-- time zones are not perfectly from -12 to +12, but go up to +14 and might include daylight saving time as well-->
                </label>
                <label>
                    <%= __("Indoor") %>:
                    <input v-model="meetingWorkCopy.isIndoor" type="checkbox" v-bind:disabled="mode!=1">
                </label>
                <label>
                    <%= __("Fee model") %>:
                    <select v-model="meetingWorkCopy.feeModel" v-bind:disabled="mode!=1">
                        <option value=null><%= __('None') %></option>
                        <option value='swiss'><%= __('Swiss') %></option>
                        <!-- TODO: make the list b eing completed from a list of modules, similar to series assignements -->
                    </select>
                </label>
                TODO: add model specific options!
                <!--<label>
                    <%= __("Import/Export model") %>:
                    <select v-model="meetingWorkCopy.importExportModel" v-bind:disabled="mode!=1">
                        <option value=null><%= __('None') %></option>
                        <option value='swiss'><%= __('Swiss') %></option>
                    </select>
                </label>
                TODO: add model specific options! -->
            </form>
        </div>
    </div>

    <div id="overlay" v-on:click="infoVisible=false" v-bind:class="{shown: infoVisible}">
        <!-- overlay used for displaying general information -->
        <div id="overlayContainer">
            <div id="overlayTitle"><b>{{infoTitle}}</b></div>
            <div id="overlayContent">{{infoContent}}</div>
        </div>
    </div>
</div>

<!-- TODO: eventually add here another insert for side channels!-->