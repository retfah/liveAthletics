
<!--
    Taken from adminServer.ejs and root.ejs, but now merged together to include the complete html-structure and without the preloading etc stuff.
    
    -->
    
    <!DOCTYPE html>
    <html>
        <head>
            <meta name="viewport" content="width=device-width,initial-scale=1"> <!-- make sure mobile browsers do nto lie about their width and then do some ugly scaling -->
            <title><%= __("Timing") %> <%= timingName %></title> 
            <link rel="shortcut icon" type="image/x-icon" href="/static/favicon_quickNdirty.ico">
            <link rel="icon" type="image/x-icon" href="/static/favicon_quickNdirty.ico">
            <link rel="stylesheet" type="text/css" href="/static/styling.css">
            <!--<link rel="icon" type="image/x-icon" href="favicon.ico">-->
            <script src="/static/roomManager.js" type="text/javascript"></script>
            <script src="/static/main.js" type="text/javascript"></script> 
            <script src="/static/wsProcessorBrowser.js" type="text/javascript"></script>
            <!--<script src="/static/vue.js" type="text/javascript"></script>-->
            <script src="/static/vue3.global.js" type="text/javascript"></script>
            <script src="/static/ajv.min.js"></script>
            
            <script src="/static/roomClient.js" type="text/javascript"></script>
            <script type="text/javascript">

            const timingName = '<%= timingName %>';
            var vueTiming;
            var rTiming;
    
            function startupTiming(){
                
                // start the ws-connection
                wsHandler = new socketProcessor2();
    
                // start the event handler --> not needed anymore
                eH = new eventHandling2();
    
                eH.eventRegister('wsConnected');
    
                // start the roomManager
                rM = new roomManager('aConnection');
    
                // start the room
                load();
            }
    
            function unloadMe(){
                // called on before unload: --> properly unconnect the room(s)
    
                // TODO
            }
            
            // do everything with Vue now in this class
            class vuTiming extends roomClientVue{
            
                constructor(vue){
                
                    // parent constructor: initializes the room
                    //(roomName, writing, storeInfos, path, className, datasetName='')
                    super('timing' + timingName, true, true, '/static/rTimingClient.js', 'rTimingClient');
                
                    // needed to call things in the vue class
                    this.vue = vue;
                }
                
                /**
                 * called when a a writing ticket is stored or deleted
                 */
                onWritingTicketChange(){
                    if (this.room.writingTicketID){
                        //this.vueServerAdmin.readOnly = false;
                    } else {
                        //this.vueServerAdmin.readOnly = true;
                    }
                }
                onChange(){

                }

                setProps(){
                    this.vue.timingOptions = this.room.data.timingOptions;
                    this.vue.siteConf = this.room.data.siteConf;
                    this.vue.capabilities = this.room.data.capabilities; // stays constant
                    this.vue.infos = this.room.data.infos;
                    this.vue.auto = this.room.data.auto
                    this.vue.timers = this.room.data.timers
                    this.vue.data = this.room.data.data; // the actual data in rTiming
                    this.vue.contests = this.room.data.contests; 

                    this.room.data.timingOptions = this.vue.timingOptions;
                    this.room.data.siteConf = this.vue.siteConf;
                    this.room.data.infos = this.vue.infos;
                    this.room.data.auto = this.vue.auto;
                    this.room.data.timers = this.vue.timers;
                    this.room.data.data = this.vue.data;
                    this.room.data.contests = this.vue.contests;
                }
                
                afterFullreload(){
                    // set the changed data-property as data of the vue-instance
                    this.setProps();
                }
                
                dataArrived(){
                    this.setProps();
                }
            }
            
            /**
             * load: is automatically called after loading the page
             */
            function load(){
                //this.vueMeetingSelection = new Vue({
                let vueTimingConfig = {
                    data(){
                        return {
                            timingOptions:{},
                            siteConf: {},
                            capabilities: {}, // stays constant
                            infos:{},
                            auto: {},
                            timers: {},
                            data: {}, // the actual data of rTiming, i.e. the data as is/was written to the timing. 
                            siteData: {},
                            contests: {}, // the data of rSiteTrack

                            overlay: null, // null, siteConf, timingOptions, conf (auto + timers), 

                            // copy for mod:
                            siteConfCopy: {}, 
                            timingOptionsCopy: {},
                            autoCopy: {},
                            timersCopy: {},

                            // info overlay
                            infoTitle: '',
                            infoContent:'',
                            infoVisible:false,

                            // the names and id's of series and contest states:
                            // Note: the comment before the ejs-include only affects the first row of the included file; (thats why it still works)
                            // also gets seriesStates and participationStates
                            //<%- include('contestStates.ejs') %>

                            readOnly:false, // not really used yet
                        }
                    },
                    methods:{
                        overlayInfo(title, content){
                            this.infoTitle = title;
                            this.infoContent = content;
                            this.infoVisible = true;
                        },
                        showSiteConf(){
                            // create a copy to be modified in order to allow easy reset
                            this.siteConfCopy = JSON.parse(JSON.stringify(this.siteConf));

                            this.overlay = "siteConf";
                        },
                        saveSiteConf(){
                            // make sure that secure is a boolean

                            rTiming.room.updateSiteConfInit(this.siteConfCopy);
                            this.overlay = null;
                        },
                        showTimingOptions(){
                            // create a copy to be modified in order to allow easy reset
                            this.timingOptionsCopy = JSON.parse(JSON.stringify(this.timingOptions));

                            this.overlay = "timingOptions";
                        },
                        saveTimingOptions(){
                            // make sure that secure is a boolean

                            rTiming.room.updateTimingOptionsInit(this.timingOptionsCopy);
                            this.overlay = null;
                        },
                        showConf(){
                            // create a copy to be modified in order to allow easy reset
                            this.timersCopy = JSON.parse(JSON.stringify(this.timers));
                            this.autoCopy = JSON.parse(JSON.stringify(this.auto));

                            this.overlay = "conf";
                        },
                        saveConf(){
                            // only apply the changes if really something has changed
                            // since we cannot have two requests at the same time, we must defer on until the answer of the other has arrived
                            if (JSON.stringify(this.auto) != JSON.stringify(this.autoCopy)){
                                let onResponse = null;
                                if (JSON.stringify(this.timers) != JSON.stringify(this.timersCopy)){
                                    onResponse = ()=>{rTiming.room.updateTimersInit(this.timersCopy)};
                                }
                                rTiming.room.updateAutoInit(this.autoCopy, onResponse);
                            }
                            else if (JSON.stringify(this.timers) != JSON.stringify(this.timersCopy)){
                                rTiming.room.updateTimersInit(this.timersCopy);
                            }
                            
                            this.overlay = null;
                        },

                        statusBackgroundColor(status, states=this.contestStates){
                            let s = states.find(s=>s.value==status);
                            if (s){
                                return s.backgroundColor;
                            }
                            return '#ffffff';
                        },
                        colorHexMultiplier(color, f){
                            // split the hex code into the three parts and multiply it with f
                            let R = Math.min(255,Math.round(f*parseInt(color.slice(1,3),16)));
                            let G = Math.min(255,Math.round(f*parseInt(color.slice(3,5),16)));
                            let B = Math.min(255,Math.round(f*parseInt(color.slice(5,7),16)));
                            return '#' + R.toString(16).padStart(2,0) + G.toString(16).padStart(2,0) + B.toString(16).padStart(2,0);
                        },
                        statusBackgroundColorHover(status, states=this.contestStates){
                            let s = states.find(s=>s.value==status);
                            if (s){
                                return this.colorHexMultiplier(s.backgroundColor)
                                // split the hex code into the three parts and multiply it with 0.8
                                /*let f = 0.8;
                                let R = Math.round(f*parseInt(s.backgroundColor.slice(1,3),16));
                                let G = Math.round(f*parseInt(s.backgroundColor.slice(3,5),16));
                                let B = Math.round(f*parseInt(s.backgroundColor.slice(5,7),16));
                                return '#' + R.toString(16).padStart(2,0) + G.toString(16).padStart(2,0) + B.toString(16).padStart(2,0);*/
                            }
                            return '#eeeeee';
                        },
                        statusTextColor(status, states=this.contestStates){
                            let s = states.find(s=>s.value==status);
                            if (s){
                                return s.textColor;
                            }
                            return '#000000';
                        },
                        statusText(status, states=this.contestStates){
                            let s = states.find(s=>s.value==status);
                            if (s){
                                return s.text;
                            }
                            return status;
                        },
                    },
                    computed:{
                        basePath: ()=>{
                            // derive the base path from the current path
                            // origin = 'https://www.xy.com:1234', pathname = /hello/world.php, href: 'https://www.xy.com:1234/hello/world.php'

                            return window.location.origin + window.location.pathname.split('/').slice(0,2).join('/') + "/";

                        }
                    }
                };

                // start the vueInstance, which should do the rest (connect to the room, get the right data, show it)
                vueTiming = Vue.createApp(vueTimingConfig).mount('#vueDiv');
                
                rTiming = new vuTiming(vueTiming);
            }
            
            </script>
        </head>
        <body onload="startupTiming()" onbeforeunload="unloadMe()">
            <div id="vueDiv"> <!-- inside here all the vue.js stuff -->
                <h3>All data of the room</h3>
                TimingOptions: {{timingOptions}} <br>
                SiteConf: {{siteConf}} <br>
                Capabilities: {{capabilities}} <br>
                Infos: {{infos}} <br>
                Auto: {{auto}} <br>
                Timers: {{timers}} <br>
                Data: {{data}} <br>
                Contests: {{contests}} <br>
                <button class="btn" @click="showSiteConf"><%= __("Site connection setup") %></button>   
                <button class="btn" @click="showTimingOptions"><%= __("Timing setup") %></button>
                <button class="btn" @click="showConf"><%= __("Automatic transfer setup") %></button>

                <div class="overlay" v-bind:class="{shown: overlay=='siteConf'}">
                    <div class="overlayContainer">
                        <h3><%= __("Site connection setup") %></h3>
                        <form class="verticalForm">
                            <label>
                                <%= __("Host") %>
                                <input class="formCtrl" type="text"  v-model="siteConfCopy.host">
                            </label>
                            <label>
                                <%= __("Port") %>
                                <input class="formCtrl" type="number"  v-model.number="siteConfCopy.port" min="1" max="65535">
                            </label>
                            <label>
                                <%= __("Secure connection") %>
                                <input type="checkbox"  v-model="siteConfCopy.secure">
                            </label>
                            <label>
                                <%= __("Path") %>
                                <input class="formCtrl" type="text"  v-model="siteConfCopy.path">
                            </label>
                            <label>
                                <%= __("Meeting shortname") %>
                                <input class="formCtrl" type="text" maxlength="4"  v-model="siteConfCopy.shortname">
                            </label>
                            <label>
                                <%= __("Site number") %>
                                <input class="formCtrl" type="number"  v-model.number="siteConfCopy.siteNumber" min="1">
                            </label>
                            <label>
                                <%= __("Token") %>
                                <input class="formCtrl" type="text" maxlength="36" v-model="siteConfCopy.token" size="36">
                            </label>
                        </form>
                        <button type="button" class="btn btnRed" v-on:click="overlay = null"><%= __("Close") %></button>
                        <button type="button" class="btn btnGreen" v-on:click="saveSiteConf"><%= __("Save") %></button>
                    </div>
                </div>

                <div class="overlay" v-bind:class="{shown: overlay=='conf'}">
                    <div class="overlayContainer">
                        <h3><%= __("Automatic transfer") %></h3>
                        <h5>Automatically transfer the following changes in live athletics to the timing:</h5>
                        <form class="verticalForm">
                            <label>
                                <%= __("Contest changed") %>
                                <select class="formCtrl" v-model.number="autoCopy.changeContestAuto" :disabled="readOnly" v-bind:style="{ 'background-color': statusBackgroundColor(autoCopy.changeContestAuto), '--backColorHover': statusBackgroundColorHover(autoCopy.changeContestAuto), color: statusTextColor(autoCopy.changeContestAuto) }">
                                    <option value="-1"><%= __("Never") %></option>
                                    <option value="-2"><%= __("Always") %></option>
                                    <template v-for="status in contestStates">
                                        <option v-bind:value="status.value" v-bind:style="{ 'background-color': status.backgroundColor,  '--backColorHover': statusBackgroundColorHover(status.value), color: status.textColor }">
                                            <%= __("Status") %> &ge; {{status.text}}
                                        </option>
                                    </template>
                                </select>
                            </label>
                            <label>
                                <%= __("Series added") %>
                                <select class="formCtrl" v-model.number="autoCopy.addSeriesAuto" :disabled="readOnly" v-bind:style="{ 'background-color': statusBackgroundColor(autoCopy.addSeriesAuto), '--backColorHover': statusBackgroundColorHover(autoCopy.addSeriesAuto), color: statusTextColor(autoCopy.addSeriesAuto) }">
                                    <option value="-1"><%= __("Never") %></option>
                                    <option value="-2"><%= __("Always") %></option>
                                    <template v-for="status in seriesStates">
                                        <option v-bind:value="status.value" v-bind:style="{ 'background-color': status.backgroundColor,  '--backColorHover': statusBackgroundColorHover(status.value), color: status.textColor }">
                                            <%= __("Status") %> &ge; {{status.text}}
                                        </option>
                                    </template>
                                </select>
                            </label>
                            <label>
                                <%= __("Series changed") %>
                                <select class="formCtrl" v-model.number="autoCopy.changeSeriesAuto" :disabled="readOnly" v-bind:style="{ 'background-color': statusBackgroundColor(autoCopy.changeSeriesAuto), '--backColorHover': statusBackgroundColorHover(autoCopy.changeSeriesAuto), color: statusTextColor(autoCopy.changeSeriesAuto) }">
                                    <option value="-1"><%= __("Never") %></option>
                                    <option value="-2"><%= __("Always") %></option>
                                    <template v-for="status in seriesStates">
                                        <option v-bind:value="status.value" v-bind:style="{ 'background-color': status.backgroundColor,  '--backColorHover': statusBackgroundColorHover(status.value), color: status.textColor }">
                                            <%= __("Status") %> &ge; {{status.text}}
                                        </option>
                                    </template>
                                </select>
                            </label>
                            <label>
                                <%= __("Series deleted") %>
                                <select class="formCtrl" v-model.number="autoCopy.deleteSeriesAuto" :disabled="readOnly" v-bind:style="{ 'background-color': statusBackgroundColor(autoCopy.deleteSeriesAuto), '--backColorHover': statusBackgroundColorHover(autoCopy.deleteSeriesAuto), color: statusTextColor(autoCopy.deleteSeriesAuto) }">
                                    <option value="-1"><%= __("Never") %></option>
                                    <option value="-2"><%= __("Always") %></option>
                                    <template v-for="status in seriesStates">
                                        <option v-bind:value="status.value" v-bind:style="{ 'background-color': status.backgroundColor,  '--backColorHover': statusBackgroundColorHover(status.value), color: status.textColor }">
                                            <%= __("Status") %> &ge; {{status.text}}
                                        </option>
                                    </template>
                                </select>
                            </label>

                            <h5>Automatically transfer the following new data in the timing to live athletics:</h5>
                            <!-- data that can be pushed by the timing software: -->
                            <label>
                                <%= __("Evaluated time of a person") %>
                                <select class="formCtrl" v-model.number="autoCopy.addResultAuto" :disabled="readOnly" v-bind:style="{ 'background-color': statusBackgroundColor(autoCopy.addResultAuto), '--backColorHover': statusBackgroundColorHover(autoCopy.addResultAuto), color: statusTextColor(autoCopy.addResultAuto) }">
                                    <option value="-1"><%= __("Never") %></option>
                                    <option value="-2"><%= __("Always") %></option>
                                    <template v-for="status in seriesStates">
                                        <option v-bind:value="status.value" v-bind:style="{ 'background-color': status.backgroundColor,  '--backColorHover': statusBackgroundColorHover(status.value), color: status.textColor }">
                                            <%= __("Status") %> &le; {{status.text}}
                                        </option>
                                    </template>
                                </select>
                            </label>
                            <label>
                                <%= __("Evaluated times of a full heat") %>
                                <select class="formCtrl" v-model.number="autoCopy.addResultHeatAuto" :disabled="readOnly" v-bind:style="{ 'background-color': statusBackgroundColor(autoCopy.addResultHeatAuto), '--backColorHover': statusBackgroundColorHover(autoCopy.addResultHeatAuto), color: statusTextColor(autoCopy.addResultHeatAuto) }">
                                    <option value="-1"><%= __("Never") %></option>
                                    <option value="-2"><%= __("Always") %></option>
                                    <template v-for="status in seriesStates">
                                        <option v-bind:value="status.value" v-bind:style="{ 'background-color': status.backgroundColor,  '--backColorHover': statusBackgroundColorHover(status.value), color: status.textColor }">
                                            <%= __("Status") %> &le; {{status.text}}
                                        </option>
                                    </template>
                                </select>
                            </label>
                            <label>
                                <%= __("Reaction times") %>
                                <select class="formCtrl" v-model.number="autoCopy.addReactionTimeAuto" :disabled="readOnly" v-bind:style="{ 'background-color': statusBackgroundColor(autoCopy.addReactionTimeAuto), '--backColorHover': statusBackgroundColorHover(autoCopy.addReactionTimeAuto), color: statusTextColor(autoCopy.addReactionTimeAuto) }">
                                    <option value="-1"><%= __("Never") %></option>
                                    <option value="-2"><%= __("Always") %></option>
                                    <template v-for="status in seriesStates">
                                        <option v-bind:value="status.value" v-bind:style="{ 'background-color': status.backgroundColor,  '--backColorHover': statusBackgroundColorHover(status.value), color: status.textColor }">
                                            <%= __("Status") %> &le; {{status.text}}
                                        </option>
                                    </template>
                                </select>
                            </label>

                            <h5>Check for new data in the timing software in the following interval (set to 0 for never):</h5>
                            <!-- data that must/can be pulled from the timing software -->
                            <label>
                                <%= __("Results") %>
                                <input class="formCtrl" type="number"  v-model.number="timersCopy.pullResults" min="0">
                            </label>
                            <label>
                                <%= __("Reaction times") %>
                                <input class="formCtrl" type="number"  v-model.number="timersCopy.pullReactionTimes" min="0">
                            </label>
                        </form>
                        <button type="button" class="btn btnRed" v-on:click="overlay = null"><%= __("Close") %></button>
                        <button type="button" class="btn btnGreen" v-on:click="saveConf"><%= __("Save") %></button>
                    </div>
                </div>

                <div class="overlay" v-bind:class="{shown: overlay=='timingOptions'}">
                    <div class="overlayContainer">
                        <h3><%= __("Timing setup") %></h3>
                        <!-- TODO: this should be inserted on the basis of the respective timing software! The following is for ALGE -->
                        <form class="verticalForm">
                            <label>
                                <%= __("Folder where the heats shall be exported to") %><button type="button" class="information" v-on:click="overlayInfo('<%= __('Notes') %>:', '<%= __('The path must be accessible from the server that provides this page.') %>')"><%= __('i') %></button>
                                <input class="formCtrl" type="text" v-model="timingOptionsCopy.xmlHeatsFolder"> <!-- NOTE: "type=file directory" is not what we need (it uploads simply all files in a folder, but does not provide the folder name); what we need does not exist for security reasons -->
                            </label>
                            <label>
                                <%= __("Folder where the results shall be imported from") %> <button type="button" class="information" v-on:click="overlayInfo('<%= __('Notes') %>:', '<%= __('The path must be accessible from the server that provides this page.') %>')"> <%= __('i') %></button>
                                <input class="formCtrl" type="text" v-model="timingOptionsCopy.xmlResultsFolder"> <!-- NOTE: "type=file directory" is not what we need (it uploads simply all files in a folder, but does not provide the folder name); what we need does not exist for security reasons -->
                            </label>
                            <!-- all tcp server settings -->
                            <fieldset>
                                <legend>
                                    ALGE Versatile Exchange protocol
                                    <button type="button" class="information" v-on:click="overlayInfo('ALGE Versatile exchange protocol', '<%= __(`The ALGE Versatile exchange protocol provides a push message for the following events: start (including false start), finish (with inofficial finish time), single results during evaluation, heat results when official. Go to "ATL exchange settings/AlgeVersatileExchangeProtocolOutput/Ports/[0]" and set "Layer=Tcp Server" and "Tcp Server/Local Port" to e.g. 4446. Provide the same port number  together withh the host (IP or server name) in the settings here.`) %>');"><%= __('i') %></button>
                                </legend>
                                <h4><%= __("Settings are only required when any of the checkboxes is selected") %></h4>
                                <label>
                                    <%= __("Host") %>
                                    <input class="formCtrl" type="text"  v-model="timingOptionsCopy.host">
                                </label>
                                <label>
                                    <%= __("Port") %>
                                    <input class="formCtrl" type="number"  v-model.number="timingOptionsCopy.port" min="1" max="65535">
                                </label>
                                <label>
                                    <%= __("Relay start and finish signal from ALGE to live athletics") %>
                                    <input type="checkbox"  v-model="timingOptionsCopy.handlePushHeatStartFinish">
                                </label>
                                <label>
                                    <%= __("Get inofficial results during evaluation") %>
                                    <input type="checkbox"  v-model="timingOptionsCopy.handlePushCompetitorEvaluated">
                                </label>
                                <div v-if="timingOptionsCopy.handlePushCompetitorEvaluated==true" style="padding-left: 15px;">
                                    <label >
                                        <%= __("Also get the inofficial rank") %><button type="button" class="information" v-on:click="overlayInfo('<%= __(`Inofficial rank`) %>', '<%= __(`Only set this to true when the timing crew always evaluates the times in the order of the placing, and e.g. not in the order of the lanes. Otherwise, the temporary ranks are wrong.`) %>');"><%= __('i') %></button>
                                        <input type="checkbox"  v-model="timingOptionsCopy.competitorEvaluatedWithRank">
                                    </label>
                                </div>                                
                                <label>
                                    <%= __("Instantly import results when official") %>
                                    <input type="checkbox"  v-model="timingOptionsCopy.handlePushHeatResult">
                                </label>
                            </fieldset>

                        </form>
                        <button type="button" class="btn btnRed" v-on:click="overlay = null"><%= __("Close") %></button>
                        <button type="button" class="btn btnGreen" v-on:click="saveTimingOptions"><%= __("Save") %></button>
                    </div>
                </div>
                <div id="overlay" v-on:click="infoVisible=false" v-bind:class="{shown: infoVisible}">
                    <!-- overlay used for displaying general information -->
                    <div id="overlayContainer">
                        <div id="overlayTitle"><b>{{infoTitle}}</b></div>
                        <div id="overlayContent">{{infoContent}}</div>
                    </div>
                </div>
            </div>
            <a id="aConnection" class="Conn" onclick="rM.data.wsWindowShown=true;"><%= __("Connection") %></a>
    
            <!-- include the roomManager-frontend -->
            <%- include('roomManagerDrawings') %>
    
        </body>
    </html>
    
    