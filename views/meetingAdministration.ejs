<!--
Taken from adminServer.ejs and root.ejs, but now merged together to include the complete html-structure and without the preloading etc stuff.

-->

<!DOCTYPE html>
<html>
    <head>
        <title><%= __("Meeting administration") %></title>
        <link rel="icon" type="image/x-icon" href="/static/favicon_quickNdirty.ico">
        <link rel="stylesheet" type="text/css" href="/static/bootstrap.min.css">
        <link rel="stylesheet" type="text/css" href="/static/styling.css">
        <!--<link rel="icon" type="image/x-icon" href="favicon.ico">-->
        <script src="/static/roomManager.js" type="text/javascript"></script>
        <script src="/static/main.js" type="text/javascript"></script> 
        <script src="/static/wsProcessorBrowser.js" type="text/javascript"></script>
        <!--<script src="/static/vue.js" type="text/javascript"></script>-->
        <script src="/static/vue3.global.js" type="text/javascript"></script>
        <script src="/static/ajv.min.js"></script>
        
        <script src="/static/roomClient.js" type="text/javascript"></script>
        <!--<script src="/rMeetingsClient.js" type="text/javascript"></script> DO NOT IMPORT THIS ANYMORE: IT WILL BE DYNAMICALLY IMPORTED IN THE ROOMMANAGER-->
        <script type="text/javascript">

        function startup(){
            
            // start the ws-connection
            wsHandler = new socketProcessor2();

            // start the event handler --> not needed anymore
            eH = new eventHandling2();

            eH.eventRegister('wsConnected');

            // start the roomManager
            rM = new roomManager('aConnection');

            // start the room
            load();
        }

        function unloadMe(){
            // called on before unload: --> properly unconnect the room(s)

            // TODO
            adminServerUnload();
        }
        
        // new way
        //var rMeetings;
        var vueMeetings;
        
        
        // do everything with Vue now in this class
        class vuMeetings extends roomClientVue{
        
            constructor(){
            
                // parent constructor: initializes the room
                super('meetings', true, true, '/static/rMeetingsClient.js', 'rMeetingsClient')
            
                // the vueApp        
                //this.vueServerAdmin = new Vue({
                let vueMeetingsConfig = {
                    data(){
                        return {isSlave:false, updateMeeting:-1, meetings:[{name: 'Meeting 1', date:'01-01-1995'}, {name: 'Meeting 2', date:'28-03-1992'}], readOnly: true, deleteWindowShown: false, deleteMeetingObj: {}, overlayVisible: false, overlayTitle: '', overlayContent:''} 
                    },
                    methods:{
            
                        // TODO: check: If the following is written with function(){}, this will be the vue-object. If written as an arrow function ()=>{}, this will be the room-object
            
                        deleteMeeting:(meeting)=>{
                            this.deleteMeeting_init(meeting);
                        },
            
                        // ATTENTION: in the worst case, the meetingIndex might have (-->test it!) changed since the update was started (when another client added or deleted a meeting)!. Thus we always have to check whether the  xMeeting is still te right. 
                        // --> actually I think the ID does change in the background, as a new meeting will result in redrawing of the elements
                        // TODO: check
            
                        startUpdating:function(meeting){
                            // show the input fields
                            this.updateMeeting = meeting.xMeeting;
            
                            // store the old data (used on abort)
                            this.meetingBeforeUpdate = JSON.parse(JSON.stringify(meeting));
                        },
                        abortUpdate: function(meetingIndex){
                            // check that the meeting stored behind the index is still the correct!
                            
                            // index is not the same meeting anyore --> get the actual index of the meeting
            
                            // reset the meeting
                            this.meetings[meetingIndex] = this.meetingBeforeUpdate;
            
                            // disable update mode
                            this.updateMeeting=-1;
                        },
                        saveUpdate: (meeting)=>{
                            // meetingBeforeUpdate is needed for the reset function when there was an error on the server.
                            
                            // start storing the update
                            this.updateMeeting_init(meeting, this.vueServerAdmin.meetingBeforeUpdate);
            
                            // disable update mode
                            this.vueServerAdmin.updateMeeting=-1;
                        },
                        activate: (meeting)=>{
                            //console.log(`activate meeting ${meeting.name}`)

                            this.activateMeeting_init(meeting.xMeeting);

                            // ideally we would grey out the button during the request on the server...
                        },
                        deactivate: (meeting)=>{
                            //console.log(`deactivate meeting ${meeting.name}`)

                            this.deactivateMeeting_init(meeting.xMeeting);

                            // ideally we would grey out the button during the request on the server...
                        }
                    }
                };

                
                this.vueServerAdmin = Vue.createApp(vueMeetingsConfig).mount('#vueDiv');
            
            }
            
            /**
             * called when a a writing ticket is stored or deleted
             */
            onWritingTicketChange(){
                if (this.room.writingTicketID){
                    this.vueServerAdmin.readOnly = false;
                } else {
                    this.vueServerAdmin.readOnly = true;
                }
            }
            
            afterFullreload(){
                // set the changed data-property as data of the vue-instance
                this.vueServerAdmin.meetings = this.room.data;
                this.room.data = this.vueServerAdmin.meetings;
            }
            
            dataArrived(){
                // raised as soon as the room has its data stored for the first time
                // TODO: what about views? They probably also need something like this
                
                this.vueServerAdmin.meetings = this.room.data;
                this.room.data = this.vueServerAdmin.meetings;
            
                if (this.room.writingTicketID){
                    this.vueServerAdmin.readOnly = false;
                } else {
                    this.vueServerAdmin.readOnly = true;
                }
            }
            
            addMeeting_init(){
            
                // check that important fields are not empty:
                let sn = document.getElementById('shortname').value;
                let location = document.getElementById('location').value;
                if (sn=='' || location==''){
                    document.getElementById('incomplete').style.display = 'inline';
                    setTimeout(()=>{document.getElementById('incomplete').style.display = 'none';}, 10000) // after 10 seconds remove the note
                    return;
                }
            
                let name = document.getElementById('name').value;
                let active = document.getElementById('active').checked;
                let dateFrom = document.getElementById('dateFrom').value;
                let dateTo = document.getElementById('dateTo').value;
            
                this.room.addMeeting_init2(sn, location, name, active, dateFrom, dateTo)
            
            }
            
            deleteMeeting_init(meeting){

                this.room.deleteMeeting_init2(meeting.xMeeting);
            }

            activateMeeting_init(xMeeting){

                let failureWarning = () => {
                    this.vueMeetings.overlayContent = '<%= __("The meeting could not be activated.") %>';
                    this.vueMeetings.overlayTitle = '<%= __("Error") %>';
                    this.vueMeetings.overlayVisible = true;
                }

                this.room.activateMeeting_init2(xMeeting, failureWarning);
            }

            deactivateMeeting_init(xMeeting){

                let failureWarning = () => {
                    this.vueMeetings.overlayContent = '<%= __("The meeting could not be deactivated.") %>';
                    this.vueMeetings.overlayTitle = '<%= __("Error") %>';
                    this.vueMeetings.overlayVisible = true;
                }

                this.room.deactivateMeeting_init2(xMeeting, failureWarning);
            }
            
            /**
             * 
             * @param {object} meeting 
             * @param {object} meetingBeforeUpdate the meeting as it was before the update. Needed for undo if there is an error on the server.
             */
            updateMeeting_init(meeting, meetingBeforeUpdate){
            
                this.room.updateMeeting_init(meeting, meetingBeforeUpdate);
            
            }
        }
        
        /**
         * load: is automatically called after loading the page
         */
        function load(){
        
            // restructuring rooms and views, to accept multiple vue's per room/view and to use the roomManager to get the room-data (i.e. do not start the room here!)
            // 1. separate the vue from the room
            // 2. start-up of the room via roomManager.
            // let v = new vuMeetings()
            vueMeetings = new vuMeetings();
        
            
            // OLD: 
            // create new meetings-room
            /*rMeetings = new rMeetingsClient(wsHandler, eH);
        
            rM.registerRoom(rMeetings);*/
        
        }
        
        
        function adminServerUnload(){
        
            // TODO!!!
            // destroy the view, which shall unregister from the room, which shall either destroy itself OR unregistering runs through the roomManager, which checks if there are other vues or destroys the room.
        
            // must return true on success
        
            // leave the room
            //rMeetings.leave()
        
            //document.getElementById('hallo').innerText = 'unloaded!';
            return true;
        }
        
        </script>
    </head>
    <body onload = "startup()" onbeforeunload="unloadMe()">
        <!-- TODO: these links are probably not needed here anymore-->
        <div class="flexNav1" id="Nav1">
            <a class="ItemNav1" onclick="return goto(this)" href="./meetingAdministration"><%= __('Server administration') %></a>
            <a class="ItemNav1" onclick="return goto(this)" href="./login"><%= __('Log in') %></a>
            <a class="ItemNav1" onclick="return goto(this)" href="./logout"><%= __('Log out') %></a>
            <a id="aConnection" class="Conn" onclick="rM.data.wsWindowShown=true;" ><%= __('Connection')%><span class="glyphicon glyphicon-transfer"></span></a><!-- replace by either settings symbol (gear) or wifi symbol finally-->
        </div>

        <div id="vueDiv"> <!-- inside here all the vue.js stuff -->
            <!--<div> -->
            <table class="table" style="margin-left:auto; margin-right:auto; width:auto">
                <tr>
                    <th><%= __("Meeting-ID") %></th>
                    <th><%= __("Shortname") %></th>
                    <th><%= __("Name") %></th>
                    <th><%= __("Location") %></th>
                    <th><%= __("Date from") %></th>
                    <th><%= __("Date to") %></th>
                    <th><%= __("Active") %></th>
                    <th></th>
                    <th></th>
                    <th></th>
                </tr>
                <template v-for="(meeting, meetingIndex) in meetings">
                    <!-- we cannot include the link in the row, since the buttons would raise those events too then  :onclick="'window.location=\'./' + meeting.shortname + '\''"-->
                    <tr v-if="meeting.xMeeting!=updateMeeting" >
                        <td>{{meeting.xMeeting}}</td>
                        <td :onclick="meeting.running ?'window.location=\'./' + meeting.shortname + '\'' : false" :class="{clickable: meeting.running}">{{meeting.shortname}}</td>
                        <td :onclick="meeting.running ?'window.location=\'./' + meeting.shortname + '\'' : false" :class="{clickable: meeting.running}">{{meeting.name}}</td>
                        <td :onclick="meeting.running ?'window.location=\'./' + meeting.shortname + '\'' : false" :class="{clickable: meeting.running}">{{meeting.location}}</td>
                        <td :onclick="meeting.running ?'window.location=\'./' + meeting.shortname + '\'' : false" :class="{clickable: meeting.running}">{{meeting.dateFrom}}</td>
                        <td :onclick="meeting.running ?'window.location=\'./' + meeting.shortname + '\'' : false" :class="{clickable: meeting.running}">{{meeting.dateTo}}</td>
                        <td>{{meeting.active && meeting.running ? "<%= __("Activated") %>" : (meeting.active && !meeting.running ? "<%= __("Activating...") %>" : (!meeting.active && meeting.running ? "<%= __("Deactivating...") %>" : "<%= __("Deactivated") %>" )) }}</td> 
                        <td style="padding:0.4rem"><button class="btn btn-secondary" v-on:click=" startUpdating(meeting)" :disabled="readOnly" v-bind:class="{disabled: readOnly}"><%= __("Change") %></button></td> 
                        <td style="padding:0.4rem"><button class="btn btn-danger" v-on:click=" deleteMeetingObj=meeting; deleteWindowShown=true;" :disabled="readOnly" v-bind:class="{disabled: readOnly}"><%= __("Delete") %></button></td>
                        <td style="padding:0.4rem" v-if="!meeting.active"><button class="btn btn-secondary" v-on:click=" activate(meeting)" :disabled="readOnly || meeting.running" v-bind:class="{disabled: readOnly || meeting.running}"><%= __("Activate") %></button></td>
                        <td style="padding:0.4rem" v-if="meeting.active"><button class="btn btn-secondary" v-on:click=" deactivate(meeting)" :disabled="readOnly || !meeting.running" v-bind:class="{disabled: readOnly || !meeting.running}"><%= __("Deactivate") %></button></td> <!-- btn-primary-->
                    </tr>
                    <tr v-if="meeting.xMeeting==updateMeeting">
                        <td>{{meeting.xMeeting}}</td>
                        <!--<td><input type="text" v-model="meeting.shortname" size=10></td>-->
                        <td>{{meeting.shortname}}</td> <!-- the shortname cannot be changed, since the database-name would change. -->
                        <td><input type="text" v-model="meeting.name" size="35" maxlength="75"></td>
                        <td><input type="text" v-model="meeting.location" size="20" maxlength="50"></td>
                        <td><input type="date" v-model="meeting.dateFrom"></td>
                        <td><input type="date" v-model="meeting.dateTo"></td>
                        <td>{{meeting.active ? "<%= __("Yes") %>" : "<%= __("No") %>" }}</td>
                        <td style="padding:0.4rem"><button class="btn btn-success" v-on:click=" saveUpdate(meeting, meetingBeforeUpdate, meetingIndex)"><%= __("Save") %></button></td>
                        <td style="padding:0.4rem"><button class="btn btn-secondary" v-on:click=" abortUpdate(meetingIndex); "><%= __("Abort") %></button></td>
                        <td></td>
                        </tr>
                </template>
            </table>
        <!--</div> -->
            <form id="new">
                <div class="container border rounded p-3">
                    <label class="h4" form="new"><%= __("Add new meeting") %></label>
                    <!--<input type="hidden" id="id" value={{}}>-->
                    <div class="form-group">
                        <label for="shortname"><%= __("Shortname") %></label>
                        <input type="text" id="shortname" maxlength=10 class="form-control">
                    </div>
                    <div class="form-group">
                        <label for="name"><%= __("Name") %></label>
                        <input type="text" id="name" maxlength=75 class="form-control">
                    </div>
                    <div class="form-group">
                        <label for="location"><%= __("Location") %></label>
                        <input type="text" id="location" maxlength="50" class="form-control">
                    </div>
                    <div class="form-group">
                        <label for="dateFrom"><%= __("Date from") %></label>
                        <input class="form-control" type="date" id="dateFrom" v-model="dateFrom">
                    </div>
                    <div class="form-group">
                        <label for="dateTo"><%= __("Date to") %></label>
                        <input class="form-control" type="date" id="dateTo" v-model="dateTo">
                    </div>
                    <div class="form-check">
                        <input class="form-check-input" type="checkbox" id="active" checked>
                        <label class="form-check-label" for="active"><%= __("Activate") %></label>
                    </div>
                    <button type="button" class="btn btn-primary" onclick="vueMeetings.addMeeting_init();" :disabled="readOnly" v-bind:class="{disabled: readOnly}"><%= __("Add") %></button>
                    <div id='incomplete' class='text-warning' style="display: none"><%= __("Incomplete form.") %></div>
                </div>
            </form>
        
            <div class="msgWindow" id="deleteMeetingWindow" v-bind:class="{shown: deleteWindowShown, hidden: !deleteWindowShown} " v-if="deleteWindowShown">
                <div class="message"><%= __("Do you really want to delete the meeting '{{deleteMeetingObj.shortname}}'?") %></div> <!-- important: the {{...}} MUST NOT be translated or changed!-->
                <div class="no" v-on:click="deleteWindowShown=false"><%= __("No") %></div>
                <div class="yes" v-on:click="deleteMeeting(deleteMeetingObj) ; deleteWindowShown=false"><%= __("Yes") %></div>
            </div>

            <div id="overlay" v-on:click="overlayVisible=false" v-bind:class="{shown: overlayVisible}">
                <!-- overlay used for displaying general information -->
                <div id="overlayContainer">
                    <div id="overlayTitle"><b>{{overlayTitle}}</b></div>
                    <div id="overlayContent">{{overlayContent}}</div>
                </div>
            </div>
        
        </div>

        <%- include('roomManagerDrawings') %>
    </body>
</html>

