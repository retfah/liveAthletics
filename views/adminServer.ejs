This is the first test of adminServer.
<div id="hallo"></div>
<div id="vueDiv"> <!-- inside here all the vue.js stuff -->

    <table class="table">
        <tr><th>Meeting-ID</th><th>Meeting-Name</th><th>take-over code</th><th>Active</th><th>is Slave</th><th>master address</th><th>master username</th><th>master password</th><th></th><th></th></tr>
        <template v-for="(meeting, meetingIndex) in meetings">
            <tr v-if="meeting.xMeeting!=updateMeeting">
                <td>{{meeting.xMeeting}}</td>
                <td>{{meeting.shortname}}</td>
                <td>{{meeting.name}}</td>
                <td>{{meeting.code}}</td>
                <td>{{meeting.active ? "<%= __("Yes") %>" : "<%= __("No") %>" }}</td>
                <td>{{meeting.isSlave ? "<%= __("Yes") %>" : "<%= __("No") %>" }}</td>
                <td>{{meeting.masterAddress}}</td>
                <td>{{meeting.masterUsername}}</td>
                <td>{{meeting.masterPassword}}</td>
                <td style="padding:0.4rem"><button class="btn btn-secondary" v-on:click=" startUpdating(meeting)" :disabled="readOnly" v-bind:class="{disabled: readOnly}"><%= __("Change") %></button></td> 
                <td style="padding:0.4rem"><button class="btn btn-danger" v-on:click=" deleteMeetingObj=meeting; deleteWindowShown=true;" :disabled="readOnly" v-bind:class="{disabled: readOnly}"><%= __("Delete") %></button></td> <!-- btn-primary-->
                <!-- TODO: add a status of the meeting (Starting, started, stopping, stopped) instead of only the active field 
                add further buttons for export database, export meeting (=database + this line, e.g. in a zip), import database; 
                add a general button to import meetings-->
            </tr>
            <!--<tr v-if="meeting.xMeeting==updateMeeting">
                <td>{{meeting.xMeeting}}</td>
                <td><input type="text" v-model="meeting.shortname" v-on:blur="saveUpdate(meeting, meetingBeforeUpdate, meetingIndex)"></td>
                <td><input type="text" v-model="meeting.code" v-on:blur="saveUpdate(meeting, meetingBeforeUpdate, meetingIndex)"></td>
                <td>{{meeting.active ? "<%= __("Yes") %>" : "<%= __("No") %>" }}</td>
                <td><input type="checkbox" v-model="meeting.isSlave" v-on:blur="saveUpdate(meeting, meetingBeforeUpdate, meetingIndex)"></td>
                <td><input type="text" v-model="meeting.masterAddress" v-on:blur="saveUpdate(meeting, meetingBeforeUpdate, meetingIndex)"></td>
                <td><input type="text" v-model="meeting.masterUsername" v-on:blur="saveUpdate(meeting, meetingBeforeUpdate, meetingIndex)"></td>
                <td><input type="text" v-model="meeting.masterPassword" v-on:blur="saveUpdate(meeting, meetingBeforeUpdate, meetingIndex)"></td>
                <td style="padding:0.4rem"><button class="btn btn-success" v-on:click=" saveUpdate(meeting, meetingBeforeUpdate, meetingIndex)"><%= __("Save") %></button></td>
                <td style="padding:0.4rem"><button class="btn btn-secondary" v-on:click=" abortUpdate(meetingIndex); "><%= __("Abort") %></button></td>
            </tr>-->
            <tr v-if="meeting.xMeeting==updateMeeting">
                <td>{{meeting.xMeeting}}</td>
                <td><input type="text" v-model="meeting.shortname" size=10></td>
                <td><input type="text" v-model="meeting.name" size=75></td>
                <td><input type="text" v-model="meeting.code"></td>
                <td>{{meeting.active ? "<%= __("Yes") %>" : "<%= __("No") %>" }}</td>
                <td><input type="checkbox" v-model="meeting.isSlave" ></td>
                <td><input type="text" v-model="meeting.masterAddress" ></td>
                <td><input type="text" v-model="meeting.masterUsername" size=15></td>
                <td><input type="text" v-model="meeting.masterPassword" size=15></td>
                <td style="padding:0.4rem"><button class="btn btn-success" v-on:click=" saveUpdate(meeting, meetingBeforeUpdate, meetingIndex)"><%= __("Save") %></button></td>
                <td style="padding:0.4rem"><button class="btn btn-secondary" v-on:click=" abortUpdate(meetingIndex); "><%= __("Abort") %></button></td>
                </tr>
        </template>
    </table>
    <form id="new">
        <div class="container border rounded p-3">
            <label class="h4" form="new"><%= __("Add new meeting") %></label>
            <!--<input type="hidden" id="id" value={{}}>-->
            <div class="form-group">
                <label for="shortname"><%= __("Shortname") %></label>
                <input type="text" id="shortname" maxlength=10 class="form-control">
            </div>
            <div class="form-group">
                <label for="name"><%= __("Name") %></label>
                <input type="text" id="name" maxlength=75 class="form-control">
            </div>
            <div class="form-group">
                <label for="code"><%= __("Take-over code") %></label>
                <input type="text" id="code" maxlength="50" class="form-control">
            </div>
            <div class="form-check">
                <input class="form-check-input" type="checkbox" id="active" checked>
                <label class="form-check-label" for="active"><%= __("Activate") %></label>
            </div>
            <div class="form-check">
                <input class="form-check-input" type="checkbox" id="isSlave" v-model="isSlave">
                <label class="form-check-label" for="isSlave"><%= __("Slave mode") %></label>
            </div>
            <div v-bind:hidden="!isSlave">
                <div class="form-group" > <!--TODO: add style here with vue, such that it is hidden when slave is false-->
                    <label for="masterAddress"><%= __("URL to master") %></label>
                    <input type="text" class="form-control" maxlength=100 id="masterAddress">
                    <small><%= __("Port can be specified after a trailing colon (:).") %></small>
                </div>
                <div class="form-group" > <!--TODO: add style here with vue, such that it is hidden when slave is false-->
                    <label for="masterUsername"><%= __("Master username") %></label>
                    <input type="text" class="form-control" maxlength=45 id="masterUsername">
                </div>
                <div class="form-group">
                    <label for="masterPassword"><%= __("Master password") %></label>
                    <input type="text" class="form-control" maxlength=45 id="masterPassword">
                </div>
            </div>
            <button type="button" class="btn btn-primary" onclick="vueMeetings.addMeeting_init();" :disabled="readOnly" v-bind:class="{disabled: readOnly}"><%= __("Add") %></button>
            <!--<button type="button" class="btn btn-primary" v-on:click="vueMeetings.addMeeting_init();" :disabled="readOnly" v-bind:class="{disabled: readOnly}"><%= __("Add") %></button>-->
            <div id='incomplete' class='text-warning' style="display: none"><%= __("Incomplete form.") %></div>
        </div>
    </form>

    <div class="msgWindow" id="deleteMeetingWindow" v-bind:class="{shown: deleteWindowShown, hidden: !deleteWindowShown} " v-if="deleteWindowShown">
        <div class="message"><%= __("Do you really want to delete the meeting '{{deleteMeetingObj.shortname}}'?") %></div> <!-- important: the {{...}} MUST NOT be translated or changed!-->
        <div class="no" v-on:click="deleteWindowShown=false"><%= __("No") %></div>
        <div class="yes" v-on:click="deleteMeeting(deleteMeetingObj) ; deleteWindowShown=false"><%= __("Yes") %></div>
    </div>
    

</div>


<script src="/vue.js" type="text/javascript"></script>
<script src="/roomClient.js" type="text/javascript"></script>
<!--<script src="/rMeetingsClient.js" type="text/javascript"></script> DO NOT IMPORT THIS ANYMORE: IT WILL BE DYNAMICALLY IMPORTED IN THE ROOMMANAGER-->
<script type="text/javascript">

// new way
//var rMeetings;
var vueMeetings;


// do everything with Vue now in this class
class vuMeetings extends roomClientVue{

constructor(){

    // parent constructor: initializes the room
    super('meetings', true, true, '/rMeetingsClient.js', 'rMeetingsClient')

    // the vueApp        
    //this.vueServerAdmin = new Vue({
    let vueServerAdminConfig = {
        data(){
            return {isSlave:false, updateMeeting:-1, meetings:[{name: 'Meeting 1', date:'01-01-1995'}, {name: 'Meeting 2', date:'28-03-1992'}], readOnly: true, deleteWindowShown: false, deleteMeetingObj: {}}},
        methods:{

            // TODO: check: If the following is written with function(){}, this will be the vue-object. If written as an arrow function ()=>{}, this will be the room-object

            deleteMeeting:(meeting)=>{
                this.deleteMeeting_init(meeting);
            },

            // ATTENTION: in the worst case, the meetingIndex might have (-->test it!) changed since the update was started (when another client added or deleted a meeting)!. Thus we always have to check whether the  xMeeting is still te right. 
            // --> actually I think the ID does change in the background, as a new meeting will result in redrawing of the elements
            // TODO: check

            startUpdating:function(meeting){
                // show the input fields
                this.updateMeeting = meeting.xMeeting;

                // store the old data (used on abort)
                this.meetingBeforeUpdate = JSON.parse(JSON.stringify(meeting));
            },
            abortUpdate: function(meetingIndex){
                // check that the meeting stored behind the index is still the correct!
                
                // index is not the same meeting anyore --> get the actual index of the meeting

                // reset the meeting
                this.meetings[meetingIndex] = this.meetingBeforeUpdate;

                // disable update mode
                this.updateMeeting=-1;
            },
            saveUpdate: (meeting)=>{
                // meetingBeforeUpdate is needed for the reset function when there was an error on the server.
                
                // start storing the update
                this.updateMeeting_init(meeting, this.vueServerAdmin.meetingBeforeUpdate);

                // disable update mode
                this.vueServerAdmin.updateMeeting=-1;
            }
        }
    };

    this.vueServerAdmin = Vue.createApp(vueServerAdminConfig).mount('#vueDiv');
        //el:'#vueDiv',
}

/**
 * called when a a writing ticket is stored or deleted
 */
onWritingTicketChange(){
    if (this.writingTicketID){
        this.vueServerAdmin.readOnly = false;
    } else {
        this.vueServerAdmin.readOnly = true;
    }
}

afterFullreload(){
    // set the changed data-property as data of the vue-instance
    this.vueServerAdmin.meetings = this.data;
}

dataArrived(){
    // raised as soon as the room has its data stored for the first time
    // TODO: what about views? They probably also need something like this
    
    this.vueServerAdmin.meetings = this.room.data;

    if (this.room.writingTicketID){
        this.vueServerAdmin.readOnly = false;
    } else {
        this.vueServerAdmin.readOnly = true;
    }
}

randomTakeOverCode() {
    let length           = 8;
    var result           = '';
    var characters       = 'ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789';
    var charactersLength = characters.length;
    for ( var i = 0; i < length; i++ ) {
        result += characters.charAt(Math.floor(Math.random() * charactersLength));
    }

    document.getElementById('code').value = result;
    //return result;
}

addMeeting_init(){

    // check that important fields are not empty:
    let sn = document.getElementById('shortname').value;
    let code = document.getElementById('code').value;
    if (sn=='' || code==''){
        document.getElementById('incomplete').style.display = 'inline';
        setTimeout(()=>{document.getElementById('incomplete').style.display = 'none';}, 10000) // after 10 seconds remove the note
        return;
    }

    let name = document.getElementById('name').value;
    let active = document.getElementById('active').checked;
    let isSlave = document.getElementById('isSlave').checked;
    let masterAddress = document.getElementById('masterAddress').value;
    let masterUsername = document.getElementById('masterUsername').value;
    let masterPassword = document.getElementById('masterPassword').value;

    this.room.addMeeting_init2(sn, code, name, active, isSlave, masterAddress, masterUsername, masterPassword)

    // create a new random takeover code
    this.randomTakeOverCode();

}

deleteMeeting_init(meeting){
    this.room.deleteMeeting_init2(meeting.xMeeting);
}

/**
 * 
 * @param {object} meeting 
 * @param {object} meetingBeforeUpdate the meeting as it was before the update. Needed for undo if there is an error on the server.
 * @param {object} meetingIndex the index in the array of meetings
 */
updateMeeting_init(meeting, meetingBeforeUpdate, meetingIndex){

    this.room.updateMeeting_init2(meeting, meetingBeforeUpdate, meetingIndex);

}
}

/**
 * load: is automatically called after loading the page
 */
function load(){

    // restructuring rooms and views, to accept multiple vue's per room/view and to use the roomManager to get the room-data (i.e. do not start the room here!)
    // 1. separate the vue from the room
    // 2. start-up of the room via roomManager.
    // let v = new vuMeetings()
    vueMeetings = new vuMeetings();

    
    // OLD: 
    // create new meetings-room
    /*rMeetings = new rMeetingsClient(wsHandler, eH);

    rM.registerRoom(rMeetings);*/

}


function adminServerUnload(){

    // TODO!!!
    // destroy the view, which shall unregister from the room, which shall either destroy itself OR unregistering runs through the roomManager, which checks if there are other vues or destroys the room.

    // must return true on success

    // leave the room
    //rMeetings.leave()

    //document.getElementById('hallo').innerText = 'unloaded!';
    return true;
}


// OLD:

// the vueApp must be globally available
var vueServerAdmin;

/**
 * The script beeing called after loading (as set in page.onLoad)
 */
function loadOld(){
    document.getElementById('hallo').innerText = 'loaded!'; // --> works; TODO: remove

    vueServerAdmin = new Vue({
    el:'#vueDiv',
    data:{isSlave:false, something:'Hello World', meetings:[{name: 'Meeting 1', date:'01-01-1995'}, {name: 'Meeting 2', date:'28-03-1992'}]}
    });
    
    //[{place:"[1,2]", value:"MAN"}, {place:"[1,3]", value:"U20M"}, {place:"[1,4]", value:"WOM"}, {place:"[1,5]", value:"U20W"},{place:"[2,1]", value:"10:00"}, {place:"[2,3]", value:"60m"}, {place:"[2,4]", value:"Weit"}, {place:"[3,1]", value:"10:30"}, {place:"[3,5]", value:"60m H"}]
    
    x={hello:[1,2,3], world:[3,4,5]};

    // start the Admin/Meeting-room connection and fill the table with the meetings. Additionally link the new-Meeting-form with the respective funciton of the room.

    // check if wsConnection is established: 
    if (wsHandler.sidReported){
        // start connecting the room now
        roomConnect();
    } else {
        // wait for connection and reported sid and then connect to rrom
        eH.eventSubscribe('SIDset', ()=>{
            eH.eventUnsubscribe('SIDset', roomConnect);
            roomConnect();
        });
    }

    //this.roomConnected = false;

    function roomConnect(writing=true){
        
        wshandler.emitRequest('room', {
            roomName: 'meetings', // the name of the room
            arg: 'enter', // enter room
            opt: {writing:writing} // options, e.g. the current ID present on the client; It could also be an object, as it is needed with functions
        }, success=(data)=>{
            //this.roomConnected=true; 
            vueServerAdmin.meetings = data;
        }, failure=(code, msg)=>{
            // TODO: show this error differently to the user
            logger.log(3, 'Connecting to room failed with the following code and message: ' + code + ": " + msg);
        });
    }

}


function unloadOld(){
    // must return true on success

    document.getElementById('hallo').innerText = 'unloaded!';
    return true;
}

</script>