<script>

    class vuContestsOverview extends roomClientVue{
        
        constructor(vue, meetingShortname){
            // parent constructor: initializes the room
            //(roomName, writing, storeInfos, path, className, datasetName='')
            super('contestsOverview@' + meetingShortname, false, true, '/static/rContestsOverviewClient.js', 'rContestsOverviewClient', '')

            // needed to call things in the vue class
            this.vue = vue;
        }

        /**
         * called when a a writing ticket is stored or deleted
         */
        onWritingTicketChange(){
            
        }

        onChange(){
            //this.vue.$forceUpdate();
        }
        
        afterFullreload(){
            // set the changed data-property as data of the vue-instance
            this.vue.contestsOverview = this.room.data.contests;
            this.vue.baseDisciplines = this.room.data.disciplines;
            this.vue.categories = this.room.data.categories;

            // backtransfer the "proxied" data from the vue, so that changing data in the room runs through the proxy
            this.room.data.contests = this.vue.contestsOverview;
        }
        
        dataArrived(){

            // do just the same as above
            this.afterFullreload();

        }
    }

    var vueContestsOverview;
    var rCO; // room contests overview 

    function startupContestsOverview(){
        // the vueApp
        let vueAppConfig = {
            data(){
                return {
                    showFullDetails: true,
                    contestsOverview:[],
                    baseDisciplines:[],
                    categories:[],
                    data:"add the data here",
                    orr: "or here...",

                    // also gets seriesStates and participationStates
                    //<%- include('contestStates.ejs') %>

                }
            },
            methods:{
                /**
                 * returns the index and the object itself of the first object where the property prop is equal to value 
                 * @param {array of objects} arr 
                 * @param {string} prop 
                 * @param {*} val 
                 * @return {array} [index, the object]
                 */
                 findObjInArrayByProp(arr, prop, val){
                    for (let i=0; i<arr.length;i++){
                        if (arr[i][prop] == val){
                            return [i, arr[i]];
                        }
                    }
                    return [-1, {}];
                },
                getCategoryProperty: function(xCategory, prop){
                    let [ind, c] = this.findObjInArrayByProp(this.categories, 'xCategory', xCategory);
                    if (ind==-1){
                        return '';
                    } else {
                        return c[prop];
                    }
                },
                formatDate(dateString){
                    // first, get the first and last date of the competition (consider start, call and appealtime) 
                    let firstDate = new Date(9999,1,1);
                    let lastDate = new Date(0);
                    this.contestsOverview.forEach(co=>{
                        let d = new Date(co.datetimeAppeal);
                        if (d<firstDate){
                            firstDate = d;
                        }
                        if (d>lastDate){
                            lastDate = d;
                        }
                        d = new Date(co.datetimeStart);
                        if (d<firstDate){
                            firstDate = d;
                        }
                        if (d>lastDate){
                            lastDate = d;
                        }
                        d = new Date(co.datetimeCall);
                        if (d<firstDate){
                            firstDate = d;
                        }
                        if (d>lastDate){
                            lastDate = d;
                        }
                    })
                    let showMonth = lastDate.getMonth() != firstDate.getMonth();
                    let showDay = lastDate.getDay() != firstDate.getDay();

                    // exclude month if the competition does not span 2 month
                    // exclude day if the competition is on one day only
                    // TODO: this might be replaced in the future with start and enddate defined somewhere (not done yet; this data should be defined with other background inforamtion about the competition such as orgnaizer, place, stadium, ...) 
                    if (dateString==null){
                        return "";
                    }
                    var d = new Date(dateString);
                    var str = "";
                    if (showDay){
                        str += `${d.getDate()}`.padStart(2,'0') + ".";
                    }
                    if (showMonth){
                        str += `${d.getMonth()+1}`.padStart(2, '0') + ", "; // Month is zero based
                    }
                    if (showDay && !showMonth){
                        str += ' ';
                    }
                    str += `${d.getHours()}`.padStart(2, '0');
                    str += ":" + `${d.getMinutes()}`.padStart(2,'0');
                    return str;
                },
                getBaseDisciplineProperty: function(xDiscipline, prop){
                    let [ind, d] = this.findObjInArrayByProp(this.baseDisciplines, 'xBaseDiscipline', xDiscipline);
                    if (ind==-1){
                        return '';
                    } else {
                        return d[prop];
                    }
                },
                gotoContest(co){
                    // TODO: differentiate the status

                    let bd = this.baseDisciplines.find(bd=> bd.xBaseDiscipline==co.xBaseDiscipline);
                    if (bd){
                        if (bd.type==1){
                            window.location = "./techHighAdmin?xContest="+co.xContest; // TOOD: do this via the preloaded pages!
                        } else {
                            alert("<%= __('Could not find the page for this type of discipline.') %>");
                        }
                    } else {
                        alert("<%= __('Could not find the page for this type of discipline.') %>");
                    }
                },
                statusBackgroundColor(status){
                    let s = this.contestStates.find(s=>s.value==status);
                    if (s){
                        return s.backgroundColor;
                    }
                    return '#333333';
                },
                statusBackgroundColorHover(status){
                    let s = this.contestStates.find(s=>s.value==status);
                    if (s){
                        // split the hex code into the three parts and multiply it with 0.8
                        let f = 0.8;
                        let R = Math.round(f*parseInt(s.backgroundColor.slice(1,3),16));
                        let G = Math.round(f*parseInt(s.backgroundColor.slice(3,5),16));
                        let B = Math.round(f*parseInt(s.backgroundColor.slice(5,7),16));
                        return '#' + R.toString(16).padStart(2,0) + G.toString(16).padStart(2,0) + B.toString(16).padStart(2,0);
                    }
                    return '#111111';
                },
                statusTextColor(status){
                    let s = this.contestStates.find(s=>s.value==status);
                    if (s){
                        return s.textColor;
                    }
                    return status;
                },
                statusText(status){
                    let s = this.contestStates.find(s=>s.value==status);
                    if (s){
                        return s.text;
                    }
                    return status;
                },
            },
            computed:{
                contestsOverviewForList: function(){
                    //create a copy
                    let mod = Array.from(this.contestsOverview, el=>Object.assign({}, el)) ;

                    mod.forEach((co)=>{
                        co.formattedStart = this.formatDate(co.datetimeStart);
                        co.formattedCall = this.formatDate(co.datetimeCall);
                        co.formattedAppeal = this.formatDate(co.datetimeAppeal);
                        co.discName = this.getBaseDisciplineProperty(co.xBaseDiscipline, 'shortname');
                    })
                    this.formatDate

                    return mod;
                },
            },
            watch:{

            },
            components:{
                'v-table':VTable,
                'v-th': VTh,
                'v-tr':VTr,
            }
        }

        vueContestsOverview = Vue.createApp(vueAppConfig).mount('#vueContestsOverview');

        // load the room:
        let ms = getMeetingShortname();
        rCO = new vuContestsOverview(vueContestsOverview, ms);

    }

    function shutdownContestsOverview(){
        delete vueContestsOverview;
    }

</script>

<div id="vueContestsOverview">

    <!--<a href="seriesAdminTech?xContest=3">Test link for series management</a>-->

    <v-table :data="contestsOverviewForList" > <!-- :filters="contestFilter" -->
        <template #head> <!-- # head is a shorthand for v-slot:head-->
            <thead>
                <tr>
                    <th is="vue:v-th" sortkey="xContest" v-if="showFullDetails">xContest</th>
                    <th is="vue:v-th" sortkey="discName"><%= __("Discipline") %></th>
                    <th is="vue:v-th" sortkey="status"><%= __("Status") %></th>
                    <th is="vue:v-th" sortkey="formattedStart" defaultsort="asc"><%= __("Start") %></th>
                    <th is="vue:v-th" sortkey="formattedAppeal"><%= __("Appeal") %></th>
                    <th is="vue:v-th" sortkey="formattedCall"><%= __("Call") %></th>
                    <th ><%= __("Groups in EventGroups with Events") %></th>
                    <!-- TODO: add here a list of all eventgroups/events/rounds/groups in this contest -->
                </tr>
            </thead>
        </template>
        <template v-slot:body="{displayData}"> <!--v-slot:name="variables"-->
            <tbody class="selectTable">
                <tr v-for="co in displayData" :key="co.xContest" v-on:click="gotoContest(co)" v-bind:style="{ 'background-color': statusBackgroundColor(co.status), '--backColorHover': statusBackgroundColorHover(co.status), color: statusTextColor(co.status) }">
                    <td v-if="showFullDetails">{{co.xContest}}</td>
                    <td>{{co.discName}}</td>
                    <td>{{statusText(co.status)}}</td>
                    <td>{{co.formattedStart}}</td>
                    <td>{{co.formattedAppeal}}</td>
                    <td>{{co.formattedCall}}</td>
                    <td>
                        <div v-for="g in co.groups">
                            <template v-for="(evt, evtIndex) in g.events">
                                <div style="display:inline" v-if="evtIndex==0">{{getCategoryProperty(evt.xCategory, 'shortname')}}</div>
                                <div style="display:inline" v-else>/{{getCategoryProperty(evt.xCategory, 'shortname')}}</div>
                                <div style="display:inline; margin-left: 0.25em;" v-if="evt.info!=''">({{evt.info}})</div>
                            </template><!-- all categories defined in the events -->
                            <div style="display:inline; margin-left: 0.25em;">{{g.eventGroupName}} {{g.roundName}}</div>
                            <div style="display:inline; margin-left: 0.25em;" v-if="g.numGroups>1 && '<%= __(`Group`) %> ' + g.number.toString() != g.groupName"><%= __('Group') %> {{g.number}} "{{g.groupName}}"</div>
                            <div style="display:inline; margin-left: 0.25em;" v-if="g.numGroups>1 && '<%= __(`Group`) %> ' + g.number.toString() == g.groupName"><%= __('Group') %> {{g.number}}</div>
                        </div>
                    </td>
                </tr>
            </tbody>
        </template>
    </v-table>
</div>