
<!--
bases on the old meetingSelection.ejs, but does not use any websockets. Instead, the list of competitions, including those of other dataProviders, is provided in the document at delivery-time.
-->

<!DOCTYPE html>
<html lang="<%= lang %>">
    <head>
        <meta name="viewport" content="width=device-width,initial-scale=1"> <!-- make sure mobile browsers do not lie about their width and then do some ugly scaling -->
        <meta name="description" content="<%= __('LiveAthletics: Live results of swiss athletics competitions') %>">
        <title><%= __("LiveAthletics | Live results overview") %></title> 
        <link rel="icon" type="image/x-icon" href="/static/favicon_quickNdirty.ico">
        <!--<link rel="stylesheet" type="text/css" href="/static/bootstrap.min.css">-->
        <link rel="stylesheet" type="text/css" href="/static/styling.css">
        <!--<script src="/static/main.js" type="text/javascript"></script> -->
        <!--<script src="/static/vue.js" type="text/javascript"></script>-->
        <script src="/static/vue3.global.js" type="text/javascript"></script>
        <script src="/static/VTableComponent2.js" type="text/javascript"></script>
        <script src="/static/ajv.min.js"></script>
        
        <script type="text/javascript">

        function startup(){

            let vueMeetingSelectionConfig = {
                    data(){
                        return {
                            _dataProviders: <%- JSON.stringify(dataProviders) %>,
                            dataProviders:[], // will be filled with only the current meetings first; and with all meetings as soon as the current meetings were loaded to improve the felt speed
                            dateFrom: null,
                            dateTo: null,
                            userFrom: null,
                            userTo: null,
                            currentFrom: null, // the "from date" for the current seting
                            currentTo: null, // the "to date" for the current seting
                            searchString: '',
                            overlay:null, // options: setDate
                            overlayVisible: false, 
                            overlayTitle: '', 
                            overlayContent:''
                        };
                    },
                    methods:{
                        setDateCurrent(){
                            this.dateFrom = this.currentFrom;
                            this.dateTo = this.currentTo;
                        },
                        setDateAll(){
                            this.dateFrom = '2000-01-01';
                            this.dateTo = '2100-01-01';
                        },
                        link(href){
                            document.location = href;
                        },
                        applyUserRange(){
                            this.dateFrom = this.userFrom;
                            this.dateTo = this.userTo;
                            this.overlay=null
                        },
                    },
                    computed:{
                        selectedRangeStr: function(){
                            const formatter = Intl.DateTimeFormat(navigator.language, {day:"2-digit", month:'short', year:'numeric'}); 
                            if (this.dateFrom<=this.dateTo){
                                return formatter.formatRange(new Date(this.dateFrom), new Date(this.dateTo));
                            } else {
                                return '<%= __("By date") %>';
                            }
                        },
                        selectedView:function(){
                            // set this vaiable to either current, all or user
                            if (this.dateFrom == this.currentFrom && this.dateTo == this.currentTo){
                                return 'current';
                            } else if (this.dateFrom == '2000-01-01' && this.dateTo == '2100-01-01'){
                                return 'all';
                            } 
                            return 'user';
                        },
                        meetings: function(){
                            let ms = [];
                            for (let dp of this.dataProviders){
                                ms.push(...dp.meetings);
                            }

                            // create the nicely looking date formatting; JS has everything that is needed (very cool)
                            const formatter = Intl.DateTimeFormat(navigator.language, {day:"2-digit", month:'short', year:'numeric'}); 
                            // TODO: use potentially an even shorter format on mobile
                            for (let m of ms){
                                try{
                                    m.dateStr = formatter.formatRange(new Date(m.dateFrom), new Date(m.dateTo));
                                } catch (error){
                                    console.log(`${m.name} has invalid dates: dateFrom: ${m.dateFrom}, dateTo: ${m.dateTo}`)
                                    m.dateStr = '';
                                }
                            }

                            return ms;
                        },
                        dateFilteredMeetings: function(){
                            return this.meetings.filter(m=>{
                                return !(m.dateTo<this.dateFrom || m.dateFrom>this.dateTo)
                            })
                        },
                        filters: function(){
                            // create a custom filter for everything that filters by name, place and date at the same time. 
                            
                            // split the input string by whitespace
                            let filterWords = this.searchString.split(" ");

                            // every word may be part of every of the four columns
                            let filter = {};
                            let i=1;
                            for (let filterWord of filterWords){
                                filter["filter" + i] = {keys:['name', 'dateStr', 'dateTo', 'dateFrom', 'place'], value:filterWord} //
                                i += 1;
                            }
                            return filter;

                        },
                        basePath: ()=>{
                            // derive the base path from the current path
                            // origin = 'https://www.xy.com:1234', pathname = /hello/world.php, href: 'https://www.xy.com:1234/hello/world.php'

                            return window.location.origin + window.location.pathname.split('/').slice(0,2).join('/') + "/";

                        }
                    },
                    created(){
                        // copy only the current meetings to 
                        const propsToCopy = ["name", "lastUpdated", "showAlternate", "directHyperlink"] // apart of meetings
                        for (let dp of this._dataProviders){
                            let o = {};
                            for (let p of propsToCopy){
                                o[p] = dp[p];
                            }
                            o.meetings = dp.meetingsCurrent;
                            this.dataProviders.push(o)
                        }

                        // set the default range: current date -2 +5 days (i.e. one week, including the current or next weekend)
                        let d = new Date();
                        d.setDate(d.getDate()+ <%- currentRangeFrom %>);
                        this.dateFrom = d.toISOString().slice(0,10);
                        this.currentFrom = this.dateFrom;
                        d.setDate(d.getDate()+ <%- currentRangeTo %>);
                        this.dateTo = d.toISOString().slice(0,10);
                        this.currentTo = this.dateTo;

                        // initial values for the user settings
                        this.userFrom = this.currentFrom;
                        this.userTo = this.currentTo;
                    },
                    mounted() {

                        // should be called when everything is loaded.
                        for (let dp of this._dataProviders){
                            // add all meetings
                            let dp2 = this.dataProviders.find(d=>d.name==dp.name);
                            dp2.meetings = dp.meetings;
                        }

                    },
                    components:{
                        'v-table':VTable,
                        'v-th': VTh,
                        'v-tr':VTr,
                    }
                };

            vueMeetings = Vue.createApp(vueMeetingSelectionConfig).mount('#meetingSelection');

        }
        
        var vueMeetings;
        
        </script>
    </head>
    <body onload = "startup()"">
        <div class="centerContainer">
            <div id="meetingSelection" style="min-width: min(100%, 600px);"> <!-- inside here all the vue.js stuff -->
                <!-- two kinds of filters: date from/to and plaintext (searching the name, date, and place)-->
                <!-- date filters: buttons for "current" (chosen by default) "all" and genauer -->
                <h1 style="font-size: medium;">
                    <%= __("LiveAthletics: Live results of swiss athletics competitions") %>
                </h1>
                <div class="headRow">
                    <input type="search" class="formCtrl" style="width:300px; flex-basis:300px;" v-model="searchString" placeholder="<%= __('Search: name, place, date') %>">
                </div>
                <div class="headRow">
                    <button type="button" class="btn " v-bind:class="{btnSelected:selectedView=='current'}" v-on:click="setDateCurrent"><%= __("Current") %></button>
                    <button type="button" class="btn " v-bind:class="{btnSelected:selectedView=='all'}" v-on:click="setDateAll"><%= __("All") %></button>
                    <button type="button" class="btn " v-bind:class="{btnSelected:selectedView=='user'}" v-on:click="overlay='setDate'">
                        <template v-if="selectedView=='user'">
                            {{selectedRangeStr}}
                        </template>
                        <template v-else>
                            <%= __("By date") %>
                        </template>
                    </button>
                </div>
                <template v-for="dp in dataProviders">
                    <div class="headRow alert" v-if="dp.showAlternate">
                        <a v-bind:href="dp.directHyperlink"><%= __("Attention: {{dp.name}} data might be outdated. Please find here the latest {{dp.name}} data.") %></a>
                    </div>
                </template>
                <v-table :data="dateFilteredMeetings" :filters="filters">
                    <template #head>
                        <thead>
                            <tr>
                                <th is="vue:v-th" sortkey="dateFrom" defaultsort="desc"><%= __("Date") %></th>
                                <th is="vue:v-th" sortkey="name" ><%= __("Name") %></th>
                                <th is="vue:v-th" sortkey="place" ><%= __("Place") %></th>
                            </tr>
                        </thead>
                    </template>
                    <template v-slot:body="{displayData}"> <!--v-slot:name="variables"-->
                        <tbody>
                            <tr v-on:click="link(row.hyperlink)" v-for="row in displayData" :key="row.hyperlink">
                                <td>{{ row.dateStr }}</td>
                                <td>{{ row.name }}</td>
                                <td>{{ row.place }}</td>
                            </tr>
                            <tr v-if="displayData.length==0 && dateFrom != '2000-01-01' && dateTo != '2100-01-01' && searchString.trim() != ''">
                                <td colspan="3" v-on:click="setDateAll"><%= __("Could not find a matching meeting within the selected date range. Click here to search in all meetings.") %></td>
                            </tr>
                            <tr v-if="displayData.length==0 && dateFrom != '2000-01-01' && dateTo != '2100-01-01' && searchString.trim() == ''">
                                <td colspan="3" v-on:click="setDateAll"><%= __("No meetings within the selected date range. Click here to show all meetings.") %></td>
                            </tr>
                        </tbody>
                    </template>
        
                </v-table>
    
                <div class="overlay" v-bind:class="{shown: overlay=='setDate'}">
                    <div class="overlayContainer">
                        <form>
                            <div class="verticalForm">
                                <h3><%= __("Set date from/to") %></h3>
                                <label>
                                    <%= __("from") %>
                                    <input type="date" v-model="userFrom" class="formCtrl">
                                </label>
                                <label>
                                    <%= __("to") %>
                                    <input type="date" v-model="userTo" class="formCtrl">
                                </label>    
                                <button type="button" class="btn btnGreen" v-on:click="applyUserRange"><%= __('Apply') %></button>
                                <button type="button" class="btn btnRed" v-on:click="overlay=null"><%= __('Abort') %></button>
                            </div>
                        </form>
                    </div>
                </div>
    
                <div id="overlay" v-on:click="overlayVisible=false" v-bind:class="{shown: overlayVisible}">
                    <!-- overlay used for displaying general information -->
                    <div id="overlayContainer">
                        <div id="overlayTitle"><b>{{overlayTitle}}</b></div>
                        <div id="overlayContent">{{overlayContent}}</div>
                    </div>
                </div>
                
            
            </div> <!-- vueDiv -->
        </div> <!-- centercontainer -->
    </body>
</html>

