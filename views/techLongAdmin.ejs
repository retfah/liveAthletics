
<div id="vueSeriesAdminTech">
    <div class="notWriting"  v-if="readOnly">
        <%= __('Currently this client has no rights to do changes.') %><button type="button" tabindex="-1" class="information" v-on:click="overlayInfo('<%= __('Writing rights') %>:', '<%= __('There can only be one writing client at a time. If a former writing client has not left properly, you can revoke its writing rights by clicking on connection/contests... and the red (=offline) client with the W. Do not revoke its writing rights when the client is just temporarily offline, e.g. due to a network interuption. Otherwise the client will not be able to upload its locally applied changes on reconnect.') %>')"><%= __('i') %></button>
    </div>
    <div class="hideDesktop flexHeadline"><!-- This is the head, contianing the title and the hamburger menu on small screens -->
        <input class="side-menu" type="checkbox" id="side-menu" v-model="burgerChecked" />
        <label class="hamb" for="side-menu"><span class="hamb-line"></span></label>
        <h1>{{disciplines.find(d=>d.xBaseDiscipline==contest.xBaseDiscipline)?.name}}{{contest.name ? ' ' + contest.name : ''}} {{formatTime(contest.datetimeStart)}} </h1>
    </div>
    <div class="contest">
        <div class="nav" v-bind:class="{shown: burgerChecked}">
            <div class="navItem">
                <%= __("Status") %>: 
                <select class="formCtrl" v-model.number="contest.status" v-on:focus="statusFocus" v-on:change="statusChanged($event);" :disabled="readOnly" v-bind:style="{ 'background-color': statusBackgroundColor(contest.status), '--backColorHover': statusBackgroundColorHover(contest.status), color: statusTextColor(contest.status) }">
                    <template v-for="status in contestStates">
                        <option v-bind:value="status.value" v-bind:style="{ 'background-color': status.backgroundColor,  '--backColorHover': statusBackgroundColorHover(status.value), color: status.textColor }">
                            {{status.text}}
                        </option>
                    </template>
                </select>
            </div>
            <div class="navItem" v-if="contest.status>=95 && contest.status<=180 && series.length>0">
                <div v-if="series.length>1" style="padding-bottom:5px;">
                    <%= __("Series Selection") %>
                    <select class="content dropdown" v-model="selectedSeries" v-on:change="selectedSeriesChanged">
                        <option v-for="(seriesEl, seriesIndex) in series" v-bind:value="seriesIndex">
                            {{seriesEl.number}} <div v-if="seriesEl.name">{{seriesEl.name}}</div> <!--if undefined, the name shall not be shown-->
                        </option>
                        <option v-if="mergeSeries>0"><%= __("Merged final") %></option v-bind:value="series.length"><!-- extra option for the merged final -->
                    </select>
                </div>
                <%= __("Series Status") %>
                <select class="content dropdown" :value="series[selectedSeries].status" v-on:change="seriesStatusChanged(series[selectedSeries], $event)" :disabled="readOnly" v-bind:style="{ 'background-color': statusBackgroundColor(series[selectedSeries].status, seriesStates), '--backColorHover': statusBackgroundColorHover(series[selectedSeries].status, seriesStates), color: statusTextColor(series[selectedSeries].status, seriesStates) }">
                    <option v-for="option in seriesStates" v-bind:value="option.value" v-bind:style="{ 'background-color': option.backgroundColor,  '--backColorHover': statusBackgroundColorHover(option.value, seriesStates), color: option.textColor }">
                        {{option.text}}
                    </option>
                </select><br>
            </div>
            <a class="navItem" v-on:click="show='contestInfo'; burgerChecked=false" v-bind:class="{active: show=='contestInfo'}">
                <%= __('Contest info') %>
            </a>
            <a class="navItem" v-on:click="show='settings'; burgerChecked=false" v-bind:class="{active: show=='settings'}">
                <%= __('Settings') %>
            </a>
            <!-- Roll call: -->
            <div v-if="contest.status<39">
                <a class="navItem" v-on:click="show='rollCall'; burgerChecked=false" v-bind:class="{active: show=='rollCall'}">
                    <%= __('Roll call') %>
                </a>
            </div>

            <!-- Series assignment: -->
            <div v-if="contest.status>=60 && contest.status<=89">
                <a class="navItem" v-on:click="show='series'; burgerChecked=false" v-bind:class="{active: show=='series'}">
                    <%= __('Series assignment') %>
                </a>
            </div>

            <!-- Competition: -->
            <div v-if="contest.status>=95 && contest.status<=180 && series.length>0">
                <a class="navItem" v-on:click="show='competition'; burgerChecked=false" v-bind:class="{active: show=='competition'}">
                    <%= __('Competition') %>
                </a>
                <a class="navItem" v-on:click="show='order'; burgerChecked=false" v-bind:class="{active: show=='order'}">
                    <%= __('Athletes order') %>
                </a>
                <a class="navItem" v-on:click="show='resMod'; burgerChecked=false" v-bind:class="{active: show=='resMod'}">
                    <%= __('Change results') %>
                </a>
            </div>
            <div v-if="contest.status>=95 && series.length>0">
                <a class="navItem" v-on:click="show='resShow'; burgerChecked=false" v-bind:class="{active: show=='resShow'}">
                    <%= __('Show results') %>
                </a>
            </div>

        </div>
        <div class="main" style="padding-left:10px">
            <!--
        TODO: initially create the series in an overlay or not: 
            pro: 
                - reduces the number of changes sent over the network
                - the spectators anyway do not need to see it, when it is done.
            contra:
                - we either need separate functions where we still have the single changes separately OR the server must find the changes between the series before and after and then translate this to single changes. This would mean additional programming effort. 
            think about which functions should exist and what they should do and find a simple solution: 
            - addSeriesAndAthletes: This is made only for the initial series definition; add series and set seriesStartsResults where xStartgroup =...; athletes must not have had a previous series assignment!
            - addSeries: simply add a series; do not assign any athletes yet
            - assignAthlete: assign an athlete to a series (it is either a ); automatically delete it from possible prevoious series; always check first that there were no results!
            - resignAthlete: delete seriesStartResult for a certain athelete, i.e. it can be reassigned again later
            - deleteSeries: delete a series and all athletes (=all seriesStartsResult entries for this series); only if there were no results yet
            - changeSeries: change a property of the series (Name, time, ...), but not the athletes of it
            - reorderSeries: might be needed, especially when we swap series and we have a constrain, that every seriesindex shall exist only once -> then we need that both indices are changed at the same time.
    
            simple: assigning positions 
    
            difficulties: assignment of equal lanes to multiple persons in 600m/800m
            idea: two step approach: first define the series and the positions, then provide a button/function to automatically create lanes from the positions. This shall be shown in textfields, which can also be manually overriden.
            The hole function should probably be accessible on request, while otherwise lane=position and no textfield for the lane is shown. (show yes/no slider for lane=position)-->
            
            <!-- TODO: put the following together with the table in a collapsable tool.-->

            <!-- Show this header only on desktop -->
            <div class="hideMobile">
                <h1>{{disciplines.find(d=>d.xBaseDiscipline==contest.xBaseDiscipline)?.name}}{{contest.name ? ' ' + contest.name : ''}} {{formatTime(contest.datetimeStart)}} </h1>
            </div>
            <div v-if="show=='contestInfo'">
                <h2><%= __('Contest info') %></h2>
                <div style=" margin: 3px;"><%= __('Appeal time') %>: {{formatTime(contest.datetimeAppeal)}}</div>
                <div style=" margin: 3px;"><%= __('Call time') %>: {{formatTime(contest.datetimeCall)}}</div>
            
                <!--Contest: {{contest.xContest}}<br>-->
                <br>
                <table>
                    <th>
                        <tr>
                            <td><%= __("Events") %><br><%= __("Category (info)") %></td>
                            <td v-if="developMode">xEventGroup</td>
                            <td><%= __("Eventgroup name") %></td>
                            <td v-if="developMode">xRound</td>
                            <td><%= __("Round name") %></td>
                            <td><%= __("Round order") %></td>
                            <td><%= __("Group name") %></td>
                            <td><%= __("Group order") %></td>
                        </tr>
                    </th>
                    <template v-for="rG in relatedGroups">
                        <tr class="clickable" v-on:click="gotoQuali(rG)">               
                            <td>
                                <template v-for="(event, eventIndex) in rG.round.eventgroup.events">
                                    <br v-if="eventIndex>0">
                                    {{getCategory(event.xCategory)}}
                                    <div style="display: inline;" v-if="event.info">({{event.info}})</div>
                                    <div style="display: inline;" v-if="developMode">{{event.xEvent}}<div>
                                    <!-- for throws with different weights in the same contest  -->
                                    <!--{{disciplines.find(d=>d.xDiscipline==event.xDiscipline)?.shortname}}-->
                                
                                </template>
                                <!--<table>
                                    <template v-for="event in rG.round.eventgroup.events">
                                        <tr>
                                            <td>{{getCategory(event.xCategory)}}</td>
                                            <td>{{event.info}}</td>
                                            <td v-if="developMode">{{event.xEvent}}</td>
                                        </tr>
                                    </template>
                                </table>-->
                            </td>
                            <td v-if="developMode">{{rG.round.eventgroup.xEventGroup}}</td>
                            <td>{{rG.round.eventgroup.name}}</td>
                            <td v-if="developMode">{{rG.xRound}}</td>
                            <td>{{rG.round.name}}</td>
                            <td>{{rG.round.order}}</td>
                            <td>{{rG.name}}</td>
                            <td>{{rG.number}}</td>
                        </tr>
                    </template>
                    
                </table>

                <h3><%= __("Print") %></h3>
                <button type="button" class="btn" onclick="printSeriesTechLong()"><%= __("Print series")%></button>
                <button type="button" class="btn" onclick="printResultsTechLong()"><%= __("Print results")%></button>

                <h3><%= __("Links") %></h3>
                <!--<div><%= __("Live results") %>: TODO</div>-->
                <div><%= __("Field monitor") %>: <a v-bind:href="urlFieldMonitor">{{urlFieldMonitor}}</a> </div>

            </div>
    
    
            <div v-if="contest.status<=39 && show=='rollCall'">
                <!-- roll call:  -->
                <h2><%= __("Roll call") %></h2>
                <!-- TODO: eventually include paid status!<br> -->
                <!-- provide a table with all athletes and a select box of their status-->
                <label class="verticalForm" style="display: inline-block">
                    <%= __("Filter athletes") %><button type="button" tabindex="-1" class="information" v-on:click="overlayInfo('<%= __('Filtering') %>:', '<%= __('Filtering is possible by first and last name, club, bib, sex, club name and country. Any word must be present in one of the properties.') %>')"><%= __('i') %></button>: 
                    <input v-model="filterAthletes" type="search" size="30">
                </label>
                <!--<button style="display: inline-block;" type="button" v-on:click="filterAthletes=''" class="btn"><%= __("Reset filter") %></button>-->
                <v-table :data="startgroups" :filters="filters">
                    <template #head> <!-- # head is a shorthand for v-slot:head-->
                        <thead>
                            <tr>
                                <th><%= __("Present") %></th>
                                <th v-if="showFullDetails">xAthlete</th>
                                <th v-if="showFullDetails">xInscription</th>
                                <th is="vue:v-th" sortkey="bib" defaultsort="asc">Bib</th> <!-- is="vue:v-th is basically bthe same as <v-th   > , but the browser restricts the allowed tag names within tables, thus we need to use this syntax! Otherwise the browser will shift this outside"-->
                                <th is="vue:v-th" sortkey="athleteName"><%= __('Name') %></th>
                                <th is="vue:v-th" sortkey="athleteForename"><%= __('First name') %></th>
                                <th is="vue:v-th" sortkey="birthdate"><%= __('Year') %></th>
                                <th is="vue:v-th" sortkey="sex"><%= __('Sex') %></th>
                                <th is="vue:v-th" sortkey="clubName"><%= __('Club') %></th>
                                <!--<th is="vue:v-th" sortkey="country"><%= __('Country') %></th>-->
                                <th is="vue:v-th" sortkey="notificationPerf"><%= __('Registration value') %></th>
                                <th is="vue:v-th" sortkey="bestPerfLast"><%= __('SB') %></th>
                                <th is="vue:v-th" sortkey="bestPerf"><%= __('PB') %></th>
                            </tr>
                        </thead>
                    </template>
                    <template v-slot:body="{displayData}"> <!--v-slot:name="variables"-->
                        <tbody>
                            <tr v-for="row in displayData" :key="row.xInscription">
                                <td><input type="checkbox" :disabled="readOnly" v-model="row.present" v-on:change="presentChanged(row)"></td>
                                <td v-if="showFullDetails">{{row.xAthlete}}</td>
                                <td v-if="showFullDetails">{{row.xInscription}}</td>
                                <td>{{ row.bib }}</td>
                                <td>{{ row.athleteName }}</td>
                                <td>{{ row.athleteForename }}</td>
                                <td>{{ getYearShort(row.birthdate) }}</td><!--only take the last two digits-->
                                <td>{{ row.sex }}</td>
                                <td>{{ row.clubName }}</td>
                                <!--<td>{{ row.country }}</td>-->
                                <td>{{formatDistance(row.notificationPerf)}}</td>
                                <td>{{formatDistance(row.bestPerfLast)}}</td>
                                <td>{{formatDistance(row.bestPerf)}}</td>
                            </tr>
                        </tbody>
                    </template>
    
                </v-table>
                <button type="button" class="btn" v-on:click="endRollCallCreateSeries"><%= __("Finish roll call and create series") %></button>
            </div>
            
            <!-- TODO: create a general view for series assignment, apart of the initial assignment (to be shown when 60<=states<=89 and at least one series exists)  -->
            
            <template v-if="contest.status>=60 && contest.status<=89 && show=='series'">
                <button class="btn" v-if="series.length==0" v-on:click="showInitialSeriesAssignment()" :disabled="readOnly"><%= __("Create Series") %></button>
                <button class="btn" v-on:click="addSeries()" :disabled="readOnly"><%= __("Add a series") %></button>
                <button type="button" onclick="printSeriesTechLong()" class="btn btnGreen" v-if="series.length>0"><%= __("Print series") %></button>
                <button type="button" v-on:click="deleteAllSeriesInit()" class="btn btnRed" :disabled="readOnly" v-if="series.length>0"><%= __("Delete all series") %></button>
                <div v-if="series.length>0">
                    <div style="display: grid; grid-template-columns: auto auto; grid-template-areas: 'series athletes'; justify-content: stretch;">
                        <div style="grid-area: series; padding: 5px;">
                            <%= __("Series") %>: 
                            <draggable v-model="seriesAsStartgroups" item-key="number", group="seriesMain" @change="moveSeries">
                                <template #item="{element, index}">
                                    <div class="dragelement">
                                        <div class="seriesDragH" style="display: flex;">
                                            <div style="padding-top:7px"><%= __("SeriesSingular") %> {{index+1}}</div>
                                            <div style="flex-grow:1"></div>
                                            <input class="formCtrl" type="datetime-local" v-bind:value="formatInputDate(element.datetime)" 
                                                    v-on:blur="dateChanged(element, $event)" v-bind:min="minDateTime" v-bind:max="maxDateTime">
                                            <select v-if="defaultSite" class="formCtrl" @change="siteChanged(series, $event)">
                                                <option value="null"><%= __("Not defined") %></option>
                                                <template v-for="(site, i) in trackSites">
                                                    <option v-bind:selected="site.xSite == series.xSite" v-bind:value="site.xSite">{{site.name}}</option>
                                                </template>
                                            </select>
                                            <button class="formCtrl" type="button" @click="initDeleteSeries(element)">X</button>
                                        </div>
                                        <!-- we cannot use el for v-model, since it seems to be a copy of the actual element. However, series[ind] works fine -->
                                        <table style="width:100%; min-height:5px;">
                                            <thead>
                                                <th><%= __('Name') %></th>
                                                <th><%= __('First name') %></th>
                                                <th><%= __('Club') %></th>
                                                <th><%= __('Registration value') %></th>
                                                <th><%= __('SB') %></th>
                                                <th><%= __('PB') %></th>
                                            </thead>
                                            <tbody is="vue:draggable" v-model="seriesAsStartgroups[index].seriesstartsresults" item-key="index" group="athleteSeriesAssignment2" @change="changePosition(seriesAsStartgroups[index], $event)" v-bind:id="'s' + (index+1)" tag="tbody" > <!-- :empty-insert-threshold="10" -->
                                                <template #item="{element, index}">
                                                    <tr class="dragelementH">
                                                        <td>{{element.startgroup.athleteName}}</td>
                                                        <td>{{element.startgroup.athleteForename}}</td>
                                                        <td>{{element.startgroup.clubName}}</td>
                                                        <td>{{formatDistance(element.startgroup.notificationPerf)}}</td>
                                                        <td>{{formatDistance(element.startgroup.bestPerfLast)}}</td>
                                                        <td>{{formatDistance(element.startgroup.bestPerf)}}</td>
                                                    </tr>
                                                </template>
                                            </draggable>
                                        </table>
                                    </div>
                                </template>
                            </draggable>
                        </div>
                        <div style="grid-area: athletes; padding: 5px;">
                            <%= __("Athletes to assign") %>: 
                            <!--Use of v-table makes the things a little bit more complicated: Since v-table (dynamically) creates its copy of the actual data to sort this copied array, we cannot directly insert into this array, but we have to manually override to make the item being dropped in the outer array, i.e. not the array of v-table.-->
                            <v-table :data="unassignedAthletes" >
                                <template #head> 
                                    <thead>
                                        <tr>
                                            <th is="vue:v-th" sortkey="present"><%= __('Present') %></th>
                                            <th is="vue:v-th" sortkey="athleteName" defaultSort="asc"><%= __('Name') %></th>
                                            <th is="vue:v-th" sortkey="athleteForename"><%= __('First name') %></th>
                                            <th is="vue:v-th" sortkey="clubName"><%= __('Club') %></th>
                                            <th is="vue:v-th" sortkey="notificationPerf"><%= __('Registration value') %></th>
                                            <th is="vue:v-th" sortkey="bestPerfLast"><%= __('SB') %></th>
                                            <th is="vue:v-th" sortkey="bestPerf"><%= __('PB') %></th>
                                        </tr>
                                    </thead>
                                </template>
                                <template v-slot:body="{displayData}"> <!--v-slot:name="variables"-->
                                        <draggable v-model="displayData" item-key="index" group="athleteSeriesAssignment2"  @change="removeSSR"  tag="tbody">
                                            <template #item="{element, index}">
                                                <tr class="dragelementH">
                                                    <td>{{ element.present }}</td>
                                                    <td>{{ element.athleteName }}</td>
                                                    <td>{{ element.athleteForename }}</td>
                                                    <td>{{ element.clubName }}</td>
                                                    <td>{{formatDistance(element.notificationPerf)}}</td>
                                                    <td>{{formatDistance(element.bestPerfLast)}}</td>
                                                    <td>{{formatDistance(element.bestPerf)}}</td>
                                                </tr>
                                            </template>
                                        </draggable>   
                                </template>
                            </v-table>
                        </div>
                    </div>
        
                </div>
            </template> 

            <div v-if="show=='settings'">
                <h2><%= __('Settings') %></h2>
                <h3><%= __("Contest settings (effective for all series)") %></h3>
                <button class="btn" v-on:click="startUpdateConf"><%= __("Contest configuration") %></button>

            </div>
    
            <template v-if="contest.status>=95 && series.length>0"><!-- && contest.status<=180 -->
    
    
                <div v-if="show=='settings'" id="settings" style="width:100%">

                    <!-- TODO: format this -->
                    <h3><%= __("Series Settings") %></h3>
                    <!--<%= __("Jumpoff") %>
                    <div class="onoffswitch">
                        <input type="checkbox" v-model="conf.jumpoff" class="onoffswitch-checkbox" id="myonoffswitch" v-on:change="calculateNextAthlete">
                        <label class="onoffswitch-label" for="myonoffswitch">
                            <span class="onoffswitch-inner"></span>
                            <span class="onoffswitch-switch"></span>
                        </label>
                    </div>-->
    
                    <!--<%= __("Contest Status") %>
                    <select class="content dropdown" v-model="contest.status" >
                        <option v-for="option in contestStates" v-bind:value="option.value">
                            {{option.text}}
                        </option>
                    </select>-->
                    
    
                    <!--<%= __("Series Status") %>
                    <select class="content dropdown" v-model="series[selectedSeries].status" v-on:change="seriesStatusChanged" :disabled="readOnly">
                        <option v-for="option in seriesStates" v-bind:value="option.value">
                            {{option.text}}
                        </option>
                    </select>
                    <br>-->
                    <%= __("Auto advance") %><button type="button" tabindex="-1" class="information" v-on:click="overlayInfo('<%= __('Auto advance') %>:', '<%= __('If active, the software will automatically advance to the next athlete as soon as a result is entered. If this function is active, the countdown clock cannot be used.') %>')"><%= __('i') %></button>:
                    <div class="onoffswitch">
                        <input type="checkbox" v-model="autoAdvance" class="onoffswitch-checkbox" id="autoAdvanceSwitch" v-on:change="calculateNextAthlete" :disabled="readOnly">
                        <label class="onoffswitch-label" for="autoAdvanceSwitch">
                            <span class="onoffswitch-inner"></span>
                            <span class="onoffswitch-switch"></span>
                        </label>
                    </div>
                </div>
    
                <!-- change result mode, eventually including a mode to enter results in the TIC -->
    
                <!-- competition mode (standard): -->
                <div v-if="show=='competition'" id="competition" style="margin-right:auto">
                    <h2><%= __("Competition") %></h2>
                    <div v-if="mode == 0"><%= __("Nothing to show here") %></div>
                    <div v-if="mode == 1 || mode == 3" style="display:inline-block"> 
                        <div id="currentAth" v-if="position.length>0" class="athlete">
                            <div class="row2">                            
                                <div class="el"><%= __("Current athlete") %>: </div>
                            </div>
                            <div class="row2">
                                <div class="elText">{{auxData.xStartgroup[currentAthleteStart.xStartgroup].bib}}</div>
                                <div class="elText">{{auxData.xStartgroup[currentAthleteStart.xStartgroup].athleteName}} {{auxData.xStartgroup[currentAthleteStart.xStartgroup].athleteForename}}</div>
                                <div class="elText">{{birthdayToXX(auxData.xStartgroup[currentAthleteStart.xStartgroup].birthdate)}}</div>
                                <div class="elText">{{auxData.xStartgroup[currentAthleteStart.xStartgroup].countryCode}}</div>
                                <div class="elText">{{auxData.xStartgroup[currentAthleteStart.xStartgroup].clubName}}</div>
 
                                <button type="button" v-if="!readOnly" class="el" v-on:click="startUpdateParticipation(currentAthleteStart)"><%= __("Change participation status") %></button>
                            </div>
                            
                            <div class="row2">
                                <div class="elText">{{currentAttempt}}. <%= __("Attempt") %>: </div>
                                <div class="el2">
                                    <!-- 
                                        if no result yet (-1): select XO-
                                        if emtpy result (0): show entra for distance and wind 
                                        if result entered (res): select "vorlegen/stage/advance/next" -->
                                    <div v-if="resultInCurrentAttempt==-1"> 
                                        <button type="button" class="el width3" v-on:click="passed()" v-bind:disabled="readOnly">-</button>
                                        <button type="button" class="el width3" v-on:click="failed()" v-bind:disabled="readOnly">X</button>
                                        <button type="button" class="el width3" v-on:click="valid()" v-bind:disabled="readOnly">O</button>
                                        
                                    </div>
                                    <div v-else-if="resultInCurrentAttempt==0">
                                        <input class="formCtrl" type="text" placeholder="<%= __('Distance') %>" v-model="competitionDistance" size="4" inputmode="decimal">
                                        <input v-if="wind" class="el" type="number" step=0.1 placeholder="<%= __('Wind') %>" v-model.number="competitionWind" style="width:80px" inputmode="decimal" id="windCompetitionInput"> <!-- v-if="wind" -->
                                        <button type="button" class="el" v-on:click="saveResult()" v-bind:disabled="readOnly || competitionDistance=='' || (wind && competitionWind == null) "><%= __("Save") %></button>
                                    </div>
                                    <div v-else>
                                        <template v-if="readOnly">
                                            <!-- add some formatting -->
                                            {{resultToStr(resultInCurrentAttempt, true)}}
                                        </template>
                                        <template v-else>
                                            <button class="btn" type="button" v-on:click="calculateNextAthlete"><%= __("Advance") %></button> 
                                        </template>
                                    </div>
                                </div>
    
                                <input id="competitionRemark" class="el2 formCtrl" placeholder="<%= __('Remarks') %>" type="text" v-model="currentAthleteStart.resultRemark" v-on:blur="blurRemark(currentAthleteStart)" v-on:focus="focusRemark(currentAthleteStart)"
                                v-bind:disabled="readOnly">
                            </div>
                            <div class="row2" v-if="autoAdvance==false && resultInCurrentAttempt==-1">
                                <!-- time period stuff: -->
                                <div class="el2">
                                    <!-- Note: we use hours as minutes and minutes as seconds -->
                                    <input id="attemptTime" style="padding:6px 12px; border-radius: 4px; border: 1px solid rgb(206,212,218); line-height:24px; font-size: 16px;" type="time" max="6:00:00" v-model="attemptTimeSetting" v-if="!readOnly">
                                    <button type="button" class="el" v-on:click="setTime" v-if="!readOnly"><%= __("Set") %></button>
                                </div>
                                <div class="el2">
                                    <div style="display: inline-block;" v-if="roomAuxData[selectedXSeries].showAttemptPeriod">
                                        <button type="button" class="el width3" v-on:click="startPeriod" v-if="!readOnly">&#9654;</button>
                                        <button type="button" class="el width3" v-on:click="hidePeriod" v-if="!readOnly">&#9209;</button>
                                        <div style="display: inline-block; font-weight: bold; font-size:1rem; padding: 6px 12px; border: 1px solid rgb(206,212,218); border-radius: 4px;" v-bind:class="{yellowBg: last15}">{{shownTime}}</div>
                                    </div>
                              </div>
                            </div>
    
                            <div class="row2 athRes">
                                <div class="elText"><%= __("Rank") %>: 
                                    {{rankLocalizer(tempRankingData[selectedSeries][currentAthleteStart.xSeriesStart].rankUntil[conf.attempts-1], "<%- _lang %>")}}
                                    </div>
                                <div v-if="currentAttempt>1" class="elText"><%= __("Results so far") %>: </div>
                                <template v-for="res in currentAthleteStart.resultstech">
                                    <div class="elText">
                                        {{resultToStr(res, true)}}
                                    </div>
                                </template>
                            </div>
    
                        </div>
                        <br />
                        <div id="nextAth" v-if="positionNext.length>1" class="athlete">
                            <div class="row2">
                                <div class="elText"><%= __("Next athlete") %>: </div>
                            </div>
                            <div class="row2">
                                <div class="elText">{{auxData.xStartgroup[nextAthleteStart.xStartgroup].bib}}</div>
                                <div class="elText">{{auxData.xStartgroup[nextAthleteStart.xStartgroup].athleteName}} {{auxData.xStartgroup[nextAthleteStart.xStartgroup].athleteForename}}</div>
                                <div class="elText">{{birthdayToXX(auxData.xStartgroup[nextAthleteStart.xStartgroup].birthdate)}}</div>
                                <div class="elText Sl_hide">{{auxData.xStartgroup[nextAthleteStart.xStartgroup].countryCode}}</div>
                                <div class="elText Sl_hide">{{auxData.xStartgroup[nextAthleteStart.xStartgroup].clubName}}</div>
                            </div>
                            <div class="row2 athRes">
                                <div class="elText"><%= __("Rank") %>: 
                                    {{rankLocalizer(tempRankingData[selectedSeries][nextAthleteStart.xSeriesStart].rankUntil[conf.attempts-1], "<%- _lang %>")}}
                                    </div>
                                <div v-if="currentAttempt>1" class="elText"><%= __("Results so far") %>: </div>
                                <template v-for="res in nextAthleteStart.resultstech">
                                    <div class="elText">
                                        {{resultToStr(res, true)}}
                                    </div>
                                </template>
                            </div>
    
                        </div>
                        <div v-else-if="currentAttempt<conf.attempts" class="athlete">
                            <div class="row2">
                                <div class="elText">{{currentAttempt+1}}. <%= __("Attempt") %></div>
                            </div>
                        </div>
                    </div>
                    <div v-if="mode == 2">
                        <%= __("This series is finished. Continue in merged final as soon as all series are finished.") %>
                    </div>
                    <div v-if="mode == 4">
                        <%= __("The competition is finished.") %>
                    </div>
                </div>
                <div v-if="show=='order'" id="orderPosition" style="display:block">
                    <h2><%= __("Order of athletes") %></h2>
                    <!-- TODO: this button would ideally only be present if the order is not the default order -->
                    <button type="button" class="btn" v-on:click="resetPositions" v-if="JSON.stringify(this.position) != JSON.stringify(this.defaultPosition)">
                        <%= __("Reset order of athletes") %>
                    </button>
                    <%= __("Drag'n'drop") %> <button type="button" tabindex="-1" class="information" v-on:click="overlayInfo('<%= __('Jumping order of athletes') %>:', '<%= __('The order of athletes jumping on the current height can be (temporary) changed by dragging an athlete from one position to another. The current and next athlete are instantly updated, if needed. As soon as the current height changes, the order is reset to the default order and with the athletes that jump on the new height.') %>')"><%= __('i') %></button>
                    <ol>
                        <draggable style="display:inline-block;" v-model="position" @end="onPositionMovingEnded" item-key="index" :disabled="readOnly">
                            <template #item="{element, index}">   
                                <li class="item"> 
                                    <div class="dragelement" v-bind:class="{ current: currentAthleteStart?.xStartgroup==getStartByXSeriesStart(element).xStartgroup, next: nextAthleteStart?.xStartgroup==getStartByXSeriesStart(element).xStartgroup }">
                                        {{auxData.xStartgroup[getStartByXSeriesStart(element).xStartgroup]?.bib}} 
                                        {{auxData.xStartgroup[getStartByXSeriesStart(element).xStartgroup]?.athleteName}} {{auxData.xStartgroup[getStartByXSeriesStart(element).xStartgroup]?.athleteForename}}
                                    </div>     
                                </li>     
                            </template>
                        </draggable>
                    </ol>
        <!--
                    Same, but as grid
                    <draggable style="display: flex; flex-wrap: wrap; width: 400px; justify-content: center" v-model="position" @end="onPositionMovingEnded" item-key="index" :disabled="readOnly">
                        <template #item="{element, index}">   
                            <template v-if="index==position.length-1">
                                <div class="dragelement">
                                    {{auxData.xStartgroup[getStartByXSeriesStart(element).xStartgroup]?.bib}} 
                                    {{auxData.xStartgroup[getStartByXSeriesStart(element).xStartgroup]?.athleteName}} {{auxData.xStartgroup[getStartByXSeriesStart(element).xStartgroup]?.athleteForename}}
                                </div> 
                            </template>
                            <template v-else>
                                <div class="dragelement"> 
                                    {{auxData.xStartgroup[getStartByXSeriesStart(element).xStartgroup]?.bib}} 
                                    {{auxData.xStartgroup[getStartByXSeriesStart(element).xStartgroup]?.athleteName}} {{auxData.xStartgroup[getStartByXSeriesStart(element).xStartgroup]?.athleteForename}}
                                </div> 
                            </template>    
                        </template>
                    </draggable>-->
                </div>
                <div v-if="show=='resMod'" id="resultsView" v-if="mode>0" style="display:block">
                    <h2><%= __("View / add / change results") %>:</h2>
                    <%= __("Sorting") %>: 
                    <select v-model="sortValue1" class="dropdown marginS">
                        <option value="1"><%= __("Default sequence") %></option> <!-- means the order on the judge's sheet -->
                        <option value="2"><%= __("Rank") %></option>
                        <option value="3"><%= __("Name") %></option>
                        <option value="4"><%= __("Bib") %></option>
                    </select><br />
                    <button class="btn" type="button" v-on:click="deleteManyResultsInit"><%= __('Delete results dialog') %></button>
                    <!-- 
                    Two different styles, based on the display size (mobile/desktop):
                    Desktop:
                    Show a grid for all attempts; compared to a table this has the benefit that the results do not need to be sorted and missing results are no problem.
                    Mobile: similar as in techHigh: results are below the name and before remark and resultoverrule.
                    In both cases:
                    Currently, the idea is to show a button for each result (also the missing ones). For the selected result, instead show a text field for the reuslt and if needed a number field for the wind. Store by hitting Enter (save), click elsewhere (save) or Tabulator (save and go to next result in edit mode.)
                    Style: rank, bib, name, birthyear, club, bestperf,  <attempts>, status, participationState 
                    -->
                    <div>
                        <div style="display:inline-block" >
                            <!-- Desktop view -->
                            <div class="hideMobile" id="techResModContainer" v-bind:style="{'grid-template-columns': techResModColTemplate}">
                                
                                <!--  header elements -->
                                <div class="header rank"><%= __('Rank') %></div>
                                <div class="header bib"><%= __('Bib abbr.') %></div>
                                <div class="header name"><%= __('Name') %></div>
                                <div class="header birthyear"><%= __('YoB') %></div>
                                <div class="header club"><%= __('Club') %></div>
                                <div class="header bestPerf"><%= __('Performance') %></div>
                                <div class="header remark" v-bind:style="{'grid-row': 1}"><%= __('Remark') %></div>
                                <div class="header resultOverrule" v-bind:style="{'grid-row': 1}"><%= __('Participation State') %></div>
                                <div v-for="att in attempts">
                                    <div class="header result" v-bind:style="{'grid-row': 1, 'grid-column':`att${att}`}"><%= __('Attempt') %> {{att}}</div>
                                </div>
                                <template v-for="(startIndex, sortIndex) in sortedStarts1">
                                    <!-- the +2 considers the header row and the fact that the numbering in css starts at 1, not 0. -->
                                    <div v-if="series[selectedSeries].seriesstartsresults[startIndex]==currentAthleteStart" class="current background" v-bind:style="{'grid-row': sortIndex+2}"></div>
                                    <div v-if="series[selectedSeries].seriesstartsresults[startIndex]==nextAthleteStart" class="next background" v-bind:style="{'grid-row': sortIndex+2}"></div>
                                    <div class="rank" v-bind:style="{'grid-row': sortIndex+2}">{{rankLocalizer(tempRankingData[selectedSeries][series[selectedSeries].seriesstartsresults[startIndex].xSeriesStart].rankUntil[conf.attempts-1], "<%- _lang %>")}} </div>
                                    <div class="bib" v-bind:style="{'grid-row': sortIndex+2}">{{auxData.xStartgroup[series[selectedSeries].seriesstartsresults[startIndex].xStartgroup].bib}}</div>
                                    <div class="name" v-bind:style="{'grid-row': sortIndex+2}">{{auxData.xStartgroup[series[selectedSeries].seriesstartsresults[startIndex].xStartgroup].athleteName}} {{auxData.xStartgroup[series[selectedSeries].seriesstartsresults[startIndex].xStartgroup].athleteForename}}<template v-if="showFullDetails">{{series[selectedSeries].seriesstartsresults[startIndex].xSeriesStart}}</template></div>
                                    <div class="birthyear" v-bind:style="{'grid-row': sortIndex+2}">{{birthdayToXX(auxData.xStartgroup[series[selectedSeries].seriesstartsresults[startIndex].xStartgroup].birthdate)}}</div>
                                    <div class="club" v-bind:style="{'grid-row': sortIndex+2}">{{auxData.xStartgroup[series[selectedSeries].seriesstartsresults[startIndex].xStartgroup].clubName}}</div>
                                    <div class="bestPerf" v-bind:style="{'grid-row': `${sortIndex+2}`}">{{formatDistance(tempRankingData[selectedSeries][series[selectedSeries].seriesstartsresults[startIndex].xSeriesStart].bestPerfOverall)}}</div>
                                    <template v-for="res in series[selectedSeries].seriesstartsresults[startIndex].resultstech">

                                        <div class="result" v-bind:class="{hidden: res==currentResultChange}" v-bind:style="{'grid-row': sortIndex+2, 'grid-column': `att${res.attempt}`}">
                                            <button style="width:100%" class="btn btnGrey" v-on:click="changeResult(res)" :disabled="readOnly">{{resultToStr(res, true)}}
                                                <template v-if="wind && res.status==0">
                                                    ({{resultToWind(res, false, true)}})
                                                </template>
                                            </button>
                                        </div>
                                        <div class="result" v-bind:style="{'grid-row': sortIndex+2, 'grid-column': `att${res.attempt}`}" v-bind:class="{hidden: res!=currentResultChange}" >
                                            <input  class="formCtrl" type="text" size=4 name="result" v-bind:id="'resChange' + res.xResult + ':' + res.attempt" v-model="currentResultString"  :disabled="readOnly" placeholder="<%= __('Distance') %>" v-on:blur=" saveCurrentResChange(series[selectedSeries].seriesstartsresults[startIndex], $event, startIndex);" v-on:keydown="tabOutRes($event)"> <!-- inputmode="decimal" -->
                                            <input class="formCtrl" v-if="wind" type="number" step=0.1 placeholder="<%= __('Wind') %>" v-model.number="currentWind" style="width:80px" inputmode="decimal" v-on:blur=" saveCurrentResChange(series[selectedSeries].seriesstartsresults[startIndex], $event, startIndex);" v-bind:id="'resChangeWind' + res.xResult + ':' + res.attempt" v-on:keydown="tabOutRes($event)">
                                        </div>
                                    </template>
                                    <template v-for="att in missingRes(series[selectedSeries].seriesstartsresults[startIndex].resultstech)">
                                        <div v-if="currentResultChange.attempt!= att || currentResultChange.xResult != series[selectedSeries].seriesstartsresults[startIndex].xSeriesStart" class="result" v-bind:style="{'grid-row': sortIndex+2, 'grid-column': `att${att}`}">
                                            <button style="width:100%" class="btn btnGrey" v-on:click="addResult(series[selectedSeries].seriesstartsresults[startIndex].xSeriesStart, att)" :disabled="readOnly">&nbsp;</button> <!-- (<%= __("add abbr.") %>) -->
                                        </div>
                                        <div v-else class="result" v-bind:style="{'grid-row': sortIndex+2, 'grid-column': `att${att}`}">
                                            <input class="formCtrl" type="text" size=4 name="result" v-bind:id="'resChange' + series[selectedSeries].seriesstartsresults[startIndex].xSeriesStart + ':' + att" v-model="currentResultString"  :disabled="readOnly" placeholder="<%= __('Distance') %>" v-on:blur=" saveCurrentResChange(series[selectedSeries].seriesstartsresults[startIndex], $event, startIndex);" v-on:keydown="tabOutRes($event)"> <!-- inputmode="decimal" -->
                                            <input class="formCtrl" v-if="wind" type="number" step=0.1 placeholder="<%= __('Wind') %>" v-model.number="currentWind" style="width:80px" inputmode="decimal" v-on:blur=" saveCurrentResChange(series[selectedSeries].seriesstartsresults[startIndex], $event, startIndex);" v-bind:id="'resChangeWind' + series[selectedSeries].seriesstartsresults[startIndex].xSeriesStart + ':' + att" v-on:keydown="tabOutRes($event)">
                                        </div>

                                    </template>
                                    <div class="remark" v-bind:style="{'grid-row': sortIndex+2}"><input class="formCtrl" placeholder="<%= __('Remarks') %>" type="text" v-model="series[selectedSeries].seriesstartsresults[startIndex].resultRemark" :disabled="readOnly" v-on:blur="blurRemark(series[selectedSeries].seriesstartsresults[startIndex])" v-on:focus="focusRemark(series[selectedSeries].seriesstartsresults[startIndex])"></div>
                                    <div class="resultOverrule" v-bind:style="{'grid-row': sortIndex+2}"><button type="button" v-if="!readOnly" class="el" v-on:click="startUpdateParticipation(series[selectedSeries].seriesstartsresults[startIndex])"><%= __("Change PS") %></button></div>
                                </template>
                            </div>
                            <!-- mobile view -->
                            <template v-for="(startIndex, sortIndex) in sortedStarts1">
                                <div class="athlete hideDesktop" v-bind:class="{ current: currentAthleteStart?.xStartgroup==series[selectedSeries].seriesstartsresults[startIndex].xStartgroup, next: nextAthleteStart?.xStartgroup==series[selectedSeries].seriesstartsresults[startIndex].xStartgroup }">
                                    <div class="row2">
                                        <div class="elText">{{rankLocalizer(tempRankingData[selectedSeries][series[selectedSeries].seriesstartsresults[startIndex].xSeriesStart].rankUntil[conf.attempts-1], "<%- _lang %>")}} </div>
                                        <div class="elText">{{auxData.xStartgroup[series[selectedSeries].seriesstartsresults[startIndex].xStartgroup].bib}}</div>
                                        <div class="elText" style="font-weight: bold">{{auxData.xStartgroup[series[selectedSeries].seriesstartsresults[startIndex].xStartgroup].athleteName}} {{auxData.xStartgroup[series[selectedSeries].seriesstartsresults[startIndex].xStartgroup].athleteForename}}</div>
                                        <div class="elText">{{birthdayToXX(auxData.xStartgroup[series[selectedSeries].seriesstartsresults[startIndex].xStartgroup].birthdate)}}</div>
                                        <div class="elText Sl_hide">{{auxData.xStartgroup[series[selectedSeries].seriesstartsresults[startIndex].xStartgroup].countryCode}}</div>
                                        <div class="elText Sl_hide">{{auxData.xStartgroup[series[selectedSeries].seriesstartsresults[startIndex].xStartgroup].clubName}}</div>
                                    </div>
                                    <div class="row2">
                                        <template v-for="res in sortedRes(series[selectedSeries].seriesstartsresults[startIndex])">
                                            <template v-if="res.status==-1">
                                                <!-- result does not exist yet -->
                                                <div  v-if="currentResultChange.attempt!= res.attempt || currentResultChange.xResult != series[selectedSeries].seriesstartsresults[startIndex].xSeriesStart" class="result el2">
                                                    <button style="width:100%" class="btn btnGrey" v-on:click="addResult(series[selectedSeries].seriesstartsresults[startIndex].xSeriesStart, res.attempt)" :disabled="readOnly"><%= __('Attempt abbr.') %>{{res.attempt}}</button> <!-- (<%= __("add abbr.") %>) -->
                                                </div>
                                                <div v-else class="el2 result" >
                                                    <input class="formCtrl" type="text" size=4 name="result" v-bind:id="'resChange' + series[selectedSeries].seriesstartsresults[startIndex].xSeriesStart + ':' + res.attempt + 'M'" v-model="currentResultString"  :disabled="readOnly" placeholder="<%= __('Distance') %>" v-on:blur=" saveCurrentResChange(series[selectedSeries].seriesstartsresults[startIndex], $event, startIndex);" v-on:keydown="tabOutRes($event)"> <!-- inputmode="decimal" -->
                                                    <input class="formCtrl" v-if="wind" type="number" step=0.1 placeholder="<%= __('Wind') %>" v-model.number="currentWind" style="width:80px" inputmode="decimal" v-on:blur=" saveCurrentResChange(series[selectedSeries].seriesstartsresults[startIndex], $event, startIndex);" v-bind:id="'resChangeWind' + res.xResult + ':' + res.attempt + 'M'" v-on:keydown="tabOutRes($event)">
                                                </div>
                                            </template>
                                            <template v-else>
                                                <!--  result exists -->

                                                <div class="result el2" v-bind:class="{hidden: res==currentResultChange}" >
                                                    <button style="width:100%" class="btn btnGrey" v-on:click="changeResult(res)" :disabled="readOnly"><%= __('Attempt abbr.') %>{{res.attempt}}: {{resultToStr(res, true)}}
                                                    <template v-if="wind && res.status==0">
                                                    ({{resultToWind(res, false, true)}})
                                                </template></button>
                                                </div>
                                                <div class="result el2" v-bind:class="{hidden: res!=currentResultChange}" >
                                                    <input  class="formCtrl" type="text" size=4 name="result" v-bind:id="'resChange' + res.xResult + ':' + res.attempt + 'M'" v-model="currentResultString"  :disabled="readOnly" placeholder="<%= __('Distance') %>" v-on:blur=" saveCurrentResChange(series[selectedSeries].seriesstartsresults[startIndex], $event, startIndex);" v-on:keydown="tabOutRes($event)"> <!-- inputmode="decimal" -->
                                                    <input class="formCtrl" v-if="wind" type="number" step=0.1 placeholder="<%= __('Wind') %>" v-model.number="currentWind" style="width:80px" inputmode="decimal" v-on:blur=" saveCurrentResChange(series[selectedSeries].seriesstartsresults[startIndex], $event, startIndex);" v-bind:id="'resChangeWind' + res.xResult + ':' + res.attempt + 'M'" v-on:keydown="tabOutRes($event)">
                                                </div>
                                            </template>

                                        </template>
                                    </div>
                                    <div class="row2" v-if="readOnly==false">
                                        <div class="marginLeft">
                                            <input class="formCtrl" placeholder="<%= __('Remarks') %>" type="text" v-model="series[selectedSeries].seriesstartsresults[startIndex].resultRemark" :disabled="readOnly" v-on:blur="blurRemark(series[selectedSeries].seriesstartsresults[startIndex])" v-on:focus="focusRemark(series[selectedSeries].seriesstartsresults[startIndex])">
                                        </div>
                                        <button type="button" v-if="!readOnly" class="el" v-on:click="startUpdateParticipation(series[selectedSeries].seriesstartsresults[startIndex])"><%= __("Change participation status") %></button>
                                    </div>
                                </div>
                                <br />
                            </template>
                        </div>  
                    </div>

                </div>
                <template v-if="show=='resShow'">
                    <h2><%= __("Results (table view)") %>:</h2>
                    <!-- sorting is selected by clicking on table headers -->
                    <div style="overflow: auto; max-height:100vh; scrollbar-width: thin;">
                        <div id="resultsView2" v-if="mode>0" v-bind:style="{'grid-template-columns': resultGridTemplateCol, 'grid-template-rows': resultGridTemplateRow}"> <!-- max-content means, that the column is maximum as wide as the contents require, i.e. there is no filling with empty space when there would be additional space to use; min-content means that the column is at least as wide as required by an element (i.e. the longest word that cannot be wrapped). grid-auto-columns: min-content;  -->
                            <!-- table view of the results with a grid layout -->

                            <!-- palceholder of the header (for the case when the header needs more space than the actual content) -->
                            <div class="rank placeholder header" > <!--style="justify-self: start; grid-column: rank"-->
                                <%= __("Rank abbr.") %>
                            </div>
                            <div v-if="contest.status<180" class="position placeholder header" > <!--style="justify-self: start; grid-column: rank"-->
                                <%= __("Position abbr.") %>
                            </div>
                            <div class="bib hideMobile placeholder header" > <!--style="justify-self: start; grid-column: rank"-->
                                <%= __("Bib abbr.") %>
                            </div>
                            <div class="name placeholder header" > <!--style="justify-self: start; grid-column: rank"-->
                                <%= __("Name abbr.") %>
                            </div>
                            <div class="result placeholder header " > <!--style="justify-self: start; grid-column: rank"-->
                                <%= __("Result abbr.") %>
                            </div>

                            <!--<template v-for="i in attempts">
                                <div class="placeholder header res" v-bind:style="{'grid-column': 'a'+i}">
                                    <%= __('Attempt abbr.') %>{{i}}
                                </div>
                            </template>-->
            
                            <!-- named lines are created in Vue-->
                            <!-- the results must be on top, to make sure they are behind the actual top and left content. The invisible placeholders for top and left can also be added already -->
                            <template v-for="(startIndex, sortIndex) in sortedStarts2">
                                <!-- background (show finished only as long as the competition is not finished yet)-->
                                <div class="leftTitles"  v-bind:style="{'grid-row': sortIndex+2}" v-bind:class="{ current: currentAthleteStart?.xStartgroup==series[selectedSeries].seriesstartsresults[startIndex].xStartgroup, next: nextAthleteStart?.xStartgroup==series[selectedSeries].seriesstartsresults[startIndex].xStartgroup, finished: mode<3 && tempRankingData[selectedSeries][series[selectedSeries].seriesstartsresults[startIndex].xSeriesStart].finished }"><!--style="justify-self: start; grid-column: athletes"-->
                                </div>

                                <div class="rank" v-bind:style="{'grid-row': sortIndex+2}"> <!--style="justify-self: start; grid-column: rank"-->
                                    {{rankLocalizer(tempRankingData[selectedSeries][series[selectedSeries].seriesstartsresults[startIndex].xSeriesStart].rankUntil[conf.attempts-1], "<%- _lang %>")}}
                                </div>
                                <div v-if="contest.status<180" class="position" v-bind:style="{'grid-row': sortIndex+2}"> <!--style="justify-self: start; grid-column: rank"-->
                                    {{series[selectedSeries].seriesstartsresults[startIndex].position}}
                                </div>
                                <div class="bib hideMobile" v-bind:style="{'grid-row': sortIndex+2}"> <!--style="justify-self: start; grid-column: rank"-->
                                    {{auxData.xStartgroup[series[selectedSeries].seriesstartsresults[startIndex].xStartgroup].bib}}
                                </div>
                                <div class="name placeholder"  v-bind:style="{'grid-row': sortIndex+2}" v-bind:class="{ current: currentAthleteStart?.xStartgroup==series[selectedSeries].seriesstartsresults[startIndex].xStartgroup, next: nextAthleteStart?.xStartgroup==series[selectedSeries].seriesstartsresults[startIndex].xStartgroup, finished: tempRankingData[selectedSeries][series[selectedSeries].seriesstartsresults[startIndex].xSeriesStart].finished }"> <!--style="justify-self: start; grid-column: athletes"-->
                                    {{auxData.xStartgroup[series[selectedSeries].seriesstartsresults[startIndex].xStartgroup].athleteName}} {{auxData.xStartgroup[series[selectedSeries].seriesstartsresults[startIndex].xStartgroup].athleteForename}}
                                </div>
                                <div class="result placeholder" v-bind:style="{'grid-row': sortIndex+2}"> <!--style="justify-self: start; grid-column: rank"-->
                                    {{resultLocalizer(series[selectedSeries].seriesstartsresults[startIndex], "<%- _lang %>")}}
                                </div>

                                <!-- TODO: add remarks for PB and SB -->

                                <template v-for="res in series[selectedSeries].seriesstartsresults[startIndex].resultstech">
                                    <div class="res" v-bind:style="{'grid-row': sortIndex+2, 'grid-column': 'a'+res.attempt}" v-bind:class="{PB: auxData.xStartgroup[series[selectedSeries].seriesstartsresults[startIndex].xStartgroup].bestPerf>0 && res.result>auxData.xStartgroup[series[selectedSeries].seriesstartsresults[startIndex].xStartgroup].bestPerf, SB: auxData.xStartgroup[series[selectedSeries].seriesstartsresults[startIndex].xStartgroup].bestPerfLast>0 && res.result>auxData.xStartgroup[series[selectedSeries].seriesstartsresults[startIndex].xStartgroup].bestPerfLast, tie: (auxData.xStartgroup[series[selectedSeries].seriesstartsresults[startIndex].xStartgroup].bestPerf>0 && res.result==auxData.xStartgroup[series[selectedSeries].seriesstartsresults[startIndex].xStartgroup].bestPerf) || (auxData.xStartgroup[series[selectedSeries].seriesstartsresults[startIndex].xStartgroup].bestPerfLast>0 && res.result==auxData.xStartgroup[series[selectedSeries].seriesstartsresults[startIndex].xStartgroup].bestPerfLast)}">
                                        {{resultToStr(res)}}<template v-if="wind && res.status==0">&nbsp;({{resultToWind(res, false, true)}})</template>
                                    </div>
                                </template>
                            </template>

                            <!-- top, sticky container with column lables, i.e. heights -->
                            <div class="topContainer">

                                <div class="rank header clickable" v-on:click="sortValue2=2"> <!--style="justify-self: start; grid-column: rank"-->
                                    <%= __("Rank abbr.") %>
                                </div>
                                <div v-if="contest.status<180" class="position header clickable" v-on:click="sortValue2=1"> <!--style="justify-self: start; grid-column: rank"-->
                                    <%= __("Position abbr.") %>
                                </div>
                                <div class="bib header hideMobile clickable" v-on:click="sortValue2=4"> <!--style="justify-self: start; grid-column: rank"-->
                                    <%= __("Bib abbr.") %>
                                </div>

                                <template v-for="i in attempts">
                                    <div class="header res" v-bind:style="{'grid-column': 'a'+i}">
                                        <%= __('Attempt abbr.') %>{{i}}
                                    </div>
                                </template>

                            </div>

                            <!-- left, sticky container with shown name etc -->
                            <div class="leftContainer">
                                <template v-for="(startIndex, sortIndex) in sortedStarts2">
                                    <!-- background (show finished only as long as the competition is not finished yet)-->
                                    <div class="fullRow"  v-bind:style="{'grid-row': sortIndex+2}" v-bind:class="{ current: currentAthleteStart?.xStartgroup==series[selectedSeries].seriesstartsresults[startIndex].xStartgroup, next: nextAthleteStart?.xStartgroup==series[selectedSeries].seriesstartsresults[startIndex].xStartgroup, finished: mode<3 && tempRankingData[selectedSeries][series[selectedSeries].seriesstartsresults[startIndex].xSeriesStart].finished }"><!--style="justify-self: start; grid-column: athletes"-->
                                    </div>
                                    <div class="name"  v-bind:style="{'grid-row': sortIndex+2}"> <!--style="justify-self: start; grid-column: athletes"-->
                                        {{auxData.xStartgroup[series[selectedSeries].seriesstartsresults[startIndex].xStartgroup].athleteName}} {{auxData.xStartgroup[series[selectedSeries].seriesstartsresults[startIndex].xStartgroup].athleteForename}}
                                    </div>
                                    <div class="result" v-bind:style="{'grid-row': sortIndex+2}"> <!--style="justify-self: start; grid-column: rank"-->
                                        {{resultLocalizer(series[selectedSeries].seriesstartsresults[startIndex], "<%- _lang %>")}}
                                    </div>
                                </template>

                                <div class="topContainer">
                                    <div class="name header clickable" style="grid-row:1" v-on:click="sortValue2=3"> <!--style="justify-self: start; grid-column: rank"-->
                                        <%= __("Name") %>
                                    </div>
                                    <div class="result header clickable" style="grid-row:1" v-on:click="sortValue2=2"> <!--style="justify-self: start; grid-column: rank"-->
                                        <%= __("Result abbr.") %>
                                    </div>
                                </div>
                            </div>

                            <!-- placeholder for top row (=header) -->
                            <!-- titles for left columns -->
                             
                            <!--<div class="header name placeholder" style="grid-row:1"> 
                                <%= __("Name") %>
                            </div>
                            <div class="header result placeholder" style="grid-row:1"> 
                                <%= __("Result abbr.") %>
                            </div>-->

                            <template v-for="i in attempts">
                                <div class="header placeholder res" v-bind:style="{'grid-column': 'a'+i}">
                                    <%= __('Attempt abbr.') %>{{i}}
                                </div>
                            </template>

                        </div>
                    </div>
                </template>

            </template>
    
            <!-- Overlay for the initial series assignment: -->
            <div class="overlay" v-bind:class="{shown: overlay2}">
                <div class="overlayContainerWide">
                    <form>
                        <button type="button" class="btn" v-on:click="addEmptySeriesInitial()"><%= __("Add single series") %></button>
                        <button type="button" class="btn" v-on:click="overlay='automaticSeriesAssignment'"><%= __("Automatic series assignment") %></button>
    
                        <div style="display: grid; grid-template-columns: auto auto; grid-template-areas: 'series athletes'; justify-content: stretch; column-gap: 20px;">
                            <div style="grid-area: series;">
                                <%= __("Series") %>
                                <draggable v-model="seriesObj" item-key="number", group="series" @end="seriesChanged">
                                    <template #item="{element, index}">
                                        <div class="dragelement">
                                            <%= __("SeriesSingular") %> {{index+1}}
                                            <!-- we cannot use el for v-model, since it seems to be a copy of the actual element. However, series[ind] works fine -->
                                            <table>
                                                <thead>
                                                    <th><%= __('Name') %></th>
                                                    <th><%= __('First name') %></th>
                                                    <th><%= __('Club') %></th>
                                                    <th><%= __('Registration value') %></th>
                                                    <th><%= __('SB') %></th>
                                                    <th><%= __('PB') %></th>
                                                </thead>
                                                <tbody is="vue:draggable"v-model="seriesObj[index].startsingroup" item-key="index" group="athleteSeriesAssignment" @end="dragEnded" v-bind:id="'s' + (index+1)" tag="tbody">
                                                    <template #item="{element, index}">
                                                        <tr class="dragelementH">
                                                            <td>{{element.athleteName}}</td>
                                                            <td>{{element.athleteForename}}</td>
                                                            <td>{{element.clubName}}</td>
                                                            <td>{{formatDistance(element.notificationPerf)}}</td>
                                                            <td>{{formatDistance(element.bestPerfLast)}}</td>
                                                            <td>{{formatDistance(element.bestPerf)}}</td>
                                                        </tr>
                                                    </template>
                                                </tbody>
                                            </table>
                                        </div>
                                    </template>
                                </draggable>
                            </div>
                            <div style="grid-area: athletes; ">
                                <%= __("Athletes to assign") %>
                                <!--Use of v-table makes the things a little bit more complicated: Since v-table (dynamically) creates its copy of the actual data to sort this copied array, we cannot directly insert into this array, but we have to manually override to make the item being dropped in the outer array, i.e. not the array of v-table.-->
                                <v-table :data="unassignedAthletesCreate" >
                                    <template #head> 
                                        <thead>
                                            <tr>
                                                <th is="vue:v-th" sortkey="athleteName"><%= __('Name') %></th>
                                                <th is="vue:v-th" sortkey="athleteForename"><%= __('First name') %></th>
                                                <th is="vue:v-th" sortkey="clubName"><%= __('Club') %></th>
                                                <th is="vue:v-th" sortkey="notificationPerf"><%= __('Registration value') %></th>
                                                <th is="vue:v-th" sortkey="bestPerfLast"><%= __('SB') %></th>
                                                <th is="vue:v-th" sortkey="bestPerf"><%= __('PB') %></th>
                                            </tr>
                                        </thead>
                                    </template>
                                    <template v-slot:body="{displayData}"> <!--v-slot:name="variables"-->
                                        <draggable v-model="displayData" item-key="index" group="athleteSeriesAssignment"  @change="unassignedAthleteChanged"  tag="tbody">
                                            <template #item="{element, index}">
                                                <tr class="dragelementH">
                                                    <td>{{ element.athleteName }}</td>
                                                    <td>{{ element.athleteForename }}</td>
                                                    <td>{{ element.clubName }}</td>
                                                    <td>{{formatDistance(element.notificationPerf)}}</td>
                                                    <td>{{formatDistance(element.bestPerfLast)}}</td>
                                                    <td>{{formatDistance(element.bestPerf)}}</td>
                                                </tr>
                                            </template>
                                        </draggable>   
                                    </template>
                                </v-table>
                            </div>
                        </div>
                        <button type="button" class="btn btnRed" v-on:click="overlay2 = undefined"><%= __("Close") %></button>
                        <button type="button" class="btn btnGreen" ref="saveInitSeries" v-on:click="saveInitSeries"><%= __("Save") %></button>
                    </form>
                </div>
            </div>
    
            <div class="overlay"  v-bind:class="{shown: overlay}">
                <div class="overlayContainer" style="width:auto; max-width: none;">
                    <div id="confTechLong2" v-if="overlay=='config'">
                        <form>
                            <div class="verticalForm">
                                <h3><%= __("Contest configuration") %>: </h3>
                                <label>
                                    <input type="radio" name="confPreset" v-model.number="confForMod.preset" value=0 v-on:change="confSelect3plus3">
                                    <%= __("3 attempts for all, +3 attempts for the best 8") %>
                                </label>
                                <input type="radio" id="confPreset1" name="confPreset" v-model.number="confForMod.preset" value=1 v-on:change="confSelectContinuous">
                                <input type="number" min="1" style="width:4em; display:inline-block; margin:0 5px;" v-bind:value="confForMod.attempts" v-bind:disabled="confForMod.preset!=1" v-on:change="confAttemptsChange">
                                <label for="confPreset1" style="display: inline-block;">
                                    <%= __("attempts for all") %>
                                </label>
                                <label>
                                    <input type="radio" name="confPreset" v-model.number="confForMod.preset" value=2>
                                    <%= __("Manual configuration") %>
                                </label>
                                <div v-if="confForMod.preset==2">
                                    <h3><%= __("Manual configuration") %></h3>
                                    <label>
                                        <%= __("Number of attempts") %>:
                                        <input type="number" min="1" style="width:4em" v-bind:value="confForMod.attempts" v-on:change="confAttemptsChange">
                                    </label>
                                    <!-- settings per attempt -->
                                    <fieldset v-for="(as, i) in confForMod.attemptSettings">
                                        <legend><%= __("Attempt") %> {{i+1}}</legend>
                                        <fieldset style="display: inline-block; vertical-align: top;" v-if="i>0">
                                            <legend><%= __("Filtering") %></legend>
                                            <label>
                                                <input type="radio" v-bind:name="'filter' + i" value=0 v-bind:checked="as.filterRank==0" v-on:click="as.filterRank=0">
                                                <%= __("All athletes") %>
                                            </label>
                                            <input type="radio" v-bind:id="'filterAll' + i" v-bind:name="'filter' + i"  value=1 v-on:click="as.filterRank=8" v-bind:checked="as.filterRank!=0">
                                            <%= __("best") %>
                                            <input type="number" min="1" style="width:4em; display:inline-block; margin:0 5px;" v-model.number="as.filterRank" v-bind:disabled="as.filterRank==0">
                                            <%= __("after") %>
                                            <input type="number" min="1" v-bind:max="i" style="width:4em; display:inline-block; margin:0 5px;" v-model.number="as.filterAttempt" v-bind:disabled="as.filterRank==0">
                                            <%= __("attempts") %>
                                            <label v-bind:for="'filterAll' + i" style="display: none;">
                                                <%= __("best N after M") %>
                                            </label>
                                        </fieldset>
                                        <fieldset style="display: inline-block; vertical-align: top;">
                                            <legend><%= __("Sorting") %></legend>
                                            <select v-bind:value="as.sort" v-on:change="confSortChange(as, i+1, $event)">
                                                <option value="0"><%= __("Position") %></option>
                                                <option value="1"><%= __("Position reversed") %></option>
                                                <option value="2" v-if="i>0"><%= __("Rank (best first)") %> </option>
                                                <option value="3" v-if="i>0"><%= __("Rank (best last)") %></option>
                                            </select>
                                            <div style="display: inline-block;" v-if="as.sort>1">
                                                <%= __("Rank after") %>
                                            <input type="number" min="1" v-bind:max="i" style="width:4em; display:inline-block; margin:0 5px;" v-model.number="as.sortRankAfterAttempt" >
                                            <%= __("attempts") %>
                                            </div>
                                            
                                        </fieldset>
                                    </fieldset>

                                    <label>
                                        <%= __("Merge series (if more than 1) starting from attempt (0=never merge)") %>:
                                        <input type="number" min="0" v-bind:max="confForMod.attempts" v-model.number="confForMod.mergeSeries">
                                    </label>
                                </div>
                                
                                <button type="submit" class="btn btnGreen" v-on:click="saveUpdateConf" :disabled="readOnly">
                                    <%= __("Save") %>
                                </button>
                                <button type="button" class="btn btnRed" v-on:click="abortUpdateConf"><%= __("Abort") %></button>
                            </div>
                        </form>
                    </div>

                    <div id="confTechLong" v-if="overlay=='modParticipation'">
                        <form>
                            <div class="verticalForm">
                                <h3><%= __("Change participation status") %></h3>
                                {{auxData.xStartgroup[ssrMod.xStartgroup].athleteForename}} {{auxData.xStartgroup[ssrMod.xStartgroup].athleteName}}
                                <select class="content dropdown" v-model="resultOverruleMod">
                                    <option v-for="option in participationStatesTech" v-bind:value="option.value">
                                        {{option.text}}
                                    </option>
                                </select>
                                <br>
                                <button type="submit" class="btn btnGreen" v-on:click="saveUpdateParticipation" :disabled="readOnly">
                                    <%= __("Save") %>
                                </button>
                                <button type="button" class="btn btnRed" v-on:click="overlay=undefined"><%= __("Abort") %></button>
                            </div>
                        </form>
                    </div>

                    <div v-if="overlay=='deleteManyResults'">
                        <form>
                            <div class="verticalForm">
                                <h3><%= __("Delete all results matching the following criteria") %></h3>
                                <!-- allow to select the attempt(s) and the xSeries (either one series or all) -->
                                <template v-if="series.length>1">
                                    <%= __('Series') %>
                                    <label>
                                        <input type="radio" name="delRes" v-model="delResAllSeries" v-bind:value="true">
                                        <%= __("All series") %>
                                    </label>
                                    <label>
                                        <input type="radio" name="delRes" v-model="delResAllSeries" v-bind:value="false" >
                                        <%= __("Single series") %>
                                    </label>
                                    <template v-if="delResAllSeries==false">
                                        <select class="formCtrl" v-model.number="delResSeries">
                                            <option v-for="(seriesEl, seriesIndex) in series" v-bind:value="seriesEl.xSeries">
                                                <%= __('SeriesSingular') %> {{seriesEl.number}} <div v-if="seriesEl.name">{{seriesEl.name}}</div> <!--if undefined, the name shall not be shown-->
                                            </option>
                                        </select>
                                    </template>
                                </template>

                                <%= __('Attempt(s)') %> <button type="button" tabindex="-1" class="information" v-on:click="overlayInfo('<%= __('Select multiple') %>:', '<%= __('To select multiple attempts press Ctrl while clicking.') %>')"><%= __('i') %></button>
                                <select multiple class="formCtrl" v-model="delResAttempts">
                                    <template v-for="att in attempts">
                                        <option v-bind:value="att"><%= __("Attempt") %> {{att}}</option>
                                    </template>
                                </select>

                                <label style="background-color: --warning;"><input type="checkbox" name="warningAccept" v-model="warningAcctepted" /> <%= __('I know that deleting the results cannot be revoked!') %></label>   

                                <button type="button" class="btn btnGreen" v-on:click="deleteManyResultsExe" v-bind:disabled="warningAcctepted==false"><%= __("Delete results (irrevocable)") %></button>
                                <button type="button" class="btn btnRed" v-on:click="overlay=undefined"><%= __("Abort") %></button>
                            </div>
                        </form>
                    </div>
    
                    <div v-if="overlay=='automaticSeriesAssignment'">
                        <form>
                            <!-- if there are multiple assignment algorithms, show a dropdown to select-->
                            <div v-if="seriesAssignments.length>1">
                                <%= __("Series assignment") %>: <!-- for track it is called heat --> 
                                <!-- if there are multiple series assignment algorithms, show a dropdown to choose from -->
                                <select class="formCtrl" v-model.number="selectedSeriesAssignment">
                                    <template v-for="(SA, id) in seriesAssignments">
                                        <option v-bind:value="id">{{SA.name}}</option>
                                    </template>
                                </select>
                            </div>
                            <!-- include teh different series assignment configuration wizards -->
                            <% seriesAssignments.forEach((SA)=>{ %>
                                <%- include(SA, {type:"html"}) %>
                            <% }); %>
                            <button type="button" class="btn btnRed" v-on:click="overlay=undefined"><%= __("Abort") %></button>
                            <button type="submit" class="btn btnGreen" v-on:click="createSeriesAutomatically()"><%= __("(Re-)create series") %></button>
                        </form>
                    </div>
    
                    <!-- insert here all series assignment settings -->
    
    
                </div>
            </div>
    
            <div id="overlay" v-on:click="infoVisible=false" v-bind:class="{shown: infoVisible}">
                <!-- overlay used for displaying general information -->
                <div id="overlayContainer">
                    <div id="overlayTitle"><b>{{infoTitle}}</b></div>
                    <div id="overlayContent">{{infoContent}}</div>
                </div>
            </div>
            <div id="overlay" v-bind:class="{shown: yesNoVisible}">
                <!-- overlay used for displaying general information -->
                <div id="overlayContainer">
                    <div id="overlayTitle"><b>{{yesNoTitle}}</b></div>
                    <div id="overlayContent">{{yesNoText}}</div>
                    <button type="button" class="btn btnRed" v-on:click="yesNoVisible=false"><%= __("No") %></button>
                    <button type="submit" class="btn btnGreen" v-on:click="yesNoFunction" :disabled="readOnly">
                        <%= __("Yes") %>
                    </button>
                </div>
            </div>
            
        </div>
        
    </div>
    
</div>