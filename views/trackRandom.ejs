<% if(type=="html"){ %>
<!-- the configuration window for this kind of series assignment-->
<div v-if="seriesAssignmentOverlay=='trackRandom'" class="verticalForm">
    <h3><%= __("Configuration") %></h3>
    <%= __("Assign the athletes randomly over the required number of heats") %>
    <!-- TODO FUTURE: introduce some approach on how to seed runs started in lanes with more than one person per lane; eventually we want there to only have the outer/inner lanes to be filled with two athletes or whatever-->
    <template v-if="conf.startInLanes">
        <fieldset>
            <legend><%= __("Position of athletes in heats with empty lanes") %>: </legend>
            <label style="display:inline-block">
                <input type="radio" name="positioningInSeries" value="left" v-model.number="seriesAssignmentConfiguration.trackRandom.positioningInSeries">
                <%= __("Left") %>
            </label>
            <label style="display:inline-block">
                <input type="radio" name="positioningInSeries" value="centerLeft" v-model.number="seriesAssignmentConfiguration.trackRandom.positioningInSeries">
                <%= __("Center left") %>
            </label>
            <label style="display:inline-block">
                <input type="radio" name="positioningInSeries" value="centerRight" v-model.number="seriesAssignmentConfiguration.trackRandom.positioningInSeries">
                <%= __("Center right") %>
            </label>
            <label style="display:inline-block">
                <input type="radio" name="positioningInSeries" value="right" v-model.number="seriesAssignmentConfiguration.trackRandom.positioningInSeries">
                <%= __("Right") %>
            </label>
        </fieldset>
    </template>
</div>

<% }else{ %> // must have a non-code line here, since it will be commented out!
    {
        name: '<%= __("Randomly") %>',  // the name of the series assignment.
        overlayName: "trackRandom", // the name of the overlay
        assignFunc: function (args){
            // eventually we should reset everything at the beginning.

            // first sort startsingroup randomly.
            // Fisher Yates shuffle
            for (i = this.unassignedAthletesCreate.length -1; i > 0; i--) {
                let j = Math.floor(Math.random() * i)
                let k = this.unassignedAthletesCreate[i]
                this.unassignedAthletesCreate[i] = this.unassignedAthletesCreate[j]
                this.unassignedAthletesCreate[j] = k
            }

            // differentiate startInLanes or not
            if (this.conf.startInLanes){
                let athletesPerSeries = this.conf.lanes*this.conf.groupSize;

                // calculate how many series are needed and add those series
                this.numSeries = Math.ceil(this.unassignedAthletesCreate.length/athletesPerSeries); 
    
                this.seriesObj = [];
                for (let i=0; i<this.numSeries; i++){
                    this.addEmptySeriesInitial();
                }
                // the series are created
                
                // now, loop over series / group within series / the lane

                for (let i=0;i<this.numSeries;i++){
                    // count the remaining athletes to assign and calculate how many athletes shall be in this series
                    
                    let ssrs = this.seriesObj[i].SSRs;

                    // how many athletes to assign in this series: 
                    let numAthAssignSeries = Math.ceil(this.unassignedAthletesCreate.length/(this.numSeries-i));

                    let remainingAthInSeries = numAthAssignSeries;
                    
                    // Note: group is understood here as group1=first person on each lane, group2="second person on each lane" 
                    for (let j=0; j<this.conf.groupSize; j++){
                        // check for empty lanes (in this group)
                        let occupiedLanes = Math.min(this.conf.lanes, remainingAthInSeries)
                        let emptyLanes = this.conf.lanes - occupiedLanes;

                        let emptyLanesBefore = 0;
                        if (emptyLanes>0){
                            if (this.seriesAssignmentConfiguration.trackRandom.positioningInSeries=='right'){
                                emptyLanesBefore = emptyLanes;
                            } else if (this.seriesAssignmentConfiguration.trackRandom.positioningInSeries=='centerRight'){
                                emptyLanesBefore = Math.ceil(emptyLanes/2);
                            } else if (this.seriesAssignmentConfiguration.trackRandom.positioningInSeries=='centerLeft'){
                                emptyLanesBefore = Math.floor(emptyLanes/2);
                            }
                        }
                        
                        for (let k=emptyLanesBefore; k<emptyLanesBefore + occupiedLanes; k++ ){
                            // search for the right SSR entry: 
                            let ssr = ssrs.find(ssr=>ssr.lane==k+1 && ssr.posInLane==j+1);
                            ssr.startsingroup = this.unassignedAthletesCreate.shift();
                        }

                        remainingAthInSeries -= occupiedLanes;

                    }
                }
            } else {
                // people do not start in lanes; assignment is very easy
                // calculate how many series are needed and add those series
                this.numSeries = Math.ceil(this.unassignedAthletesCreate.length/this.conf.groupSize); 
    
                this.seriesObj = [];
                for (let i=0; i<this.numSeries; i++){
                    this.addEmptySeriesInitial();
                }
                // the series are created
                
                for (i=0;i<this.numSeries;i++){
                    // count the remaining athletes to assign and calculate how many athletes shall be in this series
                    // how many athletes to assign in this series: 
                    let numAthAssign = Math.ceil(this.unassignedAthletesCreate.length/(this.numSeries-i));
    
                    let sig = this.seriesObj[i].SSRs;
                    for (j=0; j<numAthAssign;j++){
                        sig.push({
                            lane:j+1,
                            position:j+1,
                            posInLane:1,
                            startsingroup: this.unassignedAthletesCreate.shift(),
                        })
                    }
                }
            }




        }, // the function to call to assign the series. arguments and return stuff to be defined. Eventually there is nothing to be returned, but we simply bind the function to the  of vue this and the function shall/can access all properties available.
        initFunc: function(){
            this.seriesAssignmentConfiguration.trackRandom = {
                positioningInSeries: 'centerRight', // left, centerLeft, centerRight, right; prefer not to use the inner lane by default, but center the athletes
            }
        }, // function called on initialization of the series assignment tool; shall also add the required properties to the seriesAssignmentConfiguration object within a "personal" object! 
        baseDisciplineTypes: [3], // the baseDisciplines-types where this series assignment opiton shall be present (probably only needed for track disciplines)
    }

<% } %>