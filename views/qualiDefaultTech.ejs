<% if(type=="html"){ %>
<!-- the configuration window for this kind of qualification definition-->
<div v-if="selectedQualificationModel=='defaultTech'" class="verticalForm">
    <div class="marginBottom">
        <b>Regular cases</b><br>
        <label>
            <%= __("Minimum number of qualified athletes") %>
            <input type="number" v-model.number="qualificationConfiguration.defaultTech.minAthletes" size=3 min="0">
        </label>
        <label>
            <%= __("Performance for direct qualification") %>
            <input type="text" v-model="qualConfDefaultTech.qualConfDefaultTechPerfStr" size=3 v-on:input="qualConfDefaultTech.checkInput.bind(this)()" v-on:change="qualConfDefaultTech.checkInput.bind(this)(true)" v-bind:class="{unrealistic: !qualConfDefaultTech.qualConfDefaultTechPerfRealistic}">
        </label>
        <div class="information marginRight">i</div><%= __("The qualification by the minimum number of qualified athletes is always based on the overall (independent of series or group) rank.") %>
    </div>

</div>

<% }else{ %> // must have a non-code line here, since it will be commented out!
    {   
        nameDB: 'defaultTech', // not to be translated !!!
        name: '<%= __("Default") %>',  // the name of the qualificaiotn module.
        overlayName: "defaultTech", // the name of the overlay
        defaultValues: function(){
            return {
                minAthletes: 12,
                minPerformance: 0,
            }
        },
        initFunc: function(){
            const self = this.qualificationModules.find(qm=>qm.nameDB == 'defaultTech');
            this.qualificationConfiguration.defaultTech = self.defaultValues();

            // the following only works as soon as roundMOdID is set (and selectedEventGroup and discipliens is given; but this is always the case when roundMOdID exists); 
            const watcher = 
            this.$watch('roundModID', (newValue, oldValue) => {
                
                // the following shall be a separate property and not within the configuration object since it does not need to be stored in the DB
                let disc = this.disciplines.find(el=>el.xDiscipline==this.selectedEventGroup.xDiscipline);
                let val;
                if (this.roundModID==-1){
                    // new round --> default data
                    val = self.defaultValues().minPerformance;
                } else {
                    // change
                    val = this.qualificationConfiguration.defaultTech.minPerformance
                }
                let validity = self.validateInput(val, disc);
                //validity={valid, value, modified, realistic}
                self.qualConfDefaultTechPerfStr = self.formatValue(validity.value, disc); 
                self.qualConfDefaultTechPerfRealistic = validity.realistic;
            
            });

            this.qualConfDefaultTech = self; // this property is not observed!
        }, // function called on initialization of the qualification module tool; shall also add the required properties to the qualificationConfiguration object within a "personal" object! 
        baseDisciplineTypes: [1,2], // the baseDisciplines-types where this qualification module option shall be present
        formatValue: function(value, disc){
            return window.disciplineFormatters[disc.type](value, disc, true, false);
        },
        validateInput: function(value, disc){
            return window.validatePerformance(value, disc);
        },
        qualConfDefaultTechPerfStr:'',
        qualConfDefaultTechPerfRealistic:false,
        checkInput: function(apply=false){
            const self = this.qualConfDefaultTech;
            // if apply is set to true, then the value shown might be changed since it will then also show the unit

            // get the discipline first
            let disc = this.disciplines.find(el=>el.xDiscipline==this.selectedEventGroup.xDiscipline);
            let validity = self.validateInput(self.qualConfDefaultTechPerfStr, disc);
            //validity={valid, value, modified, realistic}
            if (apply){
                self.qualConfDefaultTechPerfStr = self.formatValue(validity.value, disc); 
                this.qualificationConfiguration.defaultTech.minPerformance = validity.value;
            }
            self.qualConfDefaultTechPerfRealistic = validity.realistic;
        },
        validationError: function(){
            /*
            // return null if there is no error OR if the validaiton cannot be performed, e.g. due to lacking data (e.g. series not created yet)
            try {
                // if there is no value perHeat, it is always fine
                if (this.qualificationConfiguration['defaultTech'].perHeat==0) return null;
    
                // otherwise, try to count the number of heats. 
                let numHeats = 0;
                this.roundMod.groups.forEach(g=>{
                    if (!('contest' in g)) return ; // contest does not exist (yet)
                    if (g.contest.status<90) return ; // series not yet finished
                    numHeats += g.series.length;
                })
                if (numHeats * this.qualificationConfiguration['default'].perHeat> this.qualificationConfiguration['default'].total){
                    return `<%- __("The total number of qualified persons (${this.qualificationConfiguration['default'].total}) must be larger or equal to the number of heats (${numHeats}) multiplied with the number of qualified athletes per heat (${this.qualificationConfiguration['default'].perHeat}).") %>`;
                }
            } catch (ex){
                console.log(ex);
            }*/
            return null;
        },
        apply: function(){
            // NOTE: roundMod contains all required info of the currently selected round, as provided by the computed property "roundData"
            /*
            - groups: a computed object, containing also references to the contests with the results 
            - round: the original round object as provided by rEventGroup.rounds
            - roundFinished (bool)
            - starts (inscription to the event/eventGroup, including best+notification perfs)
            */

            const conf = this.qualificationConfiguration['defaultTech'];
            /*
            let qualifiedAthletes = 0; 
            let unreplacedWithdrawals = 0; // used when resignedRankReplacement==None
            let manualQualifications = 0; // by referee or jury

            // create a copy of the required data, to allow for local changes before sending it to the server
            const groups = JSON.parse(JSON.stringify(this.roundMod.groups));

            // remove all qualification states, except the manual ones. 
            let heatCount = 0;
            for (let g of groups){
                heatCount += g.series.length;
                for (let heat of g.series){
                    for (let ssr of heat.seriesstartsresults){
                        if (ssr.qualification<11 ) { 
                            ssr.qualification = 0;
                        } 
                        if (ssr.qualification>11) {
                            manualQualifications++;
                        }

                    }
                }
            } 

            // make sure that the total number of qualificaiton is sufficient
            if (heatCount*conf.perHeat>conf.total){
                alert(`<%= __("The total umber of qualified athletes (${conf.total}) is less than shall be qualified by rank (${heatCount*conf.perHeat}). The qualifications cannot be applied.") %>`)
                return;
            }

            // for draw with times:
            function shuffle(array) {
                var m = array.length, t, i;
              
                // While there remain elements to shuffle…
                while (m) {
              
                  // Pick a remaining element…
                  i = Math.floor(Math.random() * m--);
              
                  // And swap it with the current element.
                  t = array[m];
                  array[m] = array[i];
                  array[i] = t;
                }
              
                return array;
              }

            // NOTE: the regulations currently (2025) do not specify how to handle if an athlete resigns from the next round, i.e. whether the athlete is replaced or not and how. Thus, we provide options for this.  

            // first, handle qualified by rank;
            // if two persons have the same rank in the heat (and obviously also the same time), but only one can/could be qualified, then try to qualify both, by, 1st, try to reduce the number of persons qualified by time by 1; or 2nd, try to increase the number of total qualified athletes (e.g. 9th lane, or 2 persons per lane in 800m) (TR21.3 + TR21.4)
            if (conf.perHeat>0){
                // if there is a tie, we cannot instantly use standbyLanes, because there could be e.g. only 1 standbylane, but more than 1 tie. Then it would not be fair, if the standby lane was simply assigned for the first tie, and the latter tie was then randomly decided. Additionally the code shall be written in a way to also handle a tie over more than 2 persons and the case, where there are >2 athletes with a rank, where we must make sure that at least perHeat number of athletes get qualified.
                // Thus, there are two lots: 
                // Lot 1: for every heat, qualify (potentiallyby lot) the required number of persons. Add persons qualified by lot to QByFirstLot, add the not.qualified-by-lot to Qtie, which will be handled in Lot 2
                // Lot 2: handles the persons loosing the first lot. Among those, potential additional lanes (qualified by time, standby lanes) qill be drawn by lot.
                const Qtie = []; // an array of ssrs to draw by lot for the standby lanes
                
                const QByFirstLot = []; // we need an array to store all athletes that were qualified in the first lot, since we do not yet know wheter really a lot is needed (Q*) (when there are not enough additional lanes) or whether actually all persons can be qualified regulary (Q) (including the additioanl lanes).

                for (let group of groups){
                    for (let heat of group.series){
                        // first, sort the seriesstartsresults
                        heat.seriesstartsresults.sort((a,b)=>a.rank-b.rank);
    
                        // set the qualification Q for the first conf.perHeat
                        let withdrawalsToReplaceQ = 0;
                        for (let i=1; i<=conf.perHeat + withdrawalsToReplaceQ; i++){
                            // get all SSR with this rank
                            const ssrs = heat.seriesstartsresults.filter(s=>s.rank==i && s.qualification!=11);
                            const ssrsWithdrawal = heat.seriesstartsresults.filter(s=>s.rank==i && s.qualification==11);
                            unreplacedWithdrawals += ssrsWithdrawal.length*(conf.resignedRankReplacement=='none');
                            withdrawalsToReplaceQ += ssrsWithdrawal.length*(conf.resignedRankReplacement=='rank');
                            
                            if (ssrs.length>conf.perHeat+withdrawalsToReplaceQ-i+1){
                                // first, qualify the minimum number of athletes per heat by lot
                                for (let j=0; j<conf.perHeat-i+1; j++){
                                    let k = Math.floor(Math.random()*ssrs.length); // k'th athlete gets Q*
                                    QByFirstLot.push(ssrs[k]);
                                    ssrs.splice(k, 1);
                                    qualifiedAthletes++;
                                }

                                // then add all others to Qtie
                                Qtie.push(...ssrs)

                            } else {
                                // not a tie; set all Q
                                for (let ssr of ssrs){
                                    ssr.qualification = i<=conf.perHeat ? 1 : 3; // either regular Q or Q+;
                                    qualifiedAthletes++;
                                }
                            }
                        }
                    }
                }

                // handle Qties
                // available additional lanes: 
                const avail = conf.total - qualifiedAthletes + conf.standbyPositions;
                if (avail < Qtie.length){
                    // first, we need to make sure that in each series the minimum number of 

                    // we need to draw by lot for the remaining positions;
                    for (let i=0; i<avail; i++){
                        let j = Math.floor(Math.random()*Qtie.length); // j'th required space is qualified 
                        Qtie[j].qualification = 2;
                        qualifiedAthletes++;
                        Qtie.splice(j,1);
                    }

                    // now set QByFirstLot to Q*
                    for (let a of QByFirstLot){
                        a.qualification = 2;
                    }

                } else {
                    // all Q-ties can be qualified without lot;
                    // in this case, we also need to change back to qualified=1 for all previously 
                    for (let a of Qtie){
                        a.qualification = 1; // 1=regular Q
                        qualifiedAthletes++;
                    }
                    // now set QByFirstLot to Q
                    for (let a of QByFirstLot){
                        a.qualification = 1;
                    }
                }
            }

            // then qualified by time 
            // NOTE: the rank within the heat has no influence; e.g. is two persons have the same time to 0.001s, but a different rank (in the same heat), it is still the draw that decides! (TR21.5)
            
            // how many athletes do we need to qualify by time?
            let qTime = conf.total - manualQualifications - qualifiedAthletes - unreplacedWithdrawals; 

            // create an array with all persons that could potentially be qualified.
            let athletesForTime = [];
            for (let group of groups){
                for (let heat of group.series){
                    for (let ssr of heat.seriesstartsresults){
                        if (ssr.resultOverrule==0 && (ssr.qualification==0 || ssr.qualification==11)){ // we include withdrawal here, since we need to count how many withdrawals before X
                            athletesForTime.push(ssr);
                        }
                    }
                }
            }
            // sort the array by timeRounded
            athletesForTime.sort((a,b)=>a.timeRounded-b.timeRounded);
            //qWithdrawals = 0;
            if (athletesForTime.length<qTime){
                // qualify all
                for (let a of athletesForTime){
                    if (a.qualification != 11){ 
                        a.qualification = 6;
                    }
                }
            } else {
                qWithdrawalsToReplace = 0;
                for (let i=0; i<qTime+qWithdrawalsToReplace; i++){
                    //console.log(i)
                    // get athlete i and find all subsequent athetes with the same time
                    const af = athletesForTime.filter(a=>a.timeRounded==athletesForTime[i].timeRounded && a.qualification==0); // want to qualify
                    const afWithdrawal = athletesForTime.filter(a=>a.timeRounded==athletesForTime[i].timeRounded && a.qualification==11); // withdrawal
                    //qWithdrawals += afWithdrawal.length;
                    qWithdrawalsToReplace += afWithdrawal.length * (conf.resignedTimeReplacement=='time');
    
                    if (af.length+i <= qTime + qWithdrawalsToReplace + conf.standbyPositions){
                        // not draw needed
                        for (let a of af){
                            const status = i<qTime ? 6 : 8// q or q+;
                            a.qualification = status;
                        }
                    } else {
                        // draw needed
                        // number of persons that can get qualified: 
                        const numq = qTime + qWithdrawalsToReplace + conf.standbyPositions -i;
                        // we simply shuffle the athletes and use the first nunmq
                        shuffle(af);
                        for (let j=0; j<numq;j++){
                            af[j].qualification = 7; // qD
                        }
                    }
                    i += af.length + afWithdrawal.length - 1; // 1 is always added in the loop
                } 
                //console.log('here2'); 
            }
            // NOTE: actually, there should be a qualification state QD+ and qD+ ("due to withdrawal, by lot"). However, currently it is shown as QD and qD.
            // finally, compare all qualification states in groups with roundMod.groups and call the funciton on the server to change the data.
            for (let g of groups){
                const gOrig = this.roundMod.groups.find(g2=>g2.number==g.number);
                for (let heat of g.series){
                    const heatOrig = gOrig.series.find(s=>s.xSeries == heat.xSeries);
                    for (let ssr of heat.seriesstartsresults){
                        const ssrOrig = heatOrig.seriesstartsresults.find(ssr2=>ssr2.xSeriesStart==ssr.xSeriesStart);
                        if (ssrOrig.qualification != ssr.qualification){
                            let data = {
                                xContest: heat.xContest,
                                xSeries: heat.xSeries,
                                xSeriesStart: ssr.xSeriesStart,
                                qualification: ssr.qualification, 
                            };
                            
                            rEG.room.updateQualificationInit(data);
                            //console.log(data);
                        }
                    }
                }
            }*/
        },
    }

<% } %>