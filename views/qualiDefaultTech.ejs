<% if(type=="html"){ %>
<!-- the configuration window for this kind of qualification definition-->
<div v-if="selectedQualificationModel=='defaultTech'" class="verticalForm">
    <div class="marginBottom">
        <b>Regular cases</b><br>
        <label>
            <%= __("Minimum number of qualified athletes") %>
            <input type="number" v-model.number="qualificationConfiguration.defaultTech.minAthletes" size=3 min="0">
        </label>
        <label>
            <%= __("Performance for direct qualification") %>
            <input type="text" v-model="qualConfDefaultTech.qualConfDefaultTechPerfStr" size=3 v-on:input="qualConfDefaultTech.checkInput.bind(this)()" v-on:change="qualConfDefaultTech.checkInput.bind(this)(true)" v-bind:class="{unrealistic: !qualConfDefaultTech.qualConfDefaultTechPerfRealistic}">
        </label>
        <div class="information marginRight">i</div><%= __("The qualification by the minimum number of qualified athletes is always based on the overall (independent of series or group) rank.") %>
    </div>

</div>

<% }else{ %> // must have a non-code line here, since it will be commented out!
    {   
        nameDB: 'defaultTech', // not to be translated !!!
        name: '<%= __("Default") %>',  // the name of the qualificaiotn module.
        overlayName: "defaultTech", // the name of the overlay
        defaultValues: function(){
            return {
                minAthletes: 12,
                minPerformance: 0,
            }
        },
        initFunc: function(){
            const self = this.qualificationModules.find(qm=>qm.nameDB == 'defaultTech');
            this.qualificationConfiguration.defaultTech = self.defaultValues();

            // the following only works as soon as selectedEventGroup and disciplines is given; but this is always the case when roundMOdID exists; 
            /*this.$watch('roundModID', (newValue, oldValue) => {
                
                // the following shall be a separate property and not within the configuration object since it does not need to be stored in the DB
                //let disc = this.disciplines.find(el=>el.xDiscipline==this.selectedEventGroup.xDiscipline);
                let validity = self.validateInput(this.qualificationConfiguration.defaultTech.minPerformance, disc);
                //validity={valid, value, modified, realistic}
                self.qualConfDefaultTechPerfStr = self.formatValue(validity.value, disc); 
                self.qualConfDefaultTechPerfRealistic = validity.realistic;
            
            });*/

            this.qualConfDefaultTech = self; // this property is not observed, but its ok for what it is needed!
        }, // function called on initialization of the qualification module tool; shall also add the required properties to the qualificationConfiguration object within a "personal" object! 
        updateFunc: function(disc){
            const self = this.qualConfDefaultTech;
            // the following shall be a separate property and not within the configuration object since it does not need to be stored in the DB
            //let disc = this.disciplines.find(el=>el.xDiscipline==this.selectedEventGroup.xDiscipline);
            let validity = self.validateInput(this.qualificationConfiguration.defaultTech.minPerformance, disc);
            //validity={valid, value, modified, realistic}
            self.qualConfDefaultTechPerfStr = self.formatValue(validity.value, disc); 
            self.qualConfDefaultTechPerfRealistic = validity.realistic;
            self.disc = disc;

        }, // function called when the configuration has changed (including the initial time)
        baseDisciplineTypes: [1,2], // the baseDisciplines-types where this qualification module option shall be present
        formatValue: function(value, disc){
            return window.disciplineFormatters[disc.type](value, disc, true, false);
        },
        validateInput: function(value, disc){
            return window.validatePerformance(value, disc);
        },
        qualConfDefaultTechPerfStr:'',
        qualConfDefaultTechPerfRealistic:false,
        checkInput: function(apply=false){
            const self = this.qualConfDefaultTech;
            // if apply is set to true, then the value shown might be changed since it will then also show the unit

            // get the discipline first
            let validity = self.validateInput(self.qualConfDefaultTechPerfStr, self.disc);
            //validity={valid, value, modified, realistic}
            if (apply){
                self.qualConfDefaultTechPerfStr = self.formatValue(validity.value, self.disc); 
                this.qualificationConfiguration.defaultTech.minPerformance = validity.value;
            }
            self.qualConfDefaultTechPerfRealistic = validity.realistic;
        },
        validate: function(){
            // return an object with error (boolean) and message (string). Message is displayed whenever given, either in green (error=false) or red (error=true)
            // qualification cannot be done if the qualifications are not finished yet; only applies to tech high, not tech long
            
            if (this.discipline.type==1){
                let msg='';
                // tech high
                // count the number of persons which are still in the competitions; if this number (sum over all contests) is lower than the minAthletes, the conntests shall be finihed, since the qualification can be done. (In any case, the qualification would also be finished if the qualificaiotn height was reached.) Show a green text when this is the case

                let inCompetition = 0;
                let numPerfFulfilled = 0;
                for (let g of this.roundMod.groups){
                    for (let s of g.series){
                        for (let ssr of s.seriesstartsresults){
                            inCompetition += ssr.rankingData.inCompetition;
                            if (ssr.rankingData.lastValidHeight>=this.qualificationConfiguration.defaultTech.minPerformance){
                                numPerfFulfilled++;
                            }
                        }
                    }
                }
                if (numPerfFulfilled>0){
                    msg = `${numPerfFulfilled} athletes have fulfilled the required performance.`;
                }
                if (inCompetition<=this.qualificationConfiguration.defaultTech.minAthletes){
                    return {error:false, message:'There are less (or equal) persons left in the competition then are allowed in maximum. ' + msg};
                } else {
                    if (numPerfFulfilled==0){
                        return {error:true, message:'There are more persons left in the competition then are allowed at maximum. The competition must be continued.' + msg};
                    } 
                }
                return {error:false, message:''+msg};
            } else {
                // for tech long, the qualification is a regular competition that ends as usual (i.e. everybody has n attempts). There is no early end as in vertical jumps, which would require a notification that the taregt number of athletes was already reached. 
                return {error:false, message:''};
            }
        },
        apply: function(){
            // NOTE: must also work when there were already qualification stated defined.  
            // NOTE: roundMod contains all required info of the currently selected round, as provided by the computed property "roundData"
            /*
            - groups: a computed object, containing also references to the contests with the results 
            - round: the original round object as provided by rEventGroup.rounds
            - roundFinished (bool)
            - starts (inscription to the event/eventGroup, including best+notification perfs)
            */

            const conf = this.qualificationConfiguration['defaultTech'];

            function setStatus(ssr, qualification, xContest){
                if (ssr.qualification != qualification){
                    let data = {
                        xContest,
                        xSeries: ssr.xSeries,
                        xSeriesStart: ssr.xSeriesStart,
                        qualification, 
                    };
                    rEG.room.updateQualificationInit(data);
                }
            }

            // first count all withdrawals, to know up to which rank people can get qualified:
            let maxQualRank = conf.minAthletes;
            for (let g of this.roundMod.groups){
                for (let s of g.series){
                    for (let ssr of s.seriesstartsresults){
                        if (ssr.qualification == 11){
                            // withdrawal
                            maxQualRank++;
                        }
                    }
                }
            }

            // we need to differentiate between techLong and techHigh
            //if (this.discipline.type==1){
                // tech high

                // set qualification status
                for (let g of this.roundMod.groups){
                    for (let s of g.series){
                        for (let ssr of s.seriesstartsresults){
                            if (ssr.qualification >= 11){
                                // manually qualified by referr or judge or ithdrawal
                                // never overwrite any manual status!
                                continue
                            }
                            if ((this.discipline.type==1 && ssr.rankingData.lastValidHeight>=conf.minPerformance) || (this.discipline.type==2 && ssr.rankingData.bestResult>=conf.minPerformance)){
                                setStatus(ssr, 1, g.contest.xContest);
                            } else if (ssr.ranking.overall>0 && ssr.ranking.overall <=maxQualRank){ // rank is zero when there is no rank
                                setStatus(ssr, 6, g.contest.xContest);
                            } else {
                                setStatus(ssr, 0, g.contest.xContest);
                            }
                        }
                    }
                }
                
            /*} else {
                // tech long

                // set qualification status
                for (let g of this.roundMod.groups){
                    for (let s of g.series){
                        for (let ssr of s.seriesstartsresults){
                            if (ssr.qualification >= 11){
                                // manually qualified by referr or judge or ithdrawal
                                // never overwrite any manual status!
                                continue
                            }
                            if (ssr.rankingData.bestResult>=conf.minPerformance){
                                setStatus(ssr, 1, g.contest.xContest);
                            } else if (ssr.ranking.overall <=maxQualRank){
                                setStatus(ssr, 6, g.contest.xContest);
                            } else {
                                setStatus(ssr, 0, g.contest.xContest);
                            }
                        }
                    }
                }
            }*/
        },
    }

<% } %>