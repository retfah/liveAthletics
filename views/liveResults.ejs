<!--always instantly connect to the room with the contests overview
provide this list of competitions with filter options, always including "all" as an option: category, discipline, ev date, ev status, ev track/field

mutiple contests can be selected; eventually even provide the option to select the same competition multiple times!

Mobile:
- show the list of selected contests; make it Sortable
- show only one of those selcted ("Merkliste") contests, but keep the rooms of all selected contests open for fast changes

Desktop:
- show all selected contests (desktop) or only one (mobile)

the selection of one series (or showing all) shall be done within one contest

can we know in javascript whetehr this is a desktop or mobile screen? We should not make the decision in css, since then Vue.js still has to render both versions.


for contest in selectedContests:
    if contest.type==techVertical:
        shoe the drawings for the poleVaultCompetition; access to data "easily"* by contest.data.currentAthlete...
    else if contest.type=track:
        ...

* I now must understand how Vue components work, since every of those competitions will have to be a Vue components!
-->

<script src="/static/vuContestTechHigh.js"></script>
<script src="/static/vuContestTrack.js"></script>
<script type="module">
    // include stuff which is in a module; add it to window, so that it can be used 
    import {formatCountryRegion, disciplineFormatters, validatePerformance} from '/static/performanceProcessing.js';
    window.formatCountryRegion = formatCountryRegion;
    window.disciplineFormatters = disciplineFormatters;
    window.validatePerformance = validatePerformance;

</script>
<script>

    class vuContestsOverview_LR extends roomClientVue{
        
        constructor(vue, meetingShortname){
            // parent constructor: initializes the room
            //(roomName, writing, storeInfos, path, className, datasetName='')
            super('contestsOverview@' + meetingShortname, false, true, '/static/rContestsOverviewClient.js', 'rContestsOverviewClient', '')

            // needed to call things in the vue class
            this.vue = vue;
        }

        /**
         * called when a a writing ticket is stored or deleted
         */
        onWritingTicketChange(){
            
        }

        onChange(){
            //this.vue.$forceUpdate();
        }
        
        afterFullreload(){
            // set the changed data-property as data of the vue-instance
            this.vue.contestsOverview = this.room.data.contests;
            this.vue.baseDisciplines = this.room.data.disciplines;
            this.vue.categories = this.room.data.categories;

            // backtransfer the "proxied" data from the vue, so that changing data in the room runs through the proxy
            this.room.data.contests = this.vue.contestsOverview;
        }
        
        dataArrived(){
            // do just the same as above
            this.afterFullreload();

        }
    }

    //<%- include('cLRtechHigh.ejs') %>
    //<%- include('cLRtrack.ejs') %>

    var vueLiveResults;
    // add _LR (liveresults) to make this global property unique! (important for prelaoding reasons)
    var rCO_LR; // room contests overview 

    function startupLiveResults(){
        // the vueApp
        let vueAppConfig = {
            data(){
                return {
                    burgerChecked: true,
                    showFullDetails: true,
                    contestsOverview:[],
                    baseDisciplines:[],
                    categories:[],
                    contestFilter:'',
                    selectedContests:[], // the list of all selected contests
                    contestRooms:{}, // the list of started rooms (needed in order not to open the same room twice)
                    //contestFilters:{},
                    // also gets seriesStates and participationStates
                    //<%- include('contestStates.ejs') %>

                    contestDataTest: {
                        contest:{}, 
                        series:[], 
                        startgroups:[], 
                        relatedGroups:[], 
                        disciplines:[], 
                        meeting:{}, 
                        categories:[], 
                        roomAuxData:{},
                        timeOffset:0,
                    },

                }
            },
            methods:{
                /**
                 * returns the index and the object itself of the first object where the property prop is equal to value 
                 * @param {array of objects} arr 
                 * @param {string} prop 
                 * @param {*} val 
                 * @return {array} [index, the object]
                 */
                findObjInArrayByProp(arr, prop, val){
                    for (let i=0; i<arr.length;i++){
                        if (arr[i][prop] == val){
                            return [i, arr[i]];
                        }
                    }
                    return [-1, {}];
                },
                getCategoryProperty: function(xCategory, prop){
                    let [ind, c] = this.findObjInArrayByProp(this.categories, 'xCategory', xCategory);
                    if (ind==-1){
                        return '';
                    } else {
                        return c[prop];
                    }
                },
                formatDate(dateString){
                    // first, get the first and last date of the competition (consider start, call and appealtime) 
                    let firstDate = new Date(9999,1,1);
                    let lastDate = new Date(0);
                    this.contestsOverview.forEach(co=>{
                        let d = new Date(co.datetimeAppeal);
                        if (d<firstDate){
                            firstDate = d;
                        }
                        if (d>lastDate){
                            lastDate = d;
                        }
                        d = new Date(co.datetimeStart);
                        if (d<firstDate){
                            firstDate = d;
                        }
                        if (d>lastDate){
                            lastDate = d;
                        }
                        d = new Date(co.datetimeCall);
                        if (d<firstDate){
                            firstDate = d;
                        }
                        if (d>lastDate){
                            lastDate = d;
                        }
                    })
                    let showMonth = lastDate.getMonth() != firstDate.getMonth();
                    let showDay = lastDate.getDay() != firstDate.getDay();

                    // exclude month if the competition does not span 2 month
                    // exclude day if the competition is on one day only
                    // TODO: this might be replaced in the future with start and enddate defined somewhere (not done yet; this data should be defined with other background inforamtion about the competition such as orgnaizer, place, stadium, ...) 
                    if (dateString==null){
                        return "";
                    }
                    var d = new Date(dateString);
                    var str = "";
                    if (showDay){
                        str += `${d.getDate()}`.padStart(2,'0') + ".";
                    }
                    if (showMonth){
                        str += `${d.getMonth()+1}`.padStart(2, '0') + ", "; // Month is zero based
                    }
                    if (showDay && !showMonth){
                        str += ' ';
                    }
                    str += `${d.getHours()}`.padStart(2, '0');
                    str += ":" + `${d.getMinutes()}`.padStart(2,'0');
                    return str;
                },
                getBaseDisciplineProperty: function(xDiscipline, prop){
                    let [ind, d] = this.findObjInArrayByProp(this.baseDisciplines, 'xBaseDiscipline', xDiscipline);
                    if (ind==-1){
                        return '';
                    } else {
                        return d[prop];
                    }
                },
                unpinContest(index){
                    // delete from list oif selected contests
                    let co = this.selectedContests.splice(index,1);

                    // check if this room is not needed anymore and can be closed
                    if (!this.selectedContests.some(c=>c.xContest==co.xContest)){
                        // no selecetd contest uses this room anymore, so we can close it
                        // TODO
                        //room.leave() // this would be on the room itself, however we should do this via the roomManager
                    }

                },
                pinContest(co){

                    // hide the menu
                    this.burgerChecked = false;

                    // first check if the room of the contest already exists
                    let room;
                    if (co.xContest in this.contestRooms){
                        room = this.contestRooms[co.xContest];
                    } else {
                        // create the room
                        room = {
                            data:{},
                            room:null, 
                        };

                        if (this.contestType(co)==1){
                            // tech high discipline
                            // we need to initialize the data object here in order not to get any errors
                            room.data = {
                                contest:{}, 
                                series:[], 
                                startgroups:[], 
                                relatedGroups:[], 
                                disciplines:[], 
                                meeting:{}, 
                                categories:[], 
                                roomAuxData:{},
                                timeOffset:0,
                            }
                            
                            // we must create the reactive object here and then only reference the reactive property and not the original object since room!= this.contestRooms[co.xContest]
                            this.contestRooms[co.xContest] = room;

                            this.contestRooms[co.xContest].room = new vuContestTechHigh(this.contestRooms[co.xContest].data, ms, co.xContest, false);

                        } else if (this.contestType(co)==3) {
                            // track disciplines
                            room.data = {
                                //auxData:{},
                                categories:[],
                                contest:{},
                                disciplines:[],
                                meeting:{},
                                relatedGroups:[],
                                series:[],
                                startgroups:[],
                                timeOffset:0,
                            }
                            // we must create the reactive object here and then only reference the reactive property and not the original object since room!= this.contestRooms[co.xContest]
                            this.contestRooms[co.xContest] = room;

                            this.contestRooms[co.xContest].room = new vuContestTrack(this.contestRooms[co.xContest].data, ms, co.xContest, false);
                        } else {
                            // cannot handle this kind of discipline currently.
                            alert(`There are no liveResults for this discipline (${co.xBaseDiscipline}) yet.`);
                        }
                    }


                    this.selectedContests.push(co);

                    /*let bd = this.baseDisciplines.find(bd=> bd.xBaseDiscipline==co.xBaseDiscipline);
                    if (bd){
                        if (bd.type==1){
                            window.location = "./techHighAdmin?xContest="+co.xContest; // TOOD: do this via the preloaded pages!
                        } else {
                            alert("<%= __('Could not find the page for this type of discipline.') %>");
                        }
                    } else {
                        alert("<%= __('Could not find the page for this type of discipline.') %>");
                    }*/
                },
                statusBackgroundColor(status){
                    let s = this.contestStates.find(s=>s.value==status);
                    if (s){
                        return s.backgroundColor;
                    }
                    return '#333333';
                },
                statusBackgroundColorHover(status){
                    let s = this.contestStates.find(s=>s.value==status);
                    if (s){
                        // split the hex code into the three parts and multiply it with 0.8
                        let f = 0.8;
                        let R = Math.round(f*parseInt(s.backgroundColor.slice(1,3),16));
                        let G = Math.round(f*parseInt(s.backgroundColor.slice(3,5),16));
                        let B = Math.round(f*parseInt(s.backgroundColor.slice(5,7),16));
                        return '#' + R.toString(16).padStart(2,0) + G.toString(16).padStart(2,0) + B.toString(16).padStart(2,0);
                    }
                    return '#111111';
                },
                statusTextColor(status){
                    let s = this.contestStates.find(s=>s.value==status);
                    if (s){
                        return s.textColor;
                    }
                    return status;
                },
                statusText(status){
                    let s = this.contestStates.find(s=>s.value==status);
                    if (s){
                        return s.text;
                    }
                    return status;
                },
                contestType(co){
                    // return the type of the discipline of the given contest
                    let d = this.baseDisciplines.find(d=>d.xBaseDiscipline==co.xBaseDiscipline);
                    if (d){
                        return d.type;
                    }else{
                        return null
                    }
                },
            },
            computed:{
                contestFilters: function(){
                    // split the input string by whitespace
                    let filterWords = this.contestFilter.split(" ");

                    // every word may be part of every of the four columns
                    let filter = {};
                    let i=1;
                    for (let filterWord of filterWords){
                        filter["filter" + i] = {keys:['categories', 'discname', 'eventGroupNames'], value:filterWord} //
                        i += 1;
                    }
                    return filter;
                },
                contestsOverviewForList: function(){
                    //create a copy
                    let mod = Array.from(this.contestsOverview, el=>Object.assign({}, el));

                    mod.forEach((co)=>{
                        co.formattedStart = this.formatDate(co.datetimeStart);
                        co.formattedCall = this.formatDate(co.datetimeCall);
                        co.formattedAppeal = this.formatDate(co.datetimeAppeal);
                        co.discName = this.getBaseDisciplineProperty(co.xBaseDiscipline, 'shortname');

                        // create some additional information merged from the different rounds
                        let eGnames = [];
                        let categories = [];
                        let infos = [];
                        for (let g of co.groups){
                            eGnames.push(g.eventGroupName);
                            for (let e of g.events){
                                if (categories.indexOf(e.xCategory)==-1){
                                    categories.push(e.xCategory);
                                }
                                // if multiple infos are the same, we still only store them once
                                if (infos.indexOf(e.info)==-1){
                                    infos.push(e.info);
                                }
                            }
                        }

                        // sort and translate the categories
                        let catObjects = categories.map(xCat=>{
                            return this.categories.find(c=>c.xCategory==xCat);
                        }) 
                        catObjects.sort((a,b)=>a.sortorder-b.sortorder);
                        co.categories = catObjects.reduce((merged, val)=>merged + ', ' + val.shortname, '').slice(2);

                        co.eventGroupNames = eGnames.reduce((merged, val)=>merged + ', ' + val, '').slice(2);

                        co.infos = infos.reduce((merged, val)=>merged + ', ' + val, '').slice(2);


                    })
                    this.formatDate

                    return mod;
                },
            },
            watch:{

            },
            components:{
                'v-table':VTable,
                'v-th': VTh,
                'v-tr':VTr,
                'techHighLive':cLRtechHigh,
                'trackLive': cLRtrack,
            }
        }

        vueLiveResults = Vue.createApp(vueAppConfig).mount('#vueLiveResults');

        // load the room:
        let ms = getMeetingShortname();
        rCO_LR = new vuContestsOverview_LR(vueLiveResults, ms);
        //r2 = new vuContestTechHigh(vueLiveResults.contestDataTest, ms, 5, false)
    }

    function shutdownLiveResults(){
        // todo: add here unloading the rooms!
        delete window.vueLiveResults;
    }

</script>

<div id="vueLiveResults" class="liveRes">
    <div class="hideDesktop flexHeadline"><!-- This is the head, contianing the title and the hamburger menu on small screens -->
        <input class="side-menu" type="checkbox" id="side-menu" v-model="burgerChecked" />
        <label class="hamb" for="side-menu"><span class="hamb-line"></span></label>
        <h1><%= __("Live results") %></h1>
    </div>
    <div class="nav" v-bind:class="{shown: burgerChecked}">
        <div>
            <h1 class="hideMobile"><%= __("Live results") %></h1>
            <div v-if="selectedContests.length>0" class="hideDesktop">
                <h2 ><%= __("Pinned contests") %></h2>
                <div v-for="(co, index) of selectedContests" class="navItem">
                    <div style="flex:1;">{{co.discName}} {{co.categories}}</div>
                    <button type="button" v-on:click="unpinContest(index)" class="close btn">X</button>
                </div>
            </div>

            <h2><%= __("Contest overview") %></h2>
            <label>
                <%= __('Filter') %>:
                <input type="search" v-model="contestFilter">
            </label>
            <div>
                <v-table :data="contestsOverviewForList" :filters="contestFilters"> <!-- :filters="contestFilter" -->
                    <template #head> <!-- # head is a shorthand for v-slot:head-->
                        <thead>
                            <tr>
                                <th is="vue:v-th" sortkey="discName"><%= __("Discipline") %></th>
                                <th is="vue:v-th" sortkey="categories"><%= __("Categories") %></th>
                                <!--<th is="vue:v-th" sortkey="name"><%= __("Name") %></th>-->
                                <th is="vue:v-th" sortkey="formattedStart" defaultsort="asc"><%= __("Start") %></th>
                                <th is="vue:v-th" sortkey="name"><%= __("Contest Name") %></th>
                                <!--<th is="vue:v-th" sortkey="eventGroupNames"><%= __("Event Group Names") %></th>-->
                                <!--<th><%= __("Groups in EventGroups with Events") %></th>-->
                            </tr>
                        </thead>
                    </template>
                    <template v-slot:body="{displayData}"> <!--v-slot:name="variables"-->
                        <tbody class="selectTable">
                            <tr v-for="co in displayData" :key="co.xContest" v-on:click="pinContest(co)" v-bind:style="{ 'background-color': statusBackgroundColor(co.status), '--backColorHover': statusBackgroundColorHover(co.status), color: statusTextColor(co.status) }">
                                <td>{{co.discName}}</td>
                                <td>{{co.categories}}</td>
                                <!--<td>{{co.name}}</td>-->
                                <td>{{co.formattedStart}}</td>
                                <td>{{co.name}}</td>
                                <!--<td>{{co.eventGroupNames}}</td>-->
                                <!--<td>
                                    <div v-for="g in co.groups">
                                        <template v-for="(evt, evtIndex) in g.events">
                                            <div style="display:inline" v-if="evtIndex==0">{{getCategoryProperty(evt.xCategory, 'shortname')}}</div>
                                            <div style="display:inline" v-else>/{{getCategoryProperty(evt.xCategory, 'shortname')}}</div>
                                            <div style="display:inline; margin-left: 0.25em;" v-if="evt.info!=''">({{evt.info}})</div>
                                        </template>
                                        <div style="display:inline; margin-left: 0.25em;">{{g.eventGroupName}} {{g.roundName}}</div>
                                        <div style="display:inline; margin-left: 0.25em;" v-if="g.numGroups>1 && '<%= __(`Group`) %> ' + g.number.toString() != g.groupName"><%= __('Group') %> {{g.number}} "{{g.groupName}}"</div>
                                        <div style="display:inline; margin-left: 0.25em;" v-if="g.numGroups>1 && '<%= __(`Group`) %> ' + g.number.toString() == g.groupName"><%= __('Group') %> {{g.number}}</div>
                                    </div>
                                </td>-->
                            </tr>
                        </tbody>
                    </template>
                </v-table>
            </div>
        </div>


    </div>
    <!-- instead of v-for, use draggable objects, so that resorting is possible as well -->
    <div class="contestsContainer">
        <div v-for="(co, index) of selectedContests" class="contestContainer">
            <button type="button" v-on:click="unpinContest(index)" class="close btn">X</button>
            <template v-if="contestType(co)==1">
                <tech-high-live :series="contestRooms[co.xContest].data.series" :startgroups="contestRooms[co.xContest].data.startgroups" :related-groups="contestRooms[co.xContest].data.relatedGroups" :disciplines="contestRooms[co.xContest].data.disciplines" :meeting="contestRooms[co.xContest].data.meeting" :categories="contestRooms[co.xContest].data.categories" :room-aux-data="contestRooms[co.xContest].data.roomAuxData" :contest="contestRooms[co.xContest].data.contest" :read-only="true" :time-offset="contestRooms[co.xContest].data.timeOffset">
                </tech-high-live>
            </template>
            <template v-if="contestType(co)==3">
                <track-live :categories="contestRooms[co.xContest].data.categories" :contest="contestRooms[co.xContest].data.contest" :disciplines="contestRooms[co.xContest].data.disciplines" :meeting="contestRooms[co.xContest].data.meeting" :related-groups="contestRooms[co.xContest].data.relatedGroups" :series="contestRooms[co.xContest].data.series" :startgroups="contestRooms[co.xContest].data.startgroups"   :read-only="true" :time-offset="contestRooms[co.xContest].data.timeOffset">
                </track-live>
            </template>
        </div>
    </div>
    

    <!--<techHighLive :series="contestDataTest.series" :startgroups="contestDataTest.startgroups" :related-groups="contestDataTest.relatedGroups" :disciplines="contestDataTest.disciplines" :meeting="contestDataTest.meeting" :categories="contestDataTest.categories" :room-aux-data="contestDataTest.roomAuxData" :contest="contestDataTest.contest" :read-only="true">
    </techHighLive>-->
</div>